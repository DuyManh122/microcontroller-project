
testSTM32f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd48  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  0800bee0  0800bee0  0001bee0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4e0  0800c4e0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800c4e0  0800c4e0  0001c4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4e8  0800c4e8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4e8  0800c4e8  0001c4e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c4ec  0800c4ec  0001c4ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800c4f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028b8  20000074  0800c564  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000292c  0800c564  0002292c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e48  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002696  00000000  00000000  00033eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  00036588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e0  00000000  00000000  00037728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001712d  00000000  00000000  00038808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000158f8  00000000  00000000  0004f935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092606  00000000  00000000  0006522d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7833  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005594  00000000  00000000  000f7884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000074 	.word	0x20000074
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800bec8 	.word	0x0800bec8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000078 	.word	0x20000078
 80001d4:	0800bec8 	.word	0x0800bec8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b974 	b.w	8000ee0 <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9d08      	ldr	r5, [sp, #32]
 8000c16:	4604      	mov	r4, r0
 8000c18:	468e      	mov	lr, r1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d14d      	bne.n	8000cba <__udivmoddi4+0xaa>
 8000c1e:	428a      	cmp	r2, r1
 8000c20:	4694      	mov	ip, r2
 8000c22:	d969      	bls.n	8000cf8 <__udivmoddi4+0xe8>
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	b152      	cbz	r2, 8000c40 <__udivmoddi4+0x30>
 8000c2a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c2e:	f1c2 0120 	rsb	r1, r2, #32
 8000c32:	fa20 f101 	lsr.w	r1, r0, r1
 8000c36:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c3a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c3e:	4094      	lsls	r4, r2
 8000c40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c44:	0c21      	lsrs	r1, r4, #16
 8000c46:	fbbe f6f8 	udiv	r6, lr, r8
 8000c4a:	fa1f f78c 	uxth.w	r7, ip
 8000c4e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c52:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c56:	fb06 f107 	mul.w	r1, r6, r7
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	d90a      	bls.n	8000c74 <__udivmoddi4+0x64>
 8000c5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c62:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c66:	f080 811f 	bcs.w	8000ea8 <__udivmoddi4+0x298>
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	f240 811c 	bls.w	8000ea8 <__udivmoddi4+0x298>
 8000c70:	3e02      	subs	r6, #2
 8000c72:	4463      	add	r3, ip
 8000c74:	1a5b      	subs	r3, r3, r1
 8000c76:	b2a4      	uxth	r4, r4
 8000c78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c7c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c84:	fb00 f707 	mul.w	r7, r0, r7
 8000c88:	42a7      	cmp	r7, r4
 8000c8a:	d90a      	bls.n	8000ca2 <__udivmoddi4+0x92>
 8000c8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c90:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c94:	f080 810a 	bcs.w	8000eac <__udivmoddi4+0x29c>
 8000c98:	42a7      	cmp	r7, r4
 8000c9a:	f240 8107 	bls.w	8000eac <__udivmoddi4+0x29c>
 8000c9e:	4464      	add	r4, ip
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca6:	1be4      	subs	r4, r4, r7
 8000ca8:	2600      	movs	r6, #0
 8000caa:	b11d      	cbz	r5, 8000cb4 <__udivmoddi4+0xa4>
 8000cac:	40d4      	lsrs	r4, r2
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	d909      	bls.n	8000cd2 <__udivmoddi4+0xc2>
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	f000 80ef 	beq.w	8000ea2 <__udivmoddi4+0x292>
 8000cc4:	2600      	movs	r6, #0
 8000cc6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cca:	4630      	mov	r0, r6
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	fab3 f683 	clz	r6, r3
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	d14a      	bne.n	8000d70 <__udivmoddi4+0x160>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xd4>
 8000cde:	4282      	cmp	r2, r0
 8000ce0:	f200 80f9 	bhi.w	8000ed6 <__udivmoddi4+0x2c6>
 8000ce4:	1a84      	subs	r4, r0, r2
 8000ce6:	eb61 0303 	sbc.w	r3, r1, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	469e      	mov	lr, r3
 8000cee:	2d00      	cmp	r5, #0
 8000cf0:	d0e0      	beq.n	8000cb4 <__udivmoddi4+0xa4>
 8000cf2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cf6:	e7dd      	b.n	8000cb4 <__udivmoddi4+0xa4>
 8000cf8:	b902      	cbnz	r2, 8000cfc <__udivmoddi4+0xec>
 8000cfa:	deff      	udf	#255	; 0xff
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f040 8092 	bne.w	8000e2a <__udivmoddi4+0x21a>
 8000d06:	eba1 010c 	sub.w	r1, r1, ip
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2601      	movs	r6, #1
 8000d14:	0c20      	lsrs	r0, r4, #16
 8000d16:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d1a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d1e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d22:	fb0e f003 	mul.w	r0, lr, r3
 8000d26:	4288      	cmp	r0, r1
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x12c>
 8000d2a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d2e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x12a>
 8000d34:	4288      	cmp	r0, r1
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2c0>
 8000d3a:	4643      	mov	r3, r8
 8000d3c:	1a09      	subs	r1, r1, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d44:	fb07 1110 	mls	r1, r7, r0, r1
 8000d48:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x156>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x154>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2ca>
 8000d64:	4608      	mov	r0, r1
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d6e:	e79c      	b.n	8000caa <__udivmoddi4+0x9a>
 8000d70:	f1c6 0720 	rsb	r7, r6, #32
 8000d74:	40b3      	lsls	r3, r6
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d82:	fa01 f306 	lsl.w	r3, r1, r6
 8000d86:	431c      	orrs	r4, r3
 8000d88:	40f9      	lsrs	r1, r7
 8000d8a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d92:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d96:	0c20      	lsrs	r0, r4, #16
 8000d98:	fa1f fe8c 	uxth.w	lr, ip
 8000d9c:	fb09 1118 	mls	r1, r9, r8, r1
 8000da0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000da4:	fb08 f00e 	mul.w	r0, r8, lr
 8000da8:	4288      	cmp	r0, r1
 8000daa:	fa02 f206 	lsl.w	r2, r2, r6
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b8>
 8000db0:	eb1c 0101 	adds.w	r1, ip, r1
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2bc>
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2bc>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4461      	add	r1, ip
 8000dc8:	1a09      	subs	r1, r1, r0
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd0:	fb09 1110 	mls	r1, r9, r0, r1
 8000dd4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ddc:	458e      	cmp	lr, r1
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1e2>
 8000de0:	eb1c 0101 	adds.w	r1, ip, r1
 8000de4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2b4>
 8000dea:	458e      	cmp	lr, r1
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2b4>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4461      	add	r1, ip
 8000df2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000df6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dfa:	eba1 010e 	sub.w	r1, r1, lr
 8000dfe:	42a1      	cmp	r1, r4
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46a6      	mov	lr, r4
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x2a4>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x2a0>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x212>
 8000e0a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e0e:	eb61 010e 	sbc.w	r1, r1, lr
 8000e12:	fa01 f707 	lsl.w	r7, r1, r7
 8000e16:	fa22 f306 	lsr.w	r3, r2, r6
 8000e1a:	40f1      	lsrs	r1, r6
 8000e1c:	431f      	orrs	r7, r3
 8000e1e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e22:	2600      	movs	r6, #0
 8000e24:	4631      	mov	r1, r6
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	f1c2 0320 	rsb	r3, r2, #32
 8000e2e:	40d8      	lsrs	r0, r3
 8000e30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e34:	fa21 f303 	lsr.w	r3, r1, r3
 8000e38:	4091      	lsls	r1, r2
 8000e3a:	4301      	orrs	r1, r0
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e48:	fb07 3610 	mls	r6, r7, r0, r3
 8000e4c:	0c0b      	lsrs	r3, r1, #16
 8000e4e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e52:	fb00 f60e 	mul.w	r6, r0, lr
 8000e56:	429e      	cmp	r6, r3
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x260>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b8>
 8000e68:	429e      	cmp	r6, r3
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b8>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4463      	add	r3, ip
 8000e70:	1b9b      	subs	r3, r3, r6
 8000e72:	b289      	uxth	r1, r1
 8000e74:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e78:	fb07 3316 	mls	r3, r7, r6, r3
 8000e7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e80:	fb06 f30e 	mul.w	r3, r6, lr
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x28a>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2b0>
 8000e92:	428b      	cmp	r3, r1
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2b0>
 8000e96:	3e02      	subs	r6, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	1ac9      	subs	r1, r1, r3
 8000e9c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0x104>
 8000ea2:	462e      	mov	r6, r5
 8000ea4:	4628      	mov	r0, r5
 8000ea6:	e705      	b.n	8000cb4 <__udivmoddi4+0xa4>
 8000ea8:	4606      	mov	r6, r0
 8000eaa:	e6e3      	b.n	8000c74 <__udivmoddi4+0x64>
 8000eac:	4618      	mov	r0, r3
 8000eae:	e6f8      	b.n	8000ca2 <__udivmoddi4+0x92>
 8000eb0:	454b      	cmp	r3, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f8>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ebc:	3801      	subs	r0, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f8>
 8000ec0:	4646      	mov	r6, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x28a>
 8000ec4:	4620      	mov	r0, r4
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1e2>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x260>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b8>
 8000ed0:	3b02      	subs	r3, #2
 8000ed2:	4461      	add	r1, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x12c>
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	e709      	b.n	8000cee <__udivmoddi4+0xde>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x156>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	0000      	movs	r0, r0
	...

08000ee8 <MEL_BANK_FILTER>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void MEL_BANK_FILTER(float freq_max, int nfilt)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	ed87 0a01 	vstr	s0, [r7, #4]
 8000ef2:	6038      	str	r0, [r7, #0]
	float   m_min = 0.0;
 8000ef4:	f04f 0300 	mov.w	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
	float	m_max = 2595.0 * log10f(1.0 + freq_max / 700.0);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff fad0 	bl	80004a0 <__aeabi_f2d>
 8000f00:	f04f 0200 	mov.w	r2, #0
 8000f04:	4b46      	ldr	r3, [pc, #280]	; (8001020 <MEL_BANK_FILTER+0x138>)
 8000f06:	f7ff fc4d 	bl	80007a4 <__aeabi_ddiv>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	4610      	mov	r0, r2
 8000f10:	4619      	mov	r1, r3
 8000f12:	f04f 0200 	mov.w	r2, #0
 8000f16:	4b43      	ldr	r3, [pc, #268]	; (8001024 <MEL_BANK_FILTER+0x13c>)
 8000f18:	f7ff f964 	bl	80001e4 <__adddf3>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	460b      	mov	r3, r1
 8000f20:	4610      	mov	r0, r2
 8000f22:	4619      	mov	r1, r3
 8000f24:	f7ff fe0c 	bl	8000b40 <__aeabi_d2f>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	ee00 3a10 	vmov	s0, r3
 8000f2e:	f008 fba7 	bl	8009680 <log10f>
 8000f32:	ee10 3a10 	vmov	r3, s0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fab2 	bl	80004a0 <__aeabi_f2d>
 8000f3c:	a334      	add	r3, pc, #208	; (adr r3, 8001010 <MEL_BANK_FILTER+0x128>)
 8000f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f42:	f7ff fb05 	bl	8000550 <__aeabi_dmul>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f7ff fdf7 	bl	8000b40 <__aeabi_d2f>
 8000f52:	4603      	mov	r3, r0
 8000f54:	617b      	str	r3, [r7, #20]
	float   delta = (m_max - m_min) / (nfilt + 1);
 8000f56:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f5a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f5e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	3301      	adds	r3, #1
 8000f66:	ee07 3a90 	vmov	s15, r3
 8000f6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f72:	edc7 7a04 	vstr	s15, [r7, #16]

	for (int i = 0; i <= ( nfilt +  1); i++)
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
 8000f7a:	e03d      	b.n	8000ff8 <MEL_BANK_FILTER+0x110>
	{
		float mel_temp= delta * i;
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	ee07 3a90 	vmov	s15, r3
 8000f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f86:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f8e:	edc7 7a03 	vstr	s15, [r7, #12]
		FREQ_MEL[i] =700.0 * (pow(10.0,mel_temp / 2595.0) - 1.0);
 8000f92:	68f8      	ldr	r0, [r7, #12]
 8000f94:	f7ff fa84 	bl	80004a0 <__aeabi_f2d>
 8000f98:	a31d      	add	r3, pc, #116	; (adr r3, 8001010 <MEL_BANK_FILTER+0x128>)
 8000f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9e:	f7ff fc01 	bl	80007a4 <__aeabi_ddiv>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	ec43 2b17 	vmov	d7, r2, r3
 8000faa:	eeb0 1a47 	vmov.f32	s2, s14
 8000fae:	eef0 1a67 	vmov.f32	s3, s15
 8000fb2:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8001018 <MEL_BANK_FILTER+0x130>
 8000fb6:	f008 fac7 	bl	8009548 <pow>
 8000fba:	ec51 0b10 	vmov	r0, r1, d0
 8000fbe:	f04f 0200 	mov.w	r2, #0
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <MEL_BANK_FILTER+0x13c>)
 8000fc4:	f7ff f90c 	bl	80001e0 <__aeabi_dsub>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	4610      	mov	r0, r2
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f04f 0200 	mov.w	r2, #0
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <MEL_BANK_FILTER+0x138>)
 8000fd6:	f7ff fabb 	bl	8000550 <__aeabi_dmul>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4610      	mov	r0, r2
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f7ff fdad 	bl	8000b40 <__aeabi_d2f>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	490f      	ldr	r1, [pc, #60]	; (8001028 <MEL_BANK_FILTER+0x140>)
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	440b      	add	r3, r1
 8000ff0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i <= ( nfilt +  1); i++)
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	61fb      	str	r3, [r7, #28]
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	69fa      	ldr	r2, [r7, #28]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	ddbc      	ble.n	8000f7c <MEL_BANK_FILTER+0x94>
	}
}
 8001002:	bf00      	nop
 8001004:	bf00      	nop
 8001006:	3720      	adds	r7, #32
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	f3af 8000 	nop.w
 8001010:	00000000 	.word	0x00000000
 8001014:	40a44600 	.word	0x40a44600
 8001018:	00000000 	.word	0x00000000
 800101c:	40240000 	.word	0x40240000
 8001020:	4085e000 	.word	0x4085e000
 8001024:	3ff00000 	.word	0x3ff00000
 8001028:	20000268 	.word	0x20000268

0800102c <w>:

struct complex w(float kn, float N)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0
 8001032:	ed87 0a03 	vstr	s0, [r7, #12]
 8001036:	edc7 0a02 	vstr	s1, [r7, #8]
	struct complex A;
	A.re = cos(2*pi*(kn/N));
 800103a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80010e8 <w+0xbc>
 800103e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001042:	ed97 6a03 	vldr	s12, [r7, #12]
 8001046:	edd7 6a02 	vldr	s13, [r7, #8]
 800104a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800104e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001052:	ee17 0a90 	vmov	r0, s15
 8001056:	f7ff fa23 	bl	80004a0 <__aeabi_f2d>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	ec43 2b10 	vmov	d0, r2, r3
 8001062:	f008 f901 	bl	8009268 <cos>
 8001066:	ec53 2b10 	vmov	r2, r3, d0
 800106a:	4610      	mov	r0, r2
 800106c:	4619      	mov	r1, r3
 800106e:	f7ff fd67 	bl	8000b40 <__aeabi_d2f>
 8001072:	4603      	mov	r3, r0
 8001074:	613b      	str	r3, [r7, #16]
	A.im = -sin(2*pi*(kn/N));
 8001076:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80010e8 <w+0xbc>
 800107a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800107e:	ed97 6a03 	vldr	s12, [r7, #12]
 8001082:	edd7 6a02 	vldr	s13, [r7, #8]
 8001086:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800108a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108e:	ee17 0a90 	vmov	r0, s15
 8001092:	f7ff fa05 	bl	80004a0 <__aeabi_f2d>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	ec43 2b10 	vmov	d0, r2, r3
 800109e:	f008 f9b7 	bl	8009410 <sin>
 80010a2:	ec53 2b10 	vmov	r2, r3, d0
 80010a6:	4610      	mov	r0, r2
 80010a8:	4619      	mov	r1, r3
 80010aa:	f7ff fd49 	bl	8000b40 <__aeabi_d2f>
 80010ae:	4603      	mov	r3, r0
 80010b0:	ee07 3a90 	vmov	s15, r3
 80010b4:	eef1 7a67 	vneg.f32	s15, s15
 80010b8:	edc7 7a05 	vstr	s15, [r7, #20]
	return A;
 80010bc:	f107 0318 	add.w	r3, r7, #24
 80010c0:	f107 0210 	add.w	r2, r7, #16
 80010c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010c8:	e883 0003 	stmia.w	r3, {r0, r1}
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	ee07 2a10 	vmov	s14, r2
 80010d4:	ee07 3a90 	vmov	s15, r3
}
 80010d8:	eeb0 0a47 	vmov.f32	s0, s14
 80010dc:	eef0 0a67 	vmov.f32	s1, s15
 80010e0:	3720      	adds	r7, #32
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40490fdb 	.word	0x40490fdb

080010ec <reverseBit>:

int reverseBit(int a)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	int b = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < log2f(FFT_LENGTH); i++)
 80010f8:	2300      	movs	r3, #0
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	e011      	b.n	8001122 <reverseBit+0x36>
	{
		b = b << 1;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
		if ((a & 1) == 1)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <reverseBit+0x2a>
		{
			b = b | 1;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	60fb      	str	r3, [r7, #12]
		}
		a = a >> 1;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	105b      	asrs	r3, r3, #1
 800111a:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < log2f(FFT_LENGTH); i++)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	3301      	adds	r3, #1
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	ee07 3a90 	vmov	s15, r3
 8001128:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800112c:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8001130:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001138:	d4e1      	bmi.n	80010fe <reverseBit+0x12>
	}
	return b;
 800113a:	68fb      	ldr	r3, [r7, #12]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <fft>:

void fft(float* input,int length)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	ed2d 8b04 	vpush	{d8-d9}
 800114e:	b090      	sub	sp, #64	; 0x40
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
	struct complex pro;
	for(int i = 0; i < length; i++)
 8001156:	2300      	movs	r3, #0
 8001158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800115a:	e017      	b.n	800118c <fft+0x44>
	{
		b[i].re = input[reverseBit(i)];
 800115c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800115e:	f7ff ffc5 	bl	80010ec <reverseBit>
 8001162:	4603      	mov	r3, r0
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	49d0      	ldr	r1, [pc, #832]	; (80014b0 <fft+0x368>)
 800116e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	440b      	add	r3, r1
 8001174:	601a      	str	r2, [r3, #0]
		b[i].im = 0;
 8001176:	4ace      	ldr	r2, [pc, #824]	; (80014b0 <fft+0x368>)
 8001178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	4413      	add	r3, r2
 800117e:	3304      	adds	r3, #4
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < length; i++)
 8001186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001188:	3301      	adds	r3, #1
 800118a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800118c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	429a      	cmp	r2, r3
 8001192:	dbe3      	blt.n	800115c <fft+0x14>
	}
	for (int step = 0 ; (1 << step) < length; step ++)
 8001194:	2300      	movs	r3, #0
 8001196:	63bb      	str	r3, [r7, #56]	; 0x38
 8001198:	e174      	b.n	8001484 <fft+0x33c>
	{
		for(int i = 0; i < length ; i ++)
 800119a:	2300      	movs	r3, #0
 800119c:	637b      	str	r3, [r7, #52]	; 0x34
 800119e:	e169      	b.n	8001474 <fft+0x32c>
		{
			if((i & (1 << step )) == 0)
 80011a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011a4:	fa42 f303 	asr.w	r3, r2, r3
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f040 815e 	bne.w	800146e <fft+0x326>
			{
				pro.re = b[i+ (1 << step)].re * w((i+ (1 << step)) % (1 << step),pow(2,step+1)).re -  b[i+ (1 << step)].im * w((i+ (1 << step)) % (1 << step),pow(2,step+1)).im;
 80011b2:	2201      	movs	r2, #1
 80011b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011b6:	409a      	lsls	r2, r3
 80011b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ba:	4413      	add	r3, r2
 80011bc:	4abc      	ldr	r2, [pc, #752]	; (80014b0 <fft+0x368>)
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	4413      	add	r3, r2
 80011c2:	ed93 8a00 	vldr	s16, [r3]
 80011c6:	2201      	movs	r2, #1
 80011c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011ca:	409a      	lsls	r2, r3
 80011cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ce:	4413      	add	r3, r2
 80011d0:	2101      	movs	r1, #1
 80011d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80011d4:	fa01 f202 	lsl.w	r2, r1, r2
 80011d8:	fb93 f1f2 	sdiv	r1, r3, r2
 80011dc:	fb01 f202 	mul.w	r2, r1, r2
 80011e0:	1a9b      	subs	r3, r3, r2
 80011e2:	ee07 3a90 	vmov	s15, r3
 80011e6:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 80011ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011ec:	3301      	adds	r3, #1
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff f944 	bl	800047c <__aeabi_i2d>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	ec43 2b11 	vmov	d1, r2, r3
 80011fc:	ed9f 0baa 	vldr	d0, [pc, #680]	; 80014a8 <fft+0x360>
 8001200:	f008 f9a2 	bl	8009548 <pow>
 8001204:	ec53 2b10 	vmov	r2, r3, d0
 8001208:	4610      	mov	r0, r2
 800120a:	4619      	mov	r1, r3
 800120c:	f7ff fc98 	bl	8000b40 <__aeabi_d2f>
 8001210:	4603      	mov	r3, r0
 8001212:	ee00 3a90 	vmov	s1, r3
 8001216:	eeb0 0a68 	vmov.f32	s0, s17
 800121a:	f7ff ff07 	bl	800102c <w>
 800121e:	eeb0 7a40 	vmov.f32	s14, s0
 8001222:	eef0 7a60 	vmov.f32	s15, s1
 8001226:	ed87 7a05 	vstr	s14, [r7, #20]
 800122a:	edc7 7a06 	vstr	s15, [r7, #24]
 800122e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001232:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001236:	2201      	movs	r2, #1
 8001238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800123a:	409a      	lsls	r2, r3
 800123c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800123e:	4413      	add	r3, r2
 8001240:	4a9b      	ldr	r2, [pc, #620]	; (80014b0 <fft+0x368>)
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	4413      	add	r3, r2
 8001246:	3304      	adds	r3, #4
 8001248:	edd3 8a00 	vldr	s17, [r3]
 800124c:	2201      	movs	r2, #1
 800124e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001250:	409a      	lsls	r2, r3
 8001252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001254:	4413      	add	r3, r2
 8001256:	2101      	movs	r1, #1
 8001258:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800125a:	fa01 f202 	lsl.w	r2, r1, r2
 800125e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001262:	fb01 f202 	mul.w	r2, r1, r2
 8001266:	1a9b      	subs	r3, r3, r2
 8001268:	ee07 3a90 	vmov	s15, r3
 800126c:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 8001270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001272:	3301      	adds	r3, #1
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f901 	bl	800047c <__aeabi_i2d>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	ec43 2b11 	vmov	d1, r2, r3
 8001282:	ed9f 0b89 	vldr	d0, [pc, #548]	; 80014a8 <fft+0x360>
 8001286:	f008 f95f 	bl	8009548 <pow>
 800128a:	ec53 2b10 	vmov	r2, r3, d0
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	f7ff fc55 	bl	8000b40 <__aeabi_d2f>
 8001296:	4603      	mov	r3, r0
 8001298:	ee00 3a90 	vmov	s1, r3
 800129c:	eeb0 0a49 	vmov.f32	s0, s18
 80012a0:	f7ff fec4 	bl	800102c <w>
 80012a4:	eeb0 7a40 	vmov.f32	s14, s0
 80012a8:	eef0 7a60 	vmov.f32	s15, s1
 80012ac:	ed87 7a07 	vstr	s14, [r7, #28]
 80012b0:	edc7 7a08 	vstr	s15, [r7, #32]
 80012b4:	edd7 7a08 	vldr	s15, [r7, #32]
 80012b8:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80012bc:	ee78 7a67 	vsub.f32	s15, s16, s15
 80012c0:	edc7 7a03 	vstr	s15, [r7, #12]
				pro.im = b[i+ (1 << step)].im * w((i+ (1 << step)) % (1 << step),pow(2,step+1)).re +  b[i+ (1 << step)].re * w((i+ (1 << step)) % (1 << step),pow(2,step+1)).im;
 80012c4:	2201      	movs	r2, #1
 80012c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012c8:	409a      	lsls	r2, r3
 80012ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012cc:	4413      	add	r3, r2
 80012ce:	4a78      	ldr	r2, [pc, #480]	; (80014b0 <fft+0x368>)
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	4413      	add	r3, r2
 80012d4:	3304      	adds	r3, #4
 80012d6:	ed93 8a00 	vldr	s16, [r3]
 80012da:	2201      	movs	r2, #1
 80012dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012de:	409a      	lsls	r2, r3
 80012e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012e2:	4413      	add	r3, r2
 80012e4:	2101      	movs	r1, #1
 80012e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80012e8:	fa01 f202 	lsl.w	r2, r1, r2
 80012ec:	fb93 f1f2 	sdiv	r1, r3, r2
 80012f0:	fb01 f202 	mul.w	r2, r1, r2
 80012f4:	1a9b      	subs	r3, r3, r2
 80012f6:	ee07 3a90 	vmov	s15, r3
 80012fa:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 80012fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001300:	3301      	adds	r3, #1
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f8ba 	bl	800047c <__aeabi_i2d>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	ec43 2b11 	vmov	d1, r2, r3
 8001310:	ed9f 0b65 	vldr	d0, [pc, #404]	; 80014a8 <fft+0x360>
 8001314:	f008 f918 	bl	8009548 <pow>
 8001318:	ec53 2b10 	vmov	r2, r3, d0
 800131c:	4610      	mov	r0, r2
 800131e:	4619      	mov	r1, r3
 8001320:	f7ff fc0e 	bl	8000b40 <__aeabi_d2f>
 8001324:	4603      	mov	r3, r0
 8001326:	ee00 3a90 	vmov	s1, r3
 800132a:	eeb0 0a68 	vmov.f32	s0, s17
 800132e:	f7ff fe7d 	bl	800102c <w>
 8001332:	eeb0 7a40 	vmov.f32	s14, s0
 8001336:	eef0 7a60 	vmov.f32	s15, s1
 800133a:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 800133e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8001342:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001346:	ee28 8a27 	vmul.f32	s16, s16, s15
 800134a:	2201      	movs	r2, #1
 800134c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800134e:	409a      	lsls	r2, r3
 8001350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001352:	4413      	add	r3, r2
 8001354:	4a56      	ldr	r2, [pc, #344]	; (80014b0 <fft+0x368>)
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	4413      	add	r3, r2
 800135a:	edd3 8a00 	vldr	s17, [r3]
 800135e:	2201      	movs	r2, #1
 8001360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001362:	409a      	lsls	r2, r3
 8001364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001366:	4413      	add	r3, r2
 8001368:	2101      	movs	r1, #1
 800136a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800136c:	fa01 f202 	lsl.w	r2, r1, r2
 8001370:	fb93 f1f2 	sdiv	r1, r3, r2
 8001374:	fb01 f202 	mul.w	r2, r1, r2
 8001378:	1a9b      	subs	r3, r3, r2
 800137a:	ee07 3a90 	vmov	s15, r3
 800137e:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 8001382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001384:	3301      	adds	r3, #1
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f878 	bl	800047c <__aeabi_i2d>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	ec43 2b11 	vmov	d1, r2, r3
 8001394:	ed9f 0b44 	vldr	d0, [pc, #272]	; 80014a8 <fft+0x360>
 8001398:	f008 f8d6 	bl	8009548 <pow>
 800139c:	ec53 2b10 	vmov	r2, r3, d0
 80013a0:	4610      	mov	r0, r2
 80013a2:	4619      	mov	r1, r3
 80013a4:	f7ff fbcc 	bl	8000b40 <__aeabi_d2f>
 80013a8:	4603      	mov	r3, r0
 80013aa:	ee00 3a90 	vmov	s1, r3
 80013ae:	eeb0 0a49 	vmov.f32	s0, s18
 80013b2:	f7ff fe3b 	bl	800102c <w>
 80013b6:	eeb0 7a40 	vmov.f32	s14, s0
 80013ba:	eef0 7a60 	vmov.f32	s15, s1
 80013be:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 80013c2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80013c6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80013ca:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80013ce:	ee78 7a27 	vadd.f32	s15, s16, s15
 80013d2:	edc7 7a04 	vstr	s15, [r7, #16]
				b[i + (1 << step)].re = b[i].re - pro.re;
 80013d6:	4a36      	ldr	r2, [pc, #216]	; (80014b0 <fft+0x368>)
 80013d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	4413      	add	r3, r2
 80013de:	ed93 7a00 	vldr	s14, [r3]
 80013e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80013e6:	2201      	movs	r2, #1
 80013e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013ea:	409a      	lsls	r2, r3
 80013ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ee:	4413      	add	r3, r2
 80013f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013f4:	4a2e      	ldr	r2, [pc, #184]	; (80014b0 <fft+0x368>)
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	4413      	add	r3, r2
 80013fa:	edc3 7a00 	vstr	s15, [r3]
				b[i + (1 << step)].im = b[i].im - pro.im;
 80013fe:	4a2c      	ldr	r2, [pc, #176]	; (80014b0 <fft+0x368>)
 8001400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	4413      	add	r3, r2
 8001406:	3304      	adds	r3, #4
 8001408:	ed93 7a00 	vldr	s14, [r3]
 800140c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001410:	2201      	movs	r2, #1
 8001412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001414:	409a      	lsls	r2, r3
 8001416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001418:	4413      	add	r3, r2
 800141a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800141e:	4a24      	ldr	r2, [pc, #144]	; (80014b0 <fft+0x368>)
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	4413      	add	r3, r2
 8001424:	3304      	adds	r3, #4
 8001426:	edc3 7a00 	vstr	s15, [r3]
				b[i].re += pro.re;
 800142a:	4a21      	ldr	r2, [pc, #132]	; (80014b0 <fft+0x368>)
 800142c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	4413      	add	r3, r2
 8001432:	ed93 7a00 	vldr	s14, [r3]
 8001436:	edd7 7a03 	vldr	s15, [r7, #12]
 800143a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800143e:	4a1c      	ldr	r2, [pc, #112]	; (80014b0 <fft+0x368>)
 8001440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	4413      	add	r3, r2
 8001446:	edc3 7a00 	vstr	s15, [r3]
				b[i].im += pro.im;
 800144a:	4a19      	ldr	r2, [pc, #100]	; (80014b0 <fft+0x368>)
 800144c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	4413      	add	r3, r2
 8001452:	3304      	adds	r3, #4
 8001454:	ed93 7a00 	vldr	s14, [r3]
 8001458:	edd7 7a04 	vldr	s15, [r7, #16]
 800145c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001460:	4a13      	ldr	r2, [pc, #76]	; (80014b0 <fft+0x368>)
 8001462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4413      	add	r3, r2
 8001468:	3304      	adds	r3, #4
 800146a:	edc3 7a00 	vstr	s15, [r3]
		for(int i = 0; i < length ; i ++)
 800146e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001470:	3301      	adds	r3, #1
 8001472:	637b      	str	r3, [r7, #52]	; 0x34
 8001474:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	429a      	cmp	r2, r3
 800147a:	f6ff ae91 	blt.w	80011a0 <fft+0x58>
	for (int step = 0 ; (1 << step) < length; step ++)
 800147e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001480:	3301      	adds	r3, #1
 8001482:	63bb      	str	r3, [r7, #56]	; 0x38
 8001484:	2201      	movs	r2, #1
 8001486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	429a      	cmp	r2, r3
 8001490:	f73f ae83 	bgt.w	800119a <fft+0x52>
			}
		}
	}
}
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	3740      	adds	r7, #64	; 0x40
 800149a:	46bd      	mov	sp, r7
 800149c:	ecbd 8b04 	vpop	{d8-d9}
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	f3af 8000 	nop.w
 80014a8:	00000000 	.word	0x00000000
 80014ac:	40000000 	.word	0x40000000
 80014b0:	2000191c 	.word	0x2000191c

080014b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014b8:	f002 f982 	bl	80037c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014bc:	f000 f85a 	bl	8001574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c0:	f000 fa34 	bl	800192c <MX_GPIO_Init>
  MX_DMA_Init();
 80014c4:	f000 fa12 	bl	80018ec <MX_DMA_Init>
  MX_I2S2_Init();
 80014c8:	f000 f8ea 	bl	80016a0 <MX_I2S2_Init>
  MX_I2C1_Init();
 80014cc:	f000 f8ba 	bl	8001644 <MX_I2C1_Init>
  MX_TIM5_Init();
 80014d0:	f000 f994 	bl	80017fc <MX_TIM5_Init>
  MX_USART1_UART_Init();
 80014d4:	f000 f9e0 	bl	8001898 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80014d8:	f000 f910 	bl	80016fc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  flags.recordTimer = 1;
 80014dc:	4b1f      	ldr	r3, [pc, #124]	; (800155c <main+0xa8>)
 80014de:	2201      	movs	r2, #1
 80014e0:	709a      	strb	r2, [r3, #2]
  flags.recordButton = 0;
 80014e2:	4b1e      	ldr	r3, [pc, #120]	; (800155c <main+0xa8>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	705a      	strb	r2, [r3, #1]
  flags.audioButton = 0;
 80014e8:	4b1c      	ldr	r3, [pc, #112]	; (800155c <main+0xa8>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]

  HAL_UART_Receive_IT(&huart1, (uint8_t *) rxData, 1);
 80014ee:	2201      	movs	r2, #1
 80014f0:	491b      	ldr	r1, [pc, #108]	; (8001560 <main+0xac>)
 80014f2:	481c      	ldr	r0, [pc, #112]	; (8001564 <main+0xb0>)
 80014f4:	f006 feed 	bl	80082d2 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80014f8:	2104      	movs	r1, #4
 80014fa:	481b      	ldr	r0, [pc, #108]	; (8001568 <main+0xb4>)
 80014fc:	f005 ff52 	bl	80073a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001500:	2108      	movs	r1, #8
 8001502:	4819      	ldr	r0, [pc, #100]	; (8001568 <main+0xb4>)
 8001504:	f005 ff4e 	bl	80073a4 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Clear FFT buffer index after each iteration
	  fftBufferIndex = 0;
 8001508:	4b18      	ldr	r3, [pc, #96]	; (800156c <main+0xb8>)
 800150a:	2200      	movs	r2, #0
 800150c:	801a      	strh	r2, [r3, #0]

	  if(flags.dataReceivedUART == 1) processDataUART();
 800150e:	4b13      	ldr	r3, [pc, #76]	; (800155c <main+0xa8>)
 8001510:	795b      	ldrb	r3, [r3, #5]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d101      	bne.n	800151a <main+0x66>
 8001516:	f001 fcfd 	bl	8002f14 <processDataUART>
	  if(flags.audioButton == 1) toggleAudioStream();
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <main+0xa8>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d101      	bne.n	8001526 <main+0x72>
 8001522:	f000 fae7 	bl	8001af4 <toggleAudioStream>
	  if(flags.recordButton == 1 && rxDataTemp[0] == START_VOICE_FFT) startRecordSequence();
 8001526:	4b0d      	ldr	r3, [pc, #52]	; (800155c <main+0xa8>)
 8001528:	785b      	ldrb	r3, [r3, #1]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d105      	bne.n	800153a <main+0x86>
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <main+0xbc>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b39      	cmp	r3, #57	; 0x39
 8001534:	d101      	bne.n	800153a <main+0x86>
 8001536:	f001 fb33 	bl	8002ba0 <startRecordSequence>
	  if(flags.dataReceived == 1) processData();
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <main+0xa8>)
 800153c:	78db      	ldrb	r3, [r3, #3]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d101      	bne.n	8001546 <main+0x92>
 8001542:	f000 fb29 	bl	8001b98 <processData>
	  if(flags.voiceControl == 1 && rxDataTemp[0] == START_VOICE_FFT) startVoiceRecognition();
 8001546:	4b05      	ldr	r3, [pc, #20]	; (800155c <main+0xa8>)
 8001548:	791b      	ldrb	r3, [r3, #4]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d1dc      	bne.n	8001508 <main+0x54>
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <main+0xbc>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b39      	cmp	r3, #57	; 0x39
 8001554:	d1d8      	bne.n	8001508 <main+0x54>
 8001556:	f001 fbf1 	bl	8002d3c <startVoiceRecognition>
	  fftBufferIndex = 0;
 800155a:	e7d5      	b.n	8001508 <main+0x54>
 800155c:	20000090 	.word	0x20000090
 8001560:	20001910 	.word	0x20001910
 8001564:	20000224 	.word	0x20000224
 8001568:	20000194 	.word	0x20000194
 800156c:	200015f4 	.word	0x200015f4
 8001570:	20001914 	.word	0x20001914

08001574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b094      	sub	sp, #80	; 0x50
 8001578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157a:	f107 0320 	add.w	r3, r7, #32
 800157e:	2230      	movs	r2, #48	; 0x30
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f007 fe68 	bl	8009258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001598:	2300      	movs	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	4b27      	ldr	r3, [pc, #156]	; (800163c <SystemClock_Config+0xc8>)
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	4a26      	ldr	r2, [pc, #152]	; (800163c <SystemClock_Config+0xc8>)
 80015a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a6:	6413      	str	r3, [r2, #64]	; 0x40
 80015a8:	4b24      	ldr	r3, [pc, #144]	; (800163c <SystemClock_Config+0xc8>)
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015b4:	2300      	movs	r3, #0
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	4b21      	ldr	r3, [pc, #132]	; (8001640 <SystemClock_Config+0xcc>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a20      	ldr	r2, [pc, #128]	; (8001640 <SystemClock_Config+0xcc>)
 80015be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	4b1e      	ldr	r3, [pc, #120]	; (8001640 <SystemClock_Config+0xcc>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015d0:	2302      	movs	r3, #2
 80015d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015d4:	2301      	movs	r3, #1
 80015d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015d8:	2310      	movs	r3, #16
 80015da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015dc:	2302      	movs	r3, #2
 80015de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015e0:	2300      	movs	r3, #0
 80015e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015e4:	2308      	movs	r3, #8
 80015e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80015e8:	2360      	movs	r3, #96	; 0x60
 80015ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015ec:	2302      	movs	r3, #2
 80015ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015f0:	2304      	movs	r3, #4
 80015f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015f4:	f107 0320 	add.w	r3, r7, #32
 80015f8:	4618      	mov	r0, r3
 80015fa:	f004 ffb1 	bl	8006560 <HAL_RCC_OscConfig>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001604:	f001 fe62 	bl	80032cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001608:	230f      	movs	r3, #15
 800160a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800160c:	2302      	movs	r3, #2
 800160e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001618:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800161e:	f107 030c 	add.w	r3, r7, #12
 8001622:	2103      	movs	r1, #3
 8001624:	4618      	mov	r0, r3
 8001626:	f005 fa13 	bl	8006a50 <HAL_RCC_ClockConfig>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001630:	f001 fe4c 	bl	80032cc <Error_Handler>
  }
}
 8001634:	bf00      	nop
 8001636:	3750      	adds	r7, #80	; 0x50
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40023800 	.word	0x40023800
 8001640:	40007000 	.word	0x40007000

08001644 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <MX_I2C1_Init+0x50>)
 800164a:	4a13      	ldr	r2, [pc, #76]	; (8001698 <MX_I2C1_Init+0x54>)
 800164c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <MX_I2C1_Init+0x50>)
 8001650:	4a12      	ldr	r2, [pc, #72]	; (800169c <MX_I2C1_Init+0x58>)
 8001652:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001654:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <MX_I2C1_Init+0x50>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <MX_I2C1_Init+0x50>)
 800165c:	2200      	movs	r2, #0
 800165e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <MX_I2C1_Init+0x50>)
 8001662:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001666:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001668:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <MX_I2C1_Init+0x50>)
 800166a:	2200      	movs	r2, #0
 800166c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <MX_I2C1_Init+0x50>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001674:	4b07      	ldr	r3, [pc, #28]	; (8001694 <MX_I2C1_Init+0x50>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <MX_I2C1_Init+0x50>)
 800167c:	2200      	movs	r2, #0
 800167e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001680:	4804      	ldr	r0, [pc, #16]	; (8001694 <MX_I2C1_Init+0x50>)
 8001682:	f002 ffe5 	bl	8004650 <HAL_I2C_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800168c:	f001 fe1e 	bl	80032cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000098 	.word	0x20000098
 8001698:	40005400 	.word	0x40005400
 800169c:	000186a0 	.word	0x000186a0

080016a0 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80016a4:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <MX_I2S2_Init+0x54>)
 80016a6:	4a14      	ldr	r2, [pc, #80]	; (80016f8 <MX_I2S2_Init+0x58>)
 80016a8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80016aa:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <MX_I2S2_Init+0x54>)
 80016ac:	f44f 7240 	mov.w	r2, #768	; 0x300
 80016b0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80016b2:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <MX_I2S2_Init+0x54>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80016b8:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <MX_I2S2_Init+0x54>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80016be:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <MX_I2S2_Init+0x54>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <MX_I2S2_Init+0x54>)
 80016c6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80016ca:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80016cc:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <MX_I2S2_Init+0x54>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80016d2:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <MX_I2S2_Init+0x54>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <MX_I2S2_Init+0x54>)
 80016da:	2200      	movs	r2, #0
 80016dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80016de:	4805      	ldr	r0, [pc, #20]	; (80016f4 <MX_I2S2_Init+0x54>)
 80016e0:	f003 ff76 	bl	80055d0 <HAL_I2S_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80016ea:	f001 fdef 	bl	80032cc <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200000ec 	.word	0x200000ec
 80016f8:	40003800 	.word	0x40003800

080016fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08e      	sub	sp, #56	; 0x38
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001702:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001710:	f107 0320 	add.w	r3, r7, #32
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
 8001728:	615a      	str	r2, [r3, #20]
 800172a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800172c:	4b31      	ldr	r3, [pc, #196]	; (80017f4 <MX_TIM3_Init+0xf8>)
 800172e:	4a32      	ldr	r2, [pc, #200]	; (80017f8 <MX_TIM3_Init+0xfc>)
 8001730:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001732:	4b30      	ldr	r3, [pc, #192]	; (80017f4 <MX_TIM3_Init+0xf8>)
 8001734:	2200      	movs	r2, #0
 8001736:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001738:	4b2e      	ldr	r3, [pc, #184]	; (80017f4 <MX_TIM3_Init+0xf8>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 800173e:	4b2d      	ldr	r3, [pc, #180]	; (80017f4 <MX_TIM3_Init+0xf8>)
 8001740:	22ff      	movs	r2, #255	; 0xff
 8001742:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001744:	4b2b      	ldr	r3, [pc, #172]	; (80017f4 <MX_TIM3_Init+0xf8>)
 8001746:	2200      	movs	r2, #0
 8001748:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174a:	4b2a      	ldr	r3, [pc, #168]	; (80017f4 <MX_TIM3_Init+0xf8>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001750:	4828      	ldr	r0, [pc, #160]	; (80017f4 <MX_TIM3_Init+0xf8>)
 8001752:	f005 fced 	bl	8007130 <HAL_TIM_Base_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800175c:	f001 fdb6 	bl	80032cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001764:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001766:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800176a:	4619      	mov	r1, r3
 800176c:	4821      	ldr	r0, [pc, #132]	; (80017f4 <MX_TIM3_Init+0xf8>)
 800176e:	f006 f893 	bl	8007898 <HAL_TIM_ConfigClockSource>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001778:	f001 fda8 	bl	80032cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800177c:	481d      	ldr	r0, [pc, #116]	; (80017f4 <MX_TIM3_Init+0xf8>)
 800177e:	f005 fdb8 	bl	80072f2 <HAL_TIM_PWM_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001788:	f001 fda0 	bl	80032cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800178c:	2300      	movs	r3, #0
 800178e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001794:	f107 0320 	add.w	r3, r7, #32
 8001798:	4619      	mov	r1, r3
 800179a:	4816      	ldr	r0, [pc, #88]	; (80017f4 <MX_TIM3_Init+0xf8>)
 800179c:	f006 fc38 	bl	8008010 <HAL_TIMEx_MasterConfigSynchronization>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80017a6:	f001 fd91 	bl	80032cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017aa:	2360      	movs	r3, #96	; 0x60
 80017ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	2204      	movs	r2, #4
 80017be:	4619      	mov	r1, r3
 80017c0:	480c      	ldr	r0, [pc, #48]	; (80017f4 <MX_TIM3_Init+0xf8>)
 80017c2:	f005 ffa7 	bl	8007714 <HAL_TIM_PWM_ConfigChannel>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80017cc:	f001 fd7e 	bl	80032cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	2208      	movs	r2, #8
 80017d4:	4619      	mov	r1, r3
 80017d6:	4807      	ldr	r0, [pc, #28]	; (80017f4 <MX_TIM3_Init+0xf8>)
 80017d8:	f005 ff9c 	bl	8007714 <HAL_TIM_PWM_ConfigChannel>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 80017e2:	f001 fd73 	bl	80032cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017e6:	4803      	ldr	r0, [pc, #12]	; (80017f4 <MX_TIM3_Init+0xf8>)
 80017e8:	f001 febc 	bl	8003564 <HAL_TIM_MspPostInit>

}
 80017ec:	bf00      	nop
 80017ee:	3738      	adds	r7, #56	; 0x38
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000194 	.word	0x20000194
 80017f8:	40000400 	.word	0x40000400

080017fc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001802:	f107 0308 	add.w	r3, r7, #8
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001810:	463b      	mov	r3, r7
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001818:	4b1c      	ldr	r3, [pc, #112]	; (800188c <MX_TIM5_Init+0x90>)
 800181a:	4a1d      	ldr	r2, [pc, #116]	; (8001890 <MX_TIM5_Init+0x94>)
 800181c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 95;
 800181e:	4b1b      	ldr	r3, [pc, #108]	; (800188c <MX_TIM5_Init+0x90>)
 8001820:	225f      	movs	r2, #95	; 0x5f
 8001822:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001824:	4b19      	ldr	r3, [pc, #100]	; (800188c <MX_TIM5_Init+0x90>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19999999;
 800182a:	4b18      	ldr	r3, [pc, #96]	; (800188c <MX_TIM5_Init+0x90>)
 800182c:	4a19      	ldr	r2, [pc, #100]	; (8001894 <MX_TIM5_Init+0x98>)
 800182e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001830:	4b16      	ldr	r3, [pc, #88]	; (800188c <MX_TIM5_Init+0x90>)
 8001832:	2200      	movs	r2, #0
 8001834:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <MX_TIM5_Init+0x90>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800183c:	4813      	ldr	r0, [pc, #76]	; (800188c <MX_TIM5_Init+0x90>)
 800183e:	f005 fc77 	bl	8007130 <HAL_TIM_Base_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8001848:	f001 fd40 	bl	80032cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800184c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001850:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001852:	f107 0308 	add.w	r3, r7, #8
 8001856:	4619      	mov	r1, r3
 8001858:	480c      	ldr	r0, [pc, #48]	; (800188c <MX_TIM5_Init+0x90>)
 800185a:	f006 f81d 	bl	8007898 <HAL_TIM_ConfigClockSource>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8001864:	f001 fd32 	bl	80032cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001868:	2300      	movs	r3, #0
 800186a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186c:	2300      	movs	r3, #0
 800186e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001870:	463b      	mov	r3, r7
 8001872:	4619      	mov	r1, r3
 8001874:	4805      	ldr	r0, [pc, #20]	; (800188c <MX_TIM5_Init+0x90>)
 8001876:	f006 fbcb 	bl	8008010 <HAL_TIMEx_MasterConfigSynchronization>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 8001880:	f001 fd24 	bl	80032cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001884:	bf00      	nop
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	200001dc 	.word	0x200001dc
 8001890:	40000c00 	.word	0x40000c00
 8001894:	01312cff 	.word	0x01312cff

08001898 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 800189e:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <MX_USART1_UART_Init+0x50>)
 80018a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018b6:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018be:	220c      	movs	r2, #12
 80018c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c2:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018ce:	4805      	ldr	r0, [pc, #20]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018d0:	f006 fc20 	bl	8008114 <HAL_UART_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018da:	f001 fcf7 	bl	80032cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000224 	.word	0x20000224
 80018e8:	40011000 	.word	0x40011000

080018ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <MX_DMA_Init+0x3c>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a0b      	ldr	r2, [pc, #44]	; (8001928 <MX_DMA_Init+0x3c>)
 80018fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <MX_DMA_Init+0x3c>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	2100      	movs	r1, #0
 8001912:	200e      	movs	r0, #14
 8001914:	f002 f8c5 	bl	8003aa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001918:	200e      	movs	r0, #14
 800191a:	f002 f8de 	bl	8003ada <HAL_NVIC_EnableIRQ>

}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40023800 	.word	0x40023800

0800192c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	; 0x28
 8001930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	60da      	str	r2, [r3, #12]
 8001940:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	4b38      	ldr	r3, [pc, #224]	; (8001a28 <MX_GPIO_Init+0xfc>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a37      	ldr	r2, [pc, #220]	; (8001a28 <MX_GPIO_Init+0xfc>)
 800194c:	f043 0304 	orr.w	r3, r3, #4
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b35      	ldr	r3, [pc, #212]	; (8001a28 <MX_GPIO_Init+0xfc>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b31      	ldr	r3, [pc, #196]	; (8001a28 <MX_GPIO_Init+0xfc>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a30      	ldr	r2, [pc, #192]	; (8001a28 <MX_GPIO_Init+0xfc>)
 8001968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b2e      	ldr	r3, [pc, #184]	; (8001a28 <MX_GPIO_Init+0xfc>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	4b2a      	ldr	r3, [pc, #168]	; (8001a28 <MX_GPIO_Init+0xfc>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a29      	ldr	r2, [pc, #164]	; (8001a28 <MX_GPIO_Init+0xfc>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b27      	ldr	r3, [pc, #156]	; (8001a28 <MX_GPIO_Init+0xfc>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	4b23      	ldr	r3, [pc, #140]	; (8001a28 <MX_GPIO_Init+0xfc>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a22      	ldr	r2, [pc, #136]	; (8001a28 <MX_GPIO_Init+0xfc>)
 80019a0:	f043 0302 	orr.w	r3, r3, #2
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b20      	ldr	r3, [pc, #128]	; (8001a28 <MX_GPIO_Init+0xfc>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, INT_STATE_Pin|RECORD_STATE_Pin|LED_MIC_STATE_Pin, GPIO_PIN_RESET);
 80019b2:	2200      	movs	r2, #0
 80019b4:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80019b8:	481c      	ldr	r0, [pc, #112]	; (8001a2c <MX_GPIO_Init+0x100>)
 80019ba:	f002 fe2f 	bl	800461c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CAR_DIR_1_Pin|CAR_DIR_2_Pin|CAR_DIR_3_Pin|CAR_DIR_4_Pin, GPIO_PIN_RESET);
 80019be:	2200      	movs	r2, #0
 80019c0:	2178      	movs	r1, #120	; 0x78
 80019c2:	481b      	ldr	r0, [pc, #108]	; (8001a30 <MX_GPIO_Init+0x104>)
 80019c4:	f002 fe2a 	bl	800461c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INT_STATE_Pin */
  GPIO_InitStruct.Pin = INT_STATE_Pin;
 80019c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ce:	2301      	movs	r3, #1
 80019d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d6:	2300      	movs	r3, #0
 80019d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INT_STATE_GPIO_Port, &GPIO_InitStruct);
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	4619      	mov	r1, r3
 80019e0:	4812      	ldr	r0, [pc, #72]	; (8001a2c <MX_GPIO_Init+0x100>)
 80019e2:	f002 fc97 	bl	8004314 <HAL_GPIO_Init>

  /*Configure GPIO pins : RECORD_STATE_Pin LED_MIC_STATE_Pin */
  GPIO_InitStruct.Pin = RECORD_STATE_Pin|LED_MIC_STATE_Pin;
 80019e6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80019ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ec:	2301      	movs	r3, #1
 80019ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019f0:	2302      	movs	r3, #2
 80019f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f4:	2300      	movs	r3, #0
 80019f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	4619      	mov	r1, r3
 80019fe:	480b      	ldr	r0, [pc, #44]	; (8001a2c <MX_GPIO_Init+0x100>)
 8001a00:	f002 fc88 	bl	8004314 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAR_DIR_1_Pin CAR_DIR_2_Pin CAR_DIR_3_Pin CAR_DIR_4_Pin */
  GPIO_InitStruct.Pin = CAR_DIR_1_Pin|CAR_DIR_2_Pin|CAR_DIR_3_Pin|CAR_DIR_4_Pin;
 8001a04:	2378      	movs	r3, #120	; 0x78
 8001a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a10:	2300      	movs	r3, #0
 8001a12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4805      	ldr	r0, [pc, #20]	; (8001a30 <MX_GPIO_Init+0x104>)
 8001a1c:	f002 fc7a 	bl	8004314 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a20:	bf00      	nop
 8001a22:	3728      	adds	r7, #40	; 0x28
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40020800 	.word	0x40020800
 8001a30:	40020000 	.word	0x40020000

08001a34 <HAL_I2S_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	// Set pointer points to the memory of the first index of receiveBuffer
	// Set dataReceived flag
	rxBufferPtr = &receiveBuffer[0];
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_I2S_RxHalfCpltCallback+0x20>)
 8001a3e:	4a06      	ldr	r2, [pc, #24]	; (8001a58 <HAL_I2S_RxHalfCpltCallback+0x24>)
 8001a40:	601a      	str	r2, [r3, #0]
	flags.dataReceived = 1;
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_I2S_RxHalfCpltCallback+0x28>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	70da      	strb	r2, [r3, #3]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	20000df0 	.word	0x20000df0
 8001a58:	200005f0 	.word	0x200005f0
 8001a5c:	20000090 	.word	0x20000090

08001a60 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	// Set pointer points to the memory of half the length of receiveBuffer
	// Set dataReceived flag
	rxBufferPtr = &receiveBuffer[BUFFER_SIZE / 2];
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <HAL_I2S_RxCpltCallback+0x20>)
 8001a6a:	4a06      	ldr	r2, [pc, #24]	; (8001a84 <HAL_I2S_RxCpltCallback+0x24>)
 8001a6c:	601a      	str	r2, [r3, #0]
	flags.dataReceived = 1;
 8001a6e:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_I2S_RxCpltCallback+0x28>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	70da      	strb	r2, [r3, #3]
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	20000df0 	.word	0x20000df0
 8001a84:	200009f0 	.word	0x200009f0
 8001a88:	20000090 	.word	0x20000090

08001a8c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM5) {
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a09      	ldr	r2, [pc, #36]	; (8001ac0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d10a      	bne.n	8001ab4 <HAL_TIM_PeriodElapsedCallback+0x28>
		if(flags.recordTimer == 0) flags.recordTimer = 1;
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001aa0:	789b      	ldrb	r3, [r3, #2]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d103      	bne.n	8001aae <HAL_TIM_PeriodElapsedCallback+0x22>
 8001aa6:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	709a      	strb	r2, [r3, #2]
		else flags.recordTimer = 0;
	}
}
 8001aac:	e002      	b.n	8001ab4 <HAL_TIM_PeriodElapsedCallback+0x28>
		else flags.recordTimer = 0;
 8001aae:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	709a      	strb	r2, [r3, #2]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	40000c00 	.word	0x40000c00
 8001ac4:	20000090 	.word	0x20000090

08001ac8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1) flags.dataReceivedUART = 1;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a05      	ldr	r2, [pc, #20]	; (8001aec <HAL_UART_RxCpltCallback+0x24>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d102      	bne.n	8001ae0 <HAL_UART_RxCpltCallback+0x18>
 8001ada:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <HAL_UART_RxCpltCallback+0x28>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	715a      	strb	r2, [r3, #5]
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	40011000 	.word	0x40011000
 8001af0:	20000090 	.word	0x20000090

08001af4 <toggleAudioStream>:

void toggleAudioStream()
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
	// Check for I2S state to turn on/off
	stateI2S = HAL_I2S_GetState(&hi2s2);
 8001af8:	4820      	ldr	r0, [pc, #128]	; (8001b7c <toggleAudioStream+0x88>)
 8001afa:	f004 f953 	bl	8005da4 <HAL_I2S_GetState>
 8001afe:	4603      	mov	r3, r0
 8001b00:	461a      	mov	r2, r3
 8001b02:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <toggleAudioStream+0x8c>)
 8001b04:	601a      	str	r2, [r3, #0]
	if(stateI2S > HAL_I2S_STATE_READY){
 8001b06:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <toggleAudioStream+0x8c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	dd0c      	ble.n	8001b28 <toggleAudioStream+0x34>
		// Stops the audio DMA Stream/Channel playing from the Media
		HAL_I2S_DMAStop(&hi2s2);
 8001b0e:	481b      	ldr	r0, [pc, #108]	; (8001b7c <toggleAudioStream+0x88>)
 8001b10:	f003 ff5a 	bl	80059c8 <HAL_I2S_DMAStop>
		// Clear LED state
		HAL_GPIO_WritePin(LED_MIC_STATE_GPIO_Port, LED_MIC_STATE_Pin, GPIO_PIN_RESET);
 8001b14:	2200      	movs	r2, #0
 8001b16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b1a:	481a      	ldr	r0, [pc, #104]	; (8001b84 <toggleAudioStream+0x90>)
 8001b1c:	f002 fd7e 	bl	800461c <HAL_GPIO_WritePin>
		// Clear callback flag
		flags.dataReceived = 0;
 8001b20:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <toggleAudioStream+0x94>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	70da      	strb	r2, [r3, #3]
 8001b26:	e024      	b.n	8001b72 <toggleAudioStream+0x7e>
	} else if(rxDataTemp[0] == START_VOICE_FFT_DCT) {
 8001b28:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <toggleAudioStream+0x98>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b3a      	cmp	r3, #58	; 0x3a
 8001b2e:	d10c      	bne.n	8001b4a <toggleAudioStream+0x56>
		// Enable I2S Receive DMA
		HAL_I2S_Receive_DMA(&hi2s2, (uint16_t *) receiveBuffer, BUFFER_SIZE);
 8001b30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b34:	4916      	ldr	r1, [pc, #88]	; (8001b90 <toggleAudioStream+0x9c>)
 8001b36:	4811      	ldr	r0, [pc, #68]	; (8001b7c <toggleAudioStream+0x88>)
 8001b38:	f003 fe8a 	bl	8005850 <HAL_I2S_Receive_DMA>

		// Set LED state
		HAL_GPIO_WritePin(LED_MIC_STATE_GPIO_Port, LED_MIC_STATE_Pin, GPIO_PIN_SET);
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b42:	4810      	ldr	r0, [pc, #64]	; (8001b84 <toggleAudioStream+0x90>)
 8001b44:	f002 fd6a 	bl	800461c <HAL_GPIO_WritePin>
 8001b48:	e013      	b.n	8001b72 <toggleAudioStream+0x7e>
	} else if(rxDataTemp[0] == START_VOICE_FFT){
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <toggleAudioStream+0x98>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b39      	cmp	r3, #57	; 0x39
 8001b50:	d10f      	bne.n	8001b72 <toggleAudioStream+0x7e>
		recordsCount = 0;
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <toggleAudioStream+0xa0>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]
		flags.recordButton = 1;
 8001b58:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <toggleAudioStream+0x94>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	705a      	strb	r2, [r3, #1]

		enableRecordAudio();
 8001b5e:	f000 fef5 	bl	800294c <enableRecordAudio>
		startRecordAudio();
 8001b62:	f000 fefd 	bl	8002960 <startRecordAudio>

		flags.recordButton = 0;
 8001b66:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <toggleAudioStream+0x94>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	705a      	strb	r2, [r3, #1]
		flags.voiceControl = 1;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <toggleAudioStream+0x94>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	711a      	strb	r2, [r3, #4]
	}
	// Clear audioButton flag
	flags.audioButton = 0;
 8001b72:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <toggleAudioStream+0x94>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	200000ec 	.word	0x200000ec
 8001b80:	2000291c 	.word	0x2000291c
 8001b84:	40020800 	.word	0x40020800
 8001b88:	20000090 	.word	0x20000090
 8001b8c:	20001914 	.word	0x20001914
 8001b90:	200005f0 	.word	0x200005f0
 8001b94:	20001915 	.word	0x20001915

08001b98 <processData>:

void processData()
{
 8001b98:	b590      	push	{r4, r7, lr}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
	// Loop through receiveBuffer, only get the left channel in buffer array
	// which is EVEN index and place the result in fftBufferIn
	for(uint16_t i = 0; i < BUFFER_SIZE; i += 2){
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	80fb      	strh	r3, [r7, #6]
 8001ba2:	e025      	b.n	8001bf0 <processData+0x58>
		// Transform uint16_t to float by dividing 65536.0
		fftBufferIn[fftBufferIndex] = (1.0 / 65536.0) * rxBufferPtr[i];
 8001ba4:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <processData+0x90>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	88fb      	ldrh	r3, [r7, #6]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	4413      	add	r3, r2
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe fc62 	bl	800047c <__aeabi_i2d>
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <processData+0x94>)
 8001bbe:	f7fe fcc7 	bl	8000550 <__aeabi_dmul>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	491a      	ldr	r1, [pc, #104]	; (8001c30 <processData+0x98>)
 8001bc8:	8809      	ldrh	r1, [r1, #0]
 8001bca:	460c      	mov	r4, r1
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f7fe ffb6 	bl	8000b40 <__aeabi_d2f>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	4917      	ldr	r1, [pc, #92]	; (8001c34 <processData+0x9c>)
 8001bd8:	00a3      	lsls	r3, r4, #2
 8001bda:	440b      	add	r3, r1
 8001bdc:	601a      	str	r2, [r3, #0]
		// Increment fftBufferIndex
		fftBufferIndex++;
 8001bde:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <processData+0x98>)
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	3301      	adds	r3, #1
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <processData+0x98>)
 8001be8:	801a      	strh	r2, [r3, #0]
	for(uint16_t i = 0; i < BUFFER_SIZE; i += 2){
 8001bea:	88fb      	ldrh	r3, [r7, #6]
 8001bec:	3302      	adds	r3, #2
 8001bee:	80fb      	strh	r3, [r7, #6]
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf6:	d3d5      	bcc.n	8001ba4 <processData+0xc>
	}
	// FFT processing
	fftTransform();
 8001bf8:	f000 f824 	bl	8001c44 <fftTransform>

	// Mel bank filter, param : max_freq and filter quantities
	if(rxDataTemp[0] == START_VOICE_FFT_DCT){
 8001bfc:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <processData+0xa0>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b3a      	cmp	r3, #58	; 0x3a
 8001c02:	d109      	bne.n	8001c18 <processData+0x80>
		MEL_BANK_FILTER(4000, nfilter);
 8001c04:	2328      	movs	r3, #40	; 0x28
 8001c06:	4618      	mov	r0, r3
 8001c08:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001c3c <processData+0xa4>
 8001c0c:	f7ff f96c 	bl	8000ee8 <MEL_BANK_FILTER>

		// DCT processing
		dctTransform();
 8001c10:	f000 f8d6 	bl	8001dc0 <dctTransform>

		// Calc DCT energy
		calcDctEnergy();
 8001c14:	f000 facc 	bl	80021b0 <calcDctEnergy>
	}

	flags.dataReceived = 0;
 8001c18:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <processData+0xa8>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	70da      	strb	r2, [r3, #3]
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd90      	pop	{r4, r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000df0 	.word	0x20000df0
 8001c2c:	3ef00000 	.word	0x3ef00000
 8001c30:	200015f4 	.word	0x200015f4
 8001c34:	20000df4 	.word	0x20000df4
 8001c38:	20001914 	.word	0x20001914
 8001c3c:	457a0000 	.word	0x457a0000
 8001c40:	20000090 	.word	0x20000090

08001c44 <fftTransform>:

void fftTransform()
{
 8001c44:	b590      	push	{r4, r7, lr}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
	// Transform real FFT, 0 means time domain to frequency domain
	// Return array contains real ([i]) and complex ([i + 1]) number
	//	arm_rfft_fast_f32(&fft_handler, (float32_t *) fftBufferIn, (float32_t *) fftBufferOut, 0);
	fft(fftBufferIn, FFT_LENGTH);
 8001c4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c4e:	4854      	ldr	r0, [pc, #336]	; (8001da0 <fftTransform+0x15c>)
 8001c50:	f7ff fa7a 	bl	8001148 <fft>
	// Store the result in freqs array
	// Formula to check which index (index of freqs[]) correspond to a certain frequency:
	// INDEX = FREQ * (FFT_LENGTH / 4) / (F_SAMPLE / 2)
	// EX: 12 = 3000 * (64 / 2) / (16000 / 2);

	if(rxDataTemp[0] == START_VOICE_FFT_DCT){
 8001c54:	4b53      	ldr	r3, [pc, #332]	; (8001da4 <fftTransform+0x160>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b3a      	cmp	r3, #58	; 0x3a
 8001c5a:	d12f      	bne.n	8001cbc <fftTransform+0x78>
		for(uint16_t i = 0; i < FFT_LENGTH / 4; i++){
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	81fb      	strh	r3, [r7, #14]
 8001c60:	e028      	b.n	8001cb4 <fftTransform+0x70>
			freqs[i] = b[i].re * b[i].re + b[i].im * b[i].im;
 8001c62:	89fb      	ldrh	r3, [r7, #14]
 8001c64:	4a50      	ldr	r2, [pc, #320]	; (8001da8 <fftTransform+0x164>)
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	4413      	add	r3, r2
 8001c6a:	ed93 7a00 	vldr	s14, [r3]
 8001c6e:	89fb      	ldrh	r3, [r7, #14]
 8001c70:	4a4d      	ldr	r2, [pc, #308]	; (8001da8 <fftTransform+0x164>)
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4413      	add	r3, r2
 8001c76:	edd3 7a00 	vldr	s15, [r3]
 8001c7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c7e:	89fb      	ldrh	r3, [r7, #14]
 8001c80:	4a49      	ldr	r2, [pc, #292]	; (8001da8 <fftTransform+0x164>)
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4413      	add	r3, r2
 8001c86:	3304      	adds	r3, #4
 8001c88:	edd3 6a00 	vldr	s13, [r3]
 8001c8c:	89fb      	ldrh	r3, [r7, #14]
 8001c8e:	4a46      	ldr	r2, [pc, #280]	; (8001da8 <fftTransform+0x164>)
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	4413      	add	r3, r2
 8001c94:	3304      	adds	r3, #4
 8001c96:	edd3 7a00 	vldr	s15, [r3]
 8001c9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c9e:	89fb      	ldrh	r3, [r7, #14]
 8001ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca4:	4a41      	ldr	r2, [pc, #260]	; (8001dac <fftTransform+0x168>)
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	edc3 7a00 	vstr	s15, [r3]
		for(uint16_t i = 0; i < FFT_LENGTH / 4; i++){
 8001cae:	89fb      	ldrh	r3, [r7, #14]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	81fb      	strh	r3, [r7, #14]
 8001cb4:	89fb      	ldrh	r3, [r7, #14]
 8001cb6:	2b7f      	cmp	r3, #127	; 0x7f
 8001cb8:	d9d3      	bls.n	8001c62 <fftTransform+0x1e>
			freqs[i] = b[i].re * b[i].re + b[i].im * b[i].im;
			freqs[i] = floor(freqs[i] / FFT_LENGTH);
			if(flags.recordButton == 1 && flags.recordTimer == 1) storedFreqs[recordsCount][i] = (uint8_t) freqs[i];
		}
	}
}
 8001cba:	e06c      	b.n	8001d96 <fftTransform+0x152>
		for(uint16_t i = 0; i < FFT_LENGTH / 4; i++){
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	81bb      	strh	r3, [r7, #12]
 8001cc0:	e066      	b.n	8001d90 <fftTransform+0x14c>
			freqs[i] = b[i].re * b[i].re + b[i].im * b[i].im;
 8001cc2:	89bb      	ldrh	r3, [r7, #12]
 8001cc4:	4a38      	ldr	r2, [pc, #224]	; (8001da8 <fftTransform+0x164>)
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	4413      	add	r3, r2
 8001cca:	ed93 7a00 	vldr	s14, [r3]
 8001cce:	89bb      	ldrh	r3, [r7, #12]
 8001cd0:	4a35      	ldr	r2, [pc, #212]	; (8001da8 <fftTransform+0x164>)
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	edd3 7a00 	vldr	s15, [r3]
 8001cda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cde:	89bb      	ldrh	r3, [r7, #12]
 8001ce0:	4a31      	ldr	r2, [pc, #196]	; (8001da8 <fftTransform+0x164>)
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3304      	adds	r3, #4
 8001ce8:	edd3 6a00 	vldr	s13, [r3]
 8001cec:	89bb      	ldrh	r3, [r7, #12]
 8001cee:	4a2e      	ldr	r2, [pc, #184]	; (8001da8 <fftTransform+0x164>)
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	4413      	add	r3, r2
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	edd3 7a00 	vldr	s15, [r3]
 8001cfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cfe:	89bb      	ldrh	r3, [r7, #12]
 8001d00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d04:	4a29      	ldr	r2, [pc, #164]	; (8001dac <fftTransform+0x168>)
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	edc3 7a00 	vstr	s15, [r3]
			freqs[i] = floor(freqs[i] / FFT_LENGTH);
 8001d0e:	89bb      	ldrh	r3, [r7, #12]
 8001d10:	4a26      	ldr	r2, [pc, #152]	; (8001dac <fftTransform+0x168>)
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	edd3 7a00 	vldr	s15, [r3]
 8001d1a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001db0 <fftTransform+0x16c>
 8001d1e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001d22:	ee16 0a90 	vmov	r0, s13
 8001d26:	f7fe fbbb 	bl	80004a0 <__aeabi_f2d>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	ec43 2b10 	vmov	d0, r2, r3
 8001d32:	f007 faed 	bl	8009310 <floor>
 8001d36:	ec53 2b10 	vmov	r2, r3, d0
 8001d3a:	89bc      	ldrh	r4, [r7, #12]
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f7fe fefe 	bl	8000b40 <__aeabi_d2f>
 8001d44:	4602      	mov	r2, r0
 8001d46:	4919      	ldr	r1, [pc, #100]	; (8001dac <fftTransform+0x168>)
 8001d48:	00a3      	lsls	r3, r4, #2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	601a      	str	r2, [r3, #0]
			if(flags.recordButton == 1 && flags.recordTimer == 1) storedFreqs[recordsCount][i] = (uint8_t) freqs[i];
 8001d4e:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <fftTransform+0x170>)
 8001d50:	785b      	ldrb	r3, [r3, #1]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d119      	bne.n	8001d8a <fftTransform+0x146>
 8001d56:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <fftTransform+0x170>)
 8001d58:	789b      	ldrb	r3, [r3, #2]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d115      	bne.n	8001d8a <fftTransform+0x146>
 8001d5e:	89bb      	ldrh	r3, [r7, #12]
 8001d60:	4a12      	ldr	r2, [pc, #72]	; (8001dac <fftTransform+0x168>)
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	edd3 7a00 	vldr	s15, [r3]
 8001d6a:	4b13      	ldr	r3, [pc, #76]	; (8001db8 <fftTransform+0x174>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	89bb      	ldrh	r3, [r7, #12]
 8001d72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d76:	edc7 7a01 	vstr	s15, [r7, #4]
 8001d7a:	7939      	ldrb	r1, [r7, #4]
 8001d7c:	b2c8      	uxtb	r0, r1
 8001d7e:	490f      	ldr	r1, [pc, #60]	; (8001dbc <fftTransform+0x178>)
 8001d80:	01d2      	lsls	r2, r2, #7
 8001d82:	440a      	add	r2, r1
 8001d84:	4413      	add	r3, r2
 8001d86:	4602      	mov	r2, r0
 8001d88:	701a      	strb	r2, [r3, #0]
		for(uint16_t i = 0; i < FFT_LENGTH / 4; i++){
 8001d8a:	89bb      	ldrh	r3, [r7, #12]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	81bb      	strh	r3, [r7, #12]
 8001d90:	89bb      	ldrh	r3, [r7, #12]
 8001d92:	2b7f      	cmp	r3, #127	; 0x7f
 8001d94:	d995      	bls.n	8001cc2 <fftTransform+0x7e>
}
 8001d96:	bf00      	nop
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd90      	pop	{r4, r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000df4 	.word	0x20000df4
 8001da4:	20001914 	.word	0x20001914
 8001da8:	2000191c 	.word	0x2000191c
 8001dac:	200015f8 	.word	0x200015f8
 8001db0:	44000000 	.word	0x44000000
 8001db4:	20000090 	.word	0x20000090
 8001db8:	20001915 	.word	0x20001915
 8001dbc:	200017f8 	.word	0x200017f8

08001dc0 <dctTransform>:

void dctTransform(){
 8001dc0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001dc4:	ed2d 8b02 	vpush	{d8}
 8001dc8:	b088      	sub	sp, #32
 8001dca:	af00      	add	r7, sp, #0

	for(int m = 1; m <=  nfilter ;m++)
 8001dcc:	2301      	movs	r3, #1
 8001dce:	61fb      	str	r3, [r7, #28]
 8001dd0:	e145      	b.n	800205e <dctTransform+0x29e>
	{
		float f_m_tru = FREQ_MEL[m - 1];
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	4ab9      	ldr	r2, [pc, #740]	; (80020bc <dctTransform+0x2fc>)
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	60bb      	str	r3, [r7, #8]
		float f_m = FREQ_MEL[m];
 8001de0:	4ab6      	ldr	r2, [pc, #728]	; (80020bc <dctTransform+0x2fc>)
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	607b      	str	r3, [r7, #4]
		float f_m_cong = FREQ_MEL[m + 1];
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	3301      	adds	r3, #1
 8001df0:	4ab2      	ldr	r2, [pc, #712]	; (80020bc <dctTransform+0x2fc>)
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	603b      	str	r3, [r7, #0]
		int Start_num = f_m_tru / 31.25;
 8001dfa:	68b8      	ldr	r0, [r7, #8]
 8001dfc:	f7fe fb50 	bl	80004a0 <__aeabi_f2d>
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	4bae      	ldr	r3, [pc, #696]	; (80020c0 <dctTransform+0x300>)
 8001e06:	f7fe fccd 	bl	80007a4 <__aeabi_ddiv>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4610      	mov	r0, r2
 8001e10:	4619      	mov	r1, r3
 8001e12:	f7fe fe4d 	bl	8000ab0 <__aeabi_d2iz>
 8001e16:	4603      	mov	r3, r0
 8001e18:	61bb      	str	r3, [r7, #24]
		while( (Start_num * 31.25) <= f_m_cong)
 8001e1a:	e104      	b.n	8002026 <dctTransform+0x266>
		{

			     if((Start_num * 31.25) <= f_m_tru)
 8001e1c:	69b8      	ldr	r0, [r7, #24]
 8001e1e:	f7fe fb2d 	bl	800047c <__aeabi_i2d>
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	4ba6      	ldr	r3, [pc, #664]	; (80020c0 <dctTransform+0x300>)
 8001e28:	f7fe fb92 	bl	8000550 <__aeabi_dmul>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4614      	mov	r4, r2
 8001e32:	461d      	mov	r5, r3
 8001e34:	68b8      	ldr	r0, [r7, #8]
 8001e36:	f7fe fb33 	bl	80004a0 <__aeabi_f2d>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4620      	mov	r0, r4
 8001e40:	4629      	mov	r1, r5
 8001e42:	f7fe fe01 	bl	8000a48 <__aeabi_dcmple>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d008      	beq.n	8001e5e <dctTransform+0x9e>
			{
				fbank[m-1]= 0.0;
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	4a9c      	ldr	r2, [pc, #624]	; (80020c4 <dctTransform+0x304>)
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	e0e0      	b.n	8002020 <dctTransform+0x260>
			}
			else if((Start_num * 31.25) <= f_m)
 8001e5e:	69b8      	ldr	r0, [r7, #24]
 8001e60:	f7fe fb0c 	bl	800047c <__aeabi_i2d>
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	4b95      	ldr	r3, [pc, #596]	; (80020c0 <dctTransform+0x300>)
 8001e6a:	f7fe fb71 	bl	8000550 <__aeabi_dmul>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	4614      	mov	r4, r2
 8001e74:	461d      	mov	r5, r3
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7fe fb12 	bl	80004a0 <__aeabi_f2d>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4620      	mov	r0, r4
 8001e82:	4629      	mov	r1, r5
 8001e84:	f7fe fde0 	bl	8000a48 <__aeabi_dcmple>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d059      	beq.n	8001f42 <dctTransform+0x182>
			{
				fbank[m-1]+= (((Start_num * 31.25) - f_m_tru) / (f_m - f_m_tru)) * freqs[Start_num];
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	3b01      	subs	r3, #1
 8001e92:	4a8c      	ldr	r2, [pc, #560]	; (80020c4 <dctTransform+0x304>)
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe fb00 	bl	80004a0 <__aeabi_f2d>
 8001ea0:	4604      	mov	r4, r0
 8001ea2:	460d      	mov	r5, r1
 8001ea4:	69b8      	ldr	r0, [r7, #24]
 8001ea6:	f7fe fae9 	bl	800047c <__aeabi_i2d>
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	4b84      	ldr	r3, [pc, #528]	; (80020c0 <dctTransform+0x300>)
 8001eb0:	f7fe fb4e 	bl	8000550 <__aeabi_dmul>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4690      	mov	r8, r2
 8001eba:	4699      	mov	r9, r3
 8001ebc:	68b8      	ldr	r0, [r7, #8]
 8001ebe:	f7fe faef 	bl	80004a0 <__aeabi_f2d>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4640      	mov	r0, r8
 8001ec8:	4649      	mov	r1, r9
 8001eca:	f7fe f989 	bl	80001e0 <__aeabi_dsub>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4690      	mov	r8, r2
 8001ed4:	4699      	mov	r9, r3
 8001ed6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001eda:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ede:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ee2:	ee17 0a90 	vmov	r0, s15
 8001ee6:	f7fe fadb 	bl	80004a0 <__aeabi_f2d>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4640      	mov	r0, r8
 8001ef0:	4649      	mov	r1, r9
 8001ef2:	f7fe fc57 	bl	80007a4 <__aeabi_ddiv>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	4690      	mov	r8, r2
 8001efc:	4699      	mov	r9, r3
 8001efe:	4a72      	ldr	r2, [pc, #456]	; (80020c8 <dctTransform+0x308>)
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe fac9 	bl	80004a0 <__aeabi_f2d>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4640      	mov	r0, r8
 8001f14:	4649      	mov	r1, r9
 8001f16:	f7fe fb1b 	bl	8000550 <__aeabi_dmul>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4620      	mov	r0, r4
 8001f20:	4629      	mov	r1, r5
 8001f22:	f7fe f95f 	bl	80001e4 <__adddf3>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	1e5c      	subs	r4, r3, #1
 8001f32:	f7fe fe05 	bl	8000b40 <__aeabi_d2f>
 8001f36:	4602      	mov	r2, r0
 8001f38:	4962      	ldr	r1, [pc, #392]	; (80020c4 <dctTransform+0x304>)
 8001f3a:	00a3      	lsls	r3, r4, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	e06e      	b.n	8002020 <dctTransform+0x260>
			}
			else if((Start_num * 31.25) <= f_m_cong)
 8001f42:	69b8      	ldr	r0, [r7, #24]
 8001f44:	f7fe fa9a 	bl	800047c <__aeabi_i2d>
 8001f48:	f04f 0200 	mov.w	r2, #0
 8001f4c:	4b5c      	ldr	r3, [pc, #368]	; (80020c0 <dctTransform+0x300>)
 8001f4e:	f7fe faff 	bl	8000550 <__aeabi_dmul>
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	4614      	mov	r4, r2
 8001f58:	461d      	mov	r5, r3
 8001f5a:	6838      	ldr	r0, [r7, #0]
 8001f5c:	f7fe faa0 	bl	80004a0 <__aeabi_f2d>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4620      	mov	r0, r4
 8001f66:	4629      	mov	r1, r5
 8001f68:	f7fe fd6e 	bl	8000a48 <__aeabi_dcmple>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d056      	beq.n	8002020 <dctTransform+0x260>
			{
				fbank[m-1]+= ((f_m_cong - (Start_num * 31.25)) / (f_m_cong - f_m)) * freqs[Start_num];
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3b01      	subs	r3, #1
 8001f76:	4a53      	ldr	r2, [pc, #332]	; (80020c4 <dctTransform+0x304>)
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe fa8e 	bl	80004a0 <__aeabi_f2d>
 8001f84:	4604      	mov	r4, r0
 8001f86:	460d      	mov	r5, r1
 8001f88:	6838      	ldr	r0, [r7, #0]
 8001f8a:	f7fe fa89 	bl	80004a0 <__aeabi_f2d>
 8001f8e:	4680      	mov	r8, r0
 8001f90:	4689      	mov	r9, r1
 8001f92:	69b8      	ldr	r0, [r7, #24]
 8001f94:	f7fe fa72 	bl	800047c <__aeabi_i2d>
 8001f98:	f04f 0200 	mov.w	r2, #0
 8001f9c:	4b48      	ldr	r3, [pc, #288]	; (80020c0 <dctTransform+0x300>)
 8001f9e:	f7fe fad7 	bl	8000550 <__aeabi_dmul>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	4640      	mov	r0, r8
 8001fa8:	4649      	mov	r1, r9
 8001faa:	f7fe f919 	bl	80001e0 <__aeabi_dsub>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4690      	mov	r8, r2
 8001fb4:	4699      	mov	r9, r3
 8001fb6:	ed97 7a00 	vldr	s14, [r7]
 8001fba:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fc2:	ee17 0a90 	vmov	r0, s15
 8001fc6:	f7fe fa6b 	bl	80004a0 <__aeabi_f2d>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4640      	mov	r0, r8
 8001fd0:	4649      	mov	r1, r9
 8001fd2:	f7fe fbe7 	bl	80007a4 <__aeabi_ddiv>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4690      	mov	r8, r2
 8001fdc:	4699      	mov	r9, r3
 8001fde:	4a3a      	ldr	r2, [pc, #232]	; (80020c8 <dctTransform+0x308>)
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe fa59 	bl	80004a0 <__aeabi_f2d>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	4640      	mov	r0, r8
 8001ff4:	4649      	mov	r1, r9
 8001ff6:	f7fe faab 	bl	8000550 <__aeabi_dmul>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	4620      	mov	r0, r4
 8002000:	4629      	mov	r1, r5
 8002002:	f7fe f8ef 	bl	80001e4 <__adddf3>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4610      	mov	r0, r2
 800200c:	4619      	mov	r1, r3
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	1e5c      	subs	r4, r3, #1
 8002012:	f7fe fd95 	bl	8000b40 <__aeabi_d2f>
 8002016:	4602      	mov	r2, r0
 8002018:	492a      	ldr	r1, [pc, #168]	; (80020c4 <dctTransform+0x304>)
 800201a:	00a3      	lsls	r3, r4, #2
 800201c:	440b      	add	r3, r1
 800201e:	601a      	str	r2, [r3, #0]
			}
			Start_num++;
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	3301      	adds	r3, #1
 8002024:	61bb      	str	r3, [r7, #24]
		while( (Start_num * 31.25) <= f_m_cong)
 8002026:	69b8      	ldr	r0, [r7, #24]
 8002028:	f7fe fa28 	bl	800047c <__aeabi_i2d>
 800202c:	f04f 0200 	mov.w	r2, #0
 8002030:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <dctTransform+0x300>)
 8002032:	f7fe fa8d 	bl	8000550 <__aeabi_dmul>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4614      	mov	r4, r2
 800203c:	461d      	mov	r5, r3
 800203e:	6838      	ldr	r0, [r7, #0]
 8002040:	f7fe fa2e 	bl	80004a0 <__aeabi_f2d>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4620      	mov	r0, r4
 800204a:	4629      	mov	r1, r5
 800204c:	f7fe fcfc 	bl	8000a48 <__aeabi_dcmple>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	f47f aee2 	bne.w	8001e1c <dctTransform+0x5c>
	for(int m = 1; m <=  nfilter ;m++)
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	3301      	adds	r3, #1
 800205c:	61fb      	str	r3, [r7, #28]
 800205e:	2228      	movs	r2, #40	; 0x28
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	4293      	cmp	r3, r2
 8002064:	f77f aeb5 	ble.w	8001dd2 <dctTransform+0x12>
		}
	}

	for (int i = 0 ; i < nfilter; i++)
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	e014      	b.n	8002098 <dctTransform+0x2d8>
	{
		Hm[i] =  log10f(fbank[i]);
 800206e:	4a15      	ldr	r2, [pc, #84]	; (80020c4 <dctTransform+0x304>)
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	edd3 7a00 	vldr	s15, [r3]
 800207a:	eeb0 0a67 	vmov.f32	s0, s15
 800207e:	f007 faff 	bl	8009680 <log10f>
 8002082:	eef0 7a40 	vmov.f32	s15, s0
 8002086:	4a11      	ldr	r2, [pc, #68]	; (80020cc <dctTransform+0x30c>)
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0 ; i < nfilter; i++)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	3301      	adds	r3, #1
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	2228      	movs	r2, #40	; 0x28
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	4293      	cmp	r3, r2
 800209e:	dbe6      	blt.n	800206e <dctTransform+0x2ae>
	}

	for (int k = 0 ; k < nfilter; k++)
 80020a0:	2300      	movs	r3, #0
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	e06c      	b.n	8002180 <dctTransform+0x3c0>
	{
		DCT[k] = 0;
 80020a6:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <dctTransform+0x310>)
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
		for (int n = 0; n < nfilter; n++)
 80020b4:	2300      	movs	r3, #0
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	e05b      	b.n	8002172 <dctTransform+0x3b2>
 80020ba:	bf00      	nop
 80020bc:	20000268 	.word	0x20000268
 80020c0:	403f4000 	.word	0x403f4000
 80020c4:	200003f8 	.word	0x200003f8
 80020c8:	200015f8 	.word	0x200015f8
 80020cc:	20000498 	.word	0x20000498
 80020d0:	20000538 	.word	0x20000538
		{
			DCT[k] += Hm[n] * cosf(pi/nfilter * (n + 0.5) * k);
 80020d4:	4a30      	ldr	r2, [pc, #192]	; (8002198 <dctTransform+0x3d8>)
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	ed93 8a00 	vldr	s16, [r3]
 80020e0:	4a2e      	ldr	r2, [pc, #184]	; (800219c <dctTransform+0x3dc>)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	edd3 8a00 	vldr	s17, [r3]
 80020ec:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80021a0 <dctTransform+0x3e0>
 80020f0:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80021a4 <dctTransform+0x3e4>
 80020f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80020fc:	ee16 0a90 	vmov	r0, s13
 8002100:	f7fe f9ce 	bl	80004a0 <__aeabi_f2d>
 8002104:	4604      	mov	r4, r0
 8002106:	460d      	mov	r5, r1
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f7fe f9b7 	bl	800047c <__aeabi_i2d>
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	4b25      	ldr	r3, [pc, #148]	; (80021a8 <dctTransform+0x3e8>)
 8002114:	f7fe f866 	bl	80001e4 <__adddf3>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4620      	mov	r0, r4
 800211e:	4629      	mov	r1, r5
 8002120:	f7fe fa16 	bl	8000550 <__aeabi_dmul>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4614      	mov	r4, r2
 800212a:	461d      	mov	r5, r3
 800212c:	6938      	ldr	r0, [r7, #16]
 800212e:	f7fe f9a5 	bl	800047c <__aeabi_i2d>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	4620      	mov	r0, r4
 8002138:	4629      	mov	r1, r5
 800213a:	f7fe fa09 	bl	8000550 <__aeabi_dmul>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4610      	mov	r0, r2
 8002144:	4619      	mov	r1, r3
 8002146:	f7fe fcfb 	bl	8000b40 <__aeabi_d2f>
 800214a:	4603      	mov	r3, r0
 800214c:	ee00 3a10 	vmov	s0, r3
 8002150:	f007 f9b6 	bl	80094c0 <cosf>
 8002154:	eef0 7a40 	vmov.f32	s15, s0
 8002158:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800215c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002160:	4a0d      	ldr	r2, [pc, #52]	; (8002198 <dctTransform+0x3d8>)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	edc3 7a00 	vstr	s15, [r3]
		for (int n = 0; n < nfilter; n++)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	3301      	adds	r3, #1
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	2228      	movs	r2, #40	; 0x28
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4293      	cmp	r3, r2
 8002178:	dbac      	blt.n	80020d4 <dctTransform+0x314>
	for (int k = 0 ; k < nfilter; k++)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	3301      	adds	r3, #1
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	2228      	movs	r2, #40	; 0x28
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4293      	cmp	r3, r2
 8002186:	db8e      	blt.n	80020a6 <dctTransform+0x2e6>
		}
	}

}
 8002188:	bf00      	nop
 800218a:	bf00      	nop
 800218c:	3720      	adds	r7, #32
 800218e:	46bd      	mov	sp, r7
 8002190:	ecbd 8b02 	vpop	{d8}
 8002194:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002198:	20000538 	.word	0x20000538
 800219c:	20000498 	.word	0x20000498
 80021a0:	40490fdb 	.word	0x40490fdb
 80021a4:	00000028 	.word	0x00000028
 80021a8:	3fe00000 	.word	0x3fe00000
 80021ac:	00000000 	.word	0x00000000

080021b0 <calcDctEnergy>:

void calcDctEnergy(){
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
	   Energy1 = sqrt( (( DCT[1] - (DCT_A_1)) * ( DCT[1] - (DCT_A_1))) + (( DCT[2] - (DCT_A_2)) * ( DCT[2] - (DCT_A_2))) + (( DCT[3] - (DCT_A_3)) * ( DCT[3] - (DCT_A_3))) + (( DCT[4] - (DCT_A_4)) * ( DCT[4] - (DCT_A_4)))  +  (( DCT[5] - (DCT_A_5)) * ( DCT[5] - (DCT_A_5))) + (( DCT[6] - (DCT_A_6)) * ( DCT[6] - (DCT_A_6))) +  (( DCT[7] - (DCT_A_7)) * ( DCT[7] - (DCT_A_7)))  +   (( DCT[8] - (DCT_A_8)) * ( DCT[8] - (DCT_A_8))) +  (( DCT[9] - (DCT_A_9)) * ( DCT[9] - (DCT_A_9)))  +   (( DCT[10] - (DCT_A_10)) * ( DCT[10] - (DCT_A_10)))   +    (( DCT[11] - (DCT_A_11)) * ( DCT[11] - (DCT_A_11))) + (( DCT[12] - (DCT_A_12)) * ( DCT[12] - (DCT_A_12))) );
 80021b4:	4bdc      	ldr	r3, [pc, #880]	; (8002528 <calcDctEnergy+0x378>)
 80021b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80021ba:	ed9f 7adc 	vldr	s14, [pc, #880]	; 800252c <calcDctEnergy+0x37c>
 80021be:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80021c2:	4bd9      	ldr	r3, [pc, #868]	; (8002528 <calcDctEnergy+0x378>)
 80021c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80021c8:	eddf 6ad8 	vldr	s13, [pc, #864]	; 800252c <calcDctEnergy+0x37c>
 80021cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80021d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021d4:	4bd4      	ldr	r3, [pc, #848]	; (8002528 <calcDctEnergy+0x378>)
 80021d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80021da:	eddf 6ad5 	vldr	s13, [pc, #852]	; 8002530 <calcDctEnergy+0x380>
 80021de:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80021e2:	4bd1      	ldr	r3, [pc, #836]	; (8002528 <calcDctEnergy+0x378>)
 80021e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80021e8:	ed9f 6ad1 	vldr	s12, [pc, #836]	; 8002530 <calcDctEnergy+0x380>
 80021ec:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80021f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021f8:	4bcb      	ldr	r3, [pc, #812]	; (8002528 <calcDctEnergy+0x378>)
 80021fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80021fe:	eddf 6acd 	vldr	s13, [pc, #820]	; 8002534 <calcDctEnergy+0x384>
 8002202:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002206:	4bc8      	ldr	r3, [pc, #800]	; (8002528 <calcDctEnergy+0x378>)
 8002208:	edd3 7a03 	vldr	s15, [r3, #12]
 800220c:	ed9f 6ac9 	vldr	s12, [pc, #804]	; 8002534 <calcDctEnergy+0x384>
 8002210:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002214:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002218:	ee37 7a27 	vadd.f32	s14, s14, s15
 800221c:	4bc2      	ldr	r3, [pc, #776]	; (8002528 <calcDctEnergy+0x378>)
 800221e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002222:	eddf 6ac5 	vldr	s13, [pc, #788]	; 8002538 <calcDctEnergy+0x388>
 8002226:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800222a:	4bbf      	ldr	r3, [pc, #764]	; (8002528 <calcDctEnergy+0x378>)
 800222c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002230:	ed9f 6ac1 	vldr	s12, [pc, #772]	; 8002538 <calcDctEnergy+0x388>
 8002234:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002238:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800223c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002240:	4bb9      	ldr	r3, [pc, #740]	; (8002528 <calcDctEnergy+0x378>)
 8002242:	edd3 7a05 	vldr	s15, [r3, #20]
 8002246:	eddf 6abd 	vldr	s13, [pc, #756]	; 800253c <calcDctEnergy+0x38c>
 800224a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800224e:	4bb6      	ldr	r3, [pc, #728]	; (8002528 <calcDctEnergy+0x378>)
 8002250:	edd3 7a05 	vldr	s15, [r3, #20]
 8002254:	ed9f 6ab9 	vldr	s12, [pc, #740]	; 800253c <calcDctEnergy+0x38c>
 8002258:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800225c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002260:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002264:	4bb0      	ldr	r3, [pc, #704]	; (8002528 <calcDctEnergy+0x378>)
 8002266:	edd3 7a06 	vldr	s15, [r3, #24]
 800226a:	eddf 6ab5 	vldr	s13, [pc, #724]	; 8002540 <calcDctEnergy+0x390>
 800226e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002272:	4bad      	ldr	r3, [pc, #692]	; (8002528 <calcDctEnergy+0x378>)
 8002274:	edd3 7a06 	vldr	s15, [r3, #24]
 8002278:	ed9f 6ab1 	vldr	s12, [pc, #708]	; 8002540 <calcDctEnergy+0x390>
 800227c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002280:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002284:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002288:	4ba7      	ldr	r3, [pc, #668]	; (8002528 <calcDctEnergy+0x378>)
 800228a:	edd3 7a07 	vldr	s15, [r3, #28]
 800228e:	eddf 6aad 	vldr	s13, [pc, #692]	; 8002544 <calcDctEnergy+0x394>
 8002292:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002296:	4ba4      	ldr	r3, [pc, #656]	; (8002528 <calcDctEnergy+0x378>)
 8002298:	edd3 7a07 	vldr	s15, [r3, #28]
 800229c:	ed9f 6aa9 	vldr	s12, [pc, #676]	; 8002544 <calcDctEnergy+0x394>
 80022a0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80022a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022ac:	4b9e      	ldr	r3, [pc, #632]	; (8002528 <calcDctEnergy+0x378>)
 80022ae:	edd3 7a08 	vldr	s15, [r3, #32]
 80022b2:	eddf 6aa5 	vldr	s13, [pc, #660]	; 8002548 <calcDctEnergy+0x398>
 80022b6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80022ba:	4b9b      	ldr	r3, [pc, #620]	; (8002528 <calcDctEnergy+0x378>)
 80022bc:	edd3 7a08 	vldr	s15, [r3, #32]
 80022c0:	ed9f 6aa1 	vldr	s12, [pc, #644]	; 8002548 <calcDctEnergy+0x398>
 80022c4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80022c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022d0:	4b95      	ldr	r3, [pc, #596]	; (8002528 <calcDctEnergy+0x378>)
 80022d2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80022d6:	eddf 6a9d 	vldr	s13, [pc, #628]	; 800254c <calcDctEnergy+0x39c>
 80022da:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80022de:	4b92      	ldr	r3, [pc, #584]	; (8002528 <calcDctEnergy+0x378>)
 80022e0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80022e4:	ed9f 6a99 	vldr	s12, [pc, #612]	; 800254c <calcDctEnergy+0x39c>
 80022e8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80022ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022f4:	4b8c      	ldr	r3, [pc, #560]	; (8002528 <calcDctEnergy+0x378>)
 80022f6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80022fa:	eddf 6a95 	vldr	s13, [pc, #596]	; 8002550 <calcDctEnergy+0x3a0>
 80022fe:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002302:	4b89      	ldr	r3, [pc, #548]	; (8002528 <calcDctEnergy+0x378>)
 8002304:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002308:	ed9f 6a91 	vldr	s12, [pc, #580]	; 8002550 <calcDctEnergy+0x3a0>
 800230c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002310:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002314:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002318:	4b83      	ldr	r3, [pc, #524]	; (8002528 <calcDctEnergy+0x378>)
 800231a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800231e:	eddf 6a8d 	vldr	s13, [pc, #564]	; 8002554 <calcDctEnergy+0x3a4>
 8002322:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002326:	4b80      	ldr	r3, [pc, #512]	; (8002528 <calcDctEnergy+0x378>)
 8002328:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800232c:	ed9f 6a89 	vldr	s12, [pc, #548]	; 8002554 <calcDctEnergy+0x3a4>
 8002330:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002334:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002338:	ee37 7a27 	vadd.f32	s14, s14, s15
 800233c:	4b7a      	ldr	r3, [pc, #488]	; (8002528 <calcDctEnergy+0x378>)
 800233e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002342:	eddf 6a85 	vldr	s13, [pc, #532]	; 8002558 <calcDctEnergy+0x3a8>
 8002346:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800234a:	4b77      	ldr	r3, [pc, #476]	; (8002528 <calcDctEnergy+0x378>)
 800234c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002350:	ed9f 6a81 	vldr	s12, [pc, #516]	; 8002558 <calcDctEnergy+0x3a8>
 8002354:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002358:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800235c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002360:	ee17 0a90 	vmov	r0, s15
 8002364:	f7fe f89c 	bl	80004a0 <__aeabi_f2d>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	ec43 2b10 	vmov	d0, r2, r3
 8002370:	f007 f95a 	bl	8009628 <sqrt>
 8002374:	ec53 2b10 	vmov	r2, r3, d0
 8002378:	4610      	mov	r0, r2
 800237a:	4619      	mov	r1, r3
 800237c:	f7fe fbe0 	bl	8000b40 <__aeabi_d2f>
 8002380:	4603      	mov	r3, r0
 8002382:	4a76      	ldr	r2, [pc, #472]	; (800255c <calcDctEnergy+0x3ac>)
 8002384:	6013      	str	r3, [r2, #0]
	   Nguong1 = 1 - Energy1 / 12.0;
 8002386:	4b75      	ldr	r3, [pc, #468]	; (800255c <calcDctEnergy+0x3ac>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe f888 	bl	80004a0 <__aeabi_f2d>
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	4b72      	ldr	r3, [pc, #456]	; (8002560 <calcDctEnergy+0x3b0>)
 8002396:	f7fe fa05 	bl	80007a4 <__aeabi_ddiv>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	f04f 0000 	mov.w	r0, #0
 80023a2:	4970      	ldr	r1, [pc, #448]	; (8002564 <calcDctEnergy+0x3b4>)
 80023a4:	f7fd ff1c 	bl	80001e0 <__aeabi_dsub>
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	4610      	mov	r0, r2
 80023ae:	4619      	mov	r1, r3
 80023b0:	f7fe fbc6 	bl	8000b40 <__aeabi_d2f>
 80023b4:	4603      	mov	r3, r0
 80023b6:	4a6c      	ldr	r2, [pc, #432]	; (8002568 <calcDctEnergy+0x3b8>)
 80023b8:	6013      	str	r3, [r2, #0]
	   if(Nguong1 > 0.45)
 80023ba:	4b6b      	ldr	r3, [pc, #428]	; (8002568 <calcDctEnergy+0x3b8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe f86e 	bl	80004a0 <__aeabi_f2d>
 80023c4:	a356      	add	r3, pc, #344	; (adr r3, 8002520 <calcDctEnergy+0x370>)
 80023c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ca:	f7fe fb51 	bl	8000a70 <__aeabi_dcmpgt>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00c      	beq.n	80023ee <calcDctEnergy+0x23e>
	   {
		   txData[0] = 65;
 80023d4:	4b65      	ldr	r3, [pc, #404]	; (800256c <calcDctEnergy+0x3bc>)
 80023d6:	2241      	movs	r2, #65	; 0x41
 80023d8:	701a      	strb	r2, [r3, #0]
		   HAL_UART_Transmit(&huart1, txData , 1, 1000);
 80023da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023de:	2201      	movs	r2, #1
 80023e0:	4962      	ldr	r1, [pc, #392]	; (800256c <calcDctEnergy+0x3bc>)
 80023e2:	4863      	ldr	r0, [pc, #396]	; (8002570 <calcDctEnergy+0x3c0>)
 80023e4:	f005 fee3 	bl	80081ae <HAL_UART_Transmit>
		   flags.audioButton = 1;
 80023e8:	4b62      	ldr	r3, [pc, #392]	; (8002574 <calcDctEnergy+0x3c4>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	701a      	strb	r2, [r3, #0]
	   }

	   Energy2 = sqrt( (( DCT[1] - (DCT_O_1)) * ( DCT[1] - (DCT_O_1))) + (( DCT[2] - (DCT_O_2)) * ( DCT[2] - (DCT_O_2))) + (( DCT[3] - (DCT_O_3)) * ( DCT[3] - (DCT_O_3))) + (( DCT[4] - (DCT_O_4)) * ( DCT[4] - (DCT_O_4)))  +  (( DCT[5] - (DCT_O_5)) * ( DCT[5] - (DCT_O_5))) + (( DCT[6] - (DCT_O_6)) * ( DCT[6] - (DCT_O_6))) +  (( DCT[7] - (DCT_O_7)) * ( DCT[7] - (DCT_O_7)))  +   (( DCT[8] - (DCT_O_8)) * ( DCT[8] - (DCT_O_8))) +  (( DCT[9] - (DCT_O_9)) * ( DCT[9] - (DCT_O_9)))  +   (( DCT[10] - (DCT_O_10)) * ( DCT[10] - (DCT_O_10)))   +    (( DCT[11] - (DCT_O_11)) * ( DCT[11] - (DCT_O_11))) + (( DCT[12] - (DCT_O_12)) * ( DCT[12] - (DCT_O_12))) );
 80023ee:	4b4e      	ldr	r3, [pc, #312]	; (8002528 <calcDctEnergy+0x378>)
 80023f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80023f4:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8002578 <calcDctEnergy+0x3c8>
 80023f8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80023fc:	4b4a      	ldr	r3, [pc, #296]	; (8002528 <calcDctEnergy+0x378>)
 80023fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8002402:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8002578 <calcDctEnergy+0x3c8>
 8002406:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800240a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800240e:	4b46      	ldr	r3, [pc, #280]	; (8002528 <calcDctEnergy+0x378>)
 8002410:	edd3 7a02 	vldr	s15, [r3, #8]
 8002414:	eddf 6a59 	vldr	s13, [pc, #356]	; 800257c <calcDctEnergy+0x3cc>
 8002418:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800241c:	4b42      	ldr	r3, [pc, #264]	; (8002528 <calcDctEnergy+0x378>)
 800241e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002422:	ed9f 6a56 	vldr	s12, [pc, #344]	; 800257c <calcDctEnergy+0x3cc>
 8002426:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800242a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800242e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002432:	4b3d      	ldr	r3, [pc, #244]	; (8002528 <calcDctEnergy+0x378>)
 8002434:	edd3 7a03 	vldr	s15, [r3, #12]
 8002438:	eddf 6a51 	vldr	s13, [pc, #324]	; 8002580 <calcDctEnergy+0x3d0>
 800243c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002440:	4b39      	ldr	r3, [pc, #228]	; (8002528 <calcDctEnergy+0x378>)
 8002442:	edd3 7a03 	vldr	s15, [r3, #12]
 8002446:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8002580 <calcDctEnergy+0x3d0>
 800244a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800244e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002452:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002456:	4b34      	ldr	r3, [pc, #208]	; (8002528 <calcDctEnergy+0x378>)
 8002458:	edd3 7a04 	vldr	s15, [r3, #16]
 800245c:	eddf 6a49 	vldr	s13, [pc, #292]	; 8002584 <calcDctEnergy+0x3d4>
 8002460:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002464:	4b30      	ldr	r3, [pc, #192]	; (8002528 <calcDctEnergy+0x378>)
 8002466:	edd3 7a04 	vldr	s15, [r3, #16]
 800246a:	ed9f 6a46 	vldr	s12, [pc, #280]	; 8002584 <calcDctEnergy+0x3d4>
 800246e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002472:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002476:	ee37 7a27 	vadd.f32	s14, s14, s15
 800247a:	4b2b      	ldr	r3, [pc, #172]	; (8002528 <calcDctEnergy+0x378>)
 800247c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002480:	eddf 6a41 	vldr	s13, [pc, #260]	; 8002588 <calcDctEnergy+0x3d8>
 8002484:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002488:	4b27      	ldr	r3, [pc, #156]	; (8002528 <calcDctEnergy+0x378>)
 800248a:	edd3 7a05 	vldr	s15, [r3, #20]
 800248e:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8002588 <calcDctEnergy+0x3d8>
 8002492:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002496:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800249a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800249e:	4b22      	ldr	r3, [pc, #136]	; (8002528 <calcDctEnergy+0x378>)
 80024a0:	edd3 7a06 	vldr	s15, [r3, #24]
 80024a4:	eddf 6a39 	vldr	s13, [pc, #228]	; 800258c <calcDctEnergy+0x3dc>
 80024a8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80024ac:	4b1e      	ldr	r3, [pc, #120]	; (8002528 <calcDctEnergy+0x378>)
 80024ae:	edd3 7a06 	vldr	s15, [r3, #24]
 80024b2:	ed9f 6a36 	vldr	s12, [pc, #216]	; 800258c <calcDctEnergy+0x3dc>
 80024b6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80024ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024c2:	4b19      	ldr	r3, [pc, #100]	; (8002528 <calcDctEnergy+0x378>)
 80024c4:	edd3 7a07 	vldr	s15, [r3, #28]
 80024c8:	eddf 6a31 	vldr	s13, [pc, #196]	; 8002590 <calcDctEnergy+0x3e0>
 80024cc:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80024d0:	4b15      	ldr	r3, [pc, #84]	; (8002528 <calcDctEnergy+0x378>)
 80024d2:	edd3 7a07 	vldr	s15, [r3, #28]
 80024d6:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8002590 <calcDctEnergy+0x3e0>
 80024da:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80024de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024e6:	4b10      	ldr	r3, [pc, #64]	; (8002528 <calcDctEnergy+0x378>)
 80024e8:	edd3 7a08 	vldr	s15, [r3, #32]
 80024ec:	eddf 6a29 	vldr	s13, [pc, #164]	; 8002594 <calcDctEnergy+0x3e4>
 80024f0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80024f4:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <calcDctEnergy+0x378>)
 80024f6:	edd3 7a08 	vldr	s15, [r3, #32]
 80024fa:	ed9f 6a26 	vldr	s12, [pc, #152]	; 8002594 <calcDctEnergy+0x3e4>
 80024fe:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002502:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002506:	ee37 7a27 	vadd.f32	s14, s14, s15
 800250a:	4b07      	ldr	r3, [pc, #28]	; (8002528 <calcDctEnergy+0x378>)
 800250c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002510:	eddf 6a21 	vldr	s13, [pc, #132]	; 8002598 <calcDctEnergy+0x3e8>
 8002514:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002518:	4b03      	ldr	r3, [pc, #12]	; (8002528 <calcDctEnergy+0x378>)
 800251a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800251e:	e03d      	b.n	800259c <calcDctEnergy+0x3ec>
 8002520:	cccccccd 	.word	0xcccccccd
 8002524:	3fdccccc 	.word	0x3fdccccc
 8002528:	20000538 	.word	0x20000538
 800252c:	40b55914 	.word	0x40b55914
 8002530:	3fdc1ae6 	.word	0x3fdc1ae6
 8002534:	3f6c8494 	.word	0x3f6c8494
 8002538:	be91a8e8 	.word	0xbe91a8e8
 800253c:	3fd5f7c2 	.word	0x3fd5f7c2
 8002540:	3f96369f 	.word	0x3f96369f
 8002544:	c079d95e 	.word	0xc079d95e
 8002548:	c0744855 	.word	0xc0744855
 800254c:	bff4a0bf 	.word	0xbff4a0bf
 8002550:	c00ebb00 	.word	0xc00ebb00
 8002554:	c00d88f2 	.word	0xc00d88f2
 8002558:	bede3670 	.word	0xbede3670
 800255c:	200005d8 	.word	0x200005d8
 8002560:	40280000 	.word	0x40280000
 8002564:	3ff00000 	.word	0x3ff00000
 8002568:	200005e4 	.word	0x200005e4
 800256c:	2000190c 	.word	0x2000190c
 8002570:	20000224 	.word	0x20000224
 8002574:	20000090 	.word	0x20000090
 8002578:	40b709cf 	.word	0x40b709cf
 800257c:	c0319847 	.word	0xc0319847
 8002580:	3fa584c2 	.word	0x3fa584c2
 8002584:	405ea8a3 	.word	0x405ea8a3
 8002588:	4003e4b7 	.word	0x4003e4b7
 800258c:	3d8cd4a0 	.word	0x3d8cd4a0
 8002590:	c064f62f 	.word	0xc064f62f
 8002594:	bf467a10 	.word	0xbf467a10
 8002598:	3cfaf780 	.word	0x3cfaf780
 800259c:	ed1f 6a02 	vldr	s12, [pc, #-8]	; 8002598 <calcDctEnergy+0x3e8>
 80025a0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80025a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025ac:	4bce      	ldr	r3, [pc, #824]	; (80028e8 <calcDctEnergy+0x738>)
 80025ae:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80025b2:	eddf 6ace 	vldr	s13, [pc, #824]	; 80028ec <calcDctEnergy+0x73c>
 80025b6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80025ba:	4bcb      	ldr	r3, [pc, #812]	; (80028e8 <calcDctEnergy+0x738>)
 80025bc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80025c0:	ed9f 6aca 	vldr	s12, [pc, #808]	; 80028ec <calcDctEnergy+0x73c>
 80025c4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80025c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025d0:	4bc5      	ldr	r3, [pc, #788]	; (80028e8 <calcDctEnergy+0x738>)
 80025d2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80025d6:	eddf 6ac6 	vldr	s13, [pc, #792]	; 80028f0 <calcDctEnergy+0x740>
 80025da:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80025de:	4bc2      	ldr	r3, [pc, #776]	; (80028e8 <calcDctEnergy+0x738>)
 80025e0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80025e4:	ed9f 6ac2 	vldr	s12, [pc, #776]	; 80028f0 <calcDctEnergy+0x740>
 80025e8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80025ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025f4:	4bbc      	ldr	r3, [pc, #752]	; (80028e8 <calcDctEnergy+0x738>)
 80025f6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80025fa:	eddf 6abe 	vldr	s13, [pc, #760]	; 80028f4 <calcDctEnergy+0x744>
 80025fe:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002602:	4bb9      	ldr	r3, [pc, #740]	; (80028e8 <calcDctEnergy+0x738>)
 8002604:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002608:	ed9f 6aba 	vldr	s12, [pc, #744]	; 80028f4 <calcDctEnergy+0x744>
 800260c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002610:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002614:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002618:	ee17 0a90 	vmov	r0, s15
 800261c:	f7fd ff40 	bl	80004a0 <__aeabi_f2d>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	ec43 2b10 	vmov	d0, r2, r3
 8002628:	f006 fffe 	bl	8009628 <sqrt>
 800262c:	ec53 2b10 	vmov	r2, r3, d0
 8002630:	4610      	mov	r0, r2
 8002632:	4619      	mov	r1, r3
 8002634:	f7fe fa84 	bl	8000b40 <__aeabi_d2f>
 8002638:	4603      	mov	r3, r0
 800263a:	4aaf      	ldr	r2, [pc, #700]	; (80028f8 <calcDctEnergy+0x748>)
 800263c:	6013      	str	r3, [r2, #0]
	   Nguong2 = 1 - Energy2 / 12.0;
 800263e:	4bae      	ldr	r3, [pc, #696]	; (80028f8 <calcDctEnergy+0x748>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7fd ff2c 	bl	80004a0 <__aeabi_f2d>
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	4bab      	ldr	r3, [pc, #684]	; (80028fc <calcDctEnergy+0x74c>)
 800264e:	f7fe f8a9 	bl	80007a4 <__aeabi_ddiv>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	f04f 0000 	mov.w	r0, #0
 800265a:	49a9      	ldr	r1, [pc, #676]	; (8002900 <calcDctEnergy+0x750>)
 800265c:	f7fd fdc0 	bl	80001e0 <__aeabi_dsub>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	4610      	mov	r0, r2
 8002666:	4619      	mov	r1, r3
 8002668:	f7fe fa6a 	bl	8000b40 <__aeabi_d2f>
 800266c:	4603      	mov	r3, r0
 800266e:	4aa5      	ldr	r2, [pc, #660]	; (8002904 <calcDctEnergy+0x754>)
 8002670:	6013      	str	r3, [r2, #0]
	   if(Nguong2 > 0.45)
 8002672:	4ba4      	ldr	r3, [pc, #656]	; (8002904 <calcDctEnergy+0x754>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7fd ff12 	bl	80004a0 <__aeabi_f2d>
 800267c:	a398      	add	r3, pc, #608	; (adr r3, 80028e0 <calcDctEnergy+0x730>)
 800267e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002682:	f7fe f9f5 	bl	8000a70 <__aeabi_dcmpgt>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00c      	beq.n	80026a6 <calcDctEnergy+0x4f6>
	   {
		   txData[0] = 79;
 800268c:	4b9e      	ldr	r3, [pc, #632]	; (8002908 <calcDctEnergy+0x758>)
 800268e:	224f      	movs	r2, #79	; 0x4f
 8002690:	701a      	strb	r2, [r3, #0]
		   HAL_UART_Transmit(&huart1, txData, 1, 1000);
 8002692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002696:	2201      	movs	r2, #1
 8002698:	499b      	ldr	r1, [pc, #620]	; (8002908 <calcDctEnergy+0x758>)
 800269a:	489c      	ldr	r0, [pc, #624]	; (800290c <calcDctEnergy+0x75c>)
 800269c:	f005 fd87 	bl	80081ae <HAL_UART_Transmit>
		   flags.audioButton = 1;
 80026a0:	4b9b      	ldr	r3, [pc, #620]	; (8002910 <calcDctEnergy+0x760>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	701a      	strb	r2, [r3, #0]
	   }

	   Energy3 = sqrt( (( DCT[1] - (DCT_U_1)) * ( DCT[1] - (DCT_U_1))) + (( DCT[2] - (DCT_U_2)) * ( DCT[2] - (DCT_U_2))) + (( DCT[3] - (DCT_U_3)) * ( DCT[3] - (DCT_U_3))) + (( DCT[4] - (DCT_U_4)) * ( DCT[4] - (DCT_U_4)))  +  (( DCT[5] - (DCT_U_5)) * ( DCT[5] - (DCT_U_5))) + (( DCT[6] - (DCT_U_6)) * ( DCT[6] - (DCT_U_6))) +  (( DCT[7] - (DCT_U_7)) * ( DCT[7] - (DCT_U_7)))  +   (( DCT[8] - (DCT_U_8)) * ( DCT[8] - (DCT_U_8))) +  (( DCT[9] - (DCT_U_9)) * ( DCT[9] - (DCT_U_9)))  +   (( DCT[10] - (DCT_U_10)) * ( DCT[10] - (DCT_U_10)))   +    (( DCT[11] - (DCT_U_11)) * ( DCT[11] - (DCT_U_11))) + (( DCT[12] - (DCT_U_12)) * ( DCT[12] - (DCT_U_12))) );
 80026a6:	4b90      	ldr	r3, [pc, #576]	; (80028e8 <calcDctEnergy+0x738>)
 80026a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80026ac:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8002914 <calcDctEnergy+0x764>
 80026b0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80026b4:	4b8c      	ldr	r3, [pc, #560]	; (80028e8 <calcDctEnergy+0x738>)
 80026b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80026ba:	eddf 6a96 	vldr	s13, [pc, #600]	; 8002914 <calcDctEnergy+0x764>
 80026be:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80026c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026c6:	4b88      	ldr	r3, [pc, #544]	; (80028e8 <calcDctEnergy+0x738>)
 80026c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80026cc:	eddf 6a92 	vldr	s13, [pc, #584]	; 8002918 <calcDctEnergy+0x768>
 80026d0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80026d4:	4b84      	ldr	r3, [pc, #528]	; (80028e8 <calcDctEnergy+0x738>)
 80026d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80026da:	ed9f 6a8f 	vldr	s12, [pc, #572]	; 8002918 <calcDctEnergy+0x768>
 80026de:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80026e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026ea:	4b7f      	ldr	r3, [pc, #508]	; (80028e8 <calcDctEnergy+0x738>)
 80026ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80026f0:	eddf 6a8a 	vldr	s13, [pc, #552]	; 800291c <calcDctEnergy+0x76c>
 80026f4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80026f8:	4b7b      	ldr	r3, [pc, #492]	; (80028e8 <calcDctEnergy+0x738>)
 80026fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80026fe:	ed9f 6a87 	vldr	s12, [pc, #540]	; 800291c <calcDctEnergy+0x76c>
 8002702:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002706:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800270a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800270e:	4b76      	ldr	r3, [pc, #472]	; (80028e8 <calcDctEnergy+0x738>)
 8002710:	edd3 7a04 	vldr	s15, [r3, #16]
 8002714:	eddf 6a82 	vldr	s13, [pc, #520]	; 8002920 <calcDctEnergy+0x770>
 8002718:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800271c:	4b72      	ldr	r3, [pc, #456]	; (80028e8 <calcDctEnergy+0x738>)
 800271e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002722:	ed9f 6a7f 	vldr	s12, [pc, #508]	; 8002920 <calcDctEnergy+0x770>
 8002726:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800272a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800272e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002732:	4b6d      	ldr	r3, [pc, #436]	; (80028e8 <calcDctEnergy+0x738>)
 8002734:	edd3 7a05 	vldr	s15, [r3, #20]
 8002738:	eddf 6a7a 	vldr	s13, [pc, #488]	; 8002924 <calcDctEnergy+0x774>
 800273c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002740:	4b69      	ldr	r3, [pc, #420]	; (80028e8 <calcDctEnergy+0x738>)
 8002742:	edd3 7a05 	vldr	s15, [r3, #20]
 8002746:	ed9f 6a77 	vldr	s12, [pc, #476]	; 8002924 <calcDctEnergy+0x774>
 800274a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800274e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002752:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002756:	4b64      	ldr	r3, [pc, #400]	; (80028e8 <calcDctEnergy+0x738>)
 8002758:	edd3 7a06 	vldr	s15, [r3, #24]
 800275c:	eddf 6a72 	vldr	s13, [pc, #456]	; 8002928 <calcDctEnergy+0x778>
 8002760:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002764:	4b60      	ldr	r3, [pc, #384]	; (80028e8 <calcDctEnergy+0x738>)
 8002766:	edd3 7a06 	vldr	s15, [r3, #24]
 800276a:	ed9f 6a6f 	vldr	s12, [pc, #444]	; 8002928 <calcDctEnergy+0x778>
 800276e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002772:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002776:	ee37 7a27 	vadd.f32	s14, s14, s15
 800277a:	4b5b      	ldr	r3, [pc, #364]	; (80028e8 <calcDctEnergy+0x738>)
 800277c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002780:	eddf 6a6a 	vldr	s13, [pc, #424]	; 800292c <calcDctEnergy+0x77c>
 8002784:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002788:	4b57      	ldr	r3, [pc, #348]	; (80028e8 <calcDctEnergy+0x738>)
 800278a:	edd3 7a07 	vldr	s15, [r3, #28]
 800278e:	ed9f 6a67 	vldr	s12, [pc, #412]	; 800292c <calcDctEnergy+0x77c>
 8002792:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002796:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800279a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800279e:	4b52      	ldr	r3, [pc, #328]	; (80028e8 <calcDctEnergy+0x738>)
 80027a0:	edd3 7a08 	vldr	s15, [r3, #32]
 80027a4:	eddf 6a62 	vldr	s13, [pc, #392]	; 8002930 <calcDctEnergy+0x780>
 80027a8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80027ac:	4b4e      	ldr	r3, [pc, #312]	; (80028e8 <calcDctEnergy+0x738>)
 80027ae:	edd3 7a08 	vldr	s15, [r3, #32]
 80027b2:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 8002930 <calcDctEnergy+0x780>
 80027b6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80027ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027c2:	4b49      	ldr	r3, [pc, #292]	; (80028e8 <calcDctEnergy+0x738>)
 80027c4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80027c8:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8002934 <calcDctEnergy+0x784>
 80027cc:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80027d0:	4b45      	ldr	r3, [pc, #276]	; (80028e8 <calcDctEnergy+0x738>)
 80027d2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80027d6:	ed9f 6a57 	vldr	s12, [pc, #348]	; 8002934 <calcDctEnergy+0x784>
 80027da:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80027de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027e6:	4b40      	ldr	r3, [pc, #256]	; (80028e8 <calcDctEnergy+0x738>)
 80027e8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80027ec:	eddf 6a52 	vldr	s13, [pc, #328]	; 8002938 <calcDctEnergy+0x788>
 80027f0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80027f4:	4b3c      	ldr	r3, [pc, #240]	; (80028e8 <calcDctEnergy+0x738>)
 80027f6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80027fa:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8002938 <calcDctEnergy+0x788>
 80027fe:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002802:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002806:	ee37 7a27 	vadd.f32	s14, s14, s15
 800280a:	4b37      	ldr	r3, [pc, #220]	; (80028e8 <calcDctEnergy+0x738>)
 800280c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002810:	eddf 6a4a 	vldr	s13, [pc, #296]	; 800293c <calcDctEnergy+0x78c>
 8002814:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002818:	4b33      	ldr	r3, [pc, #204]	; (80028e8 <calcDctEnergy+0x738>)
 800281a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800281e:	ed9f 6a47 	vldr	s12, [pc, #284]	; 800293c <calcDctEnergy+0x78c>
 8002822:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002826:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800282a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800282e:	4b2e      	ldr	r3, [pc, #184]	; (80028e8 <calcDctEnergy+0x738>)
 8002830:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002834:	eddf 6a42 	vldr	s13, [pc, #264]	; 8002940 <calcDctEnergy+0x790>
 8002838:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800283c:	4b2a      	ldr	r3, [pc, #168]	; (80028e8 <calcDctEnergy+0x738>)
 800283e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002842:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8002940 <calcDctEnergy+0x790>
 8002846:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800284a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800284e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002852:	ee17 0a90 	vmov	r0, s15
 8002856:	f7fd fe23 	bl	80004a0 <__aeabi_f2d>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	ec43 2b10 	vmov	d0, r2, r3
 8002862:	f006 fee1 	bl	8009628 <sqrt>
 8002866:	ec53 2b10 	vmov	r2, r3, d0
 800286a:	4610      	mov	r0, r2
 800286c:	4619      	mov	r1, r3
 800286e:	f7fe f967 	bl	8000b40 <__aeabi_d2f>
 8002872:	4603      	mov	r3, r0
 8002874:	4a33      	ldr	r2, [pc, #204]	; (8002944 <calcDctEnergy+0x794>)
 8002876:	6013      	str	r3, [r2, #0]
	   Nguong3 = 1 - Energy3 / 12.0;
 8002878:	4b32      	ldr	r3, [pc, #200]	; (8002944 <calcDctEnergy+0x794>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f7fd fe0f 	bl	80004a0 <__aeabi_f2d>
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <calcDctEnergy+0x74c>)
 8002888:	f7fd ff8c 	bl	80007a4 <__aeabi_ddiv>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	f04f 0000 	mov.w	r0, #0
 8002894:	491a      	ldr	r1, [pc, #104]	; (8002900 <calcDctEnergy+0x750>)
 8002896:	f7fd fca3 	bl	80001e0 <__aeabi_dsub>
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	4610      	mov	r0, r2
 80028a0:	4619      	mov	r1, r3
 80028a2:	f7fe f94d 	bl	8000b40 <__aeabi_d2f>
 80028a6:	4603      	mov	r3, r0
 80028a8:	4a27      	ldr	r2, [pc, #156]	; (8002948 <calcDctEnergy+0x798>)
 80028aa:	6013      	str	r3, [r2, #0]
	   if(Nguong3 > 0.5)
 80028ac:	4b26      	ldr	r3, [pc, #152]	; (8002948 <calcDctEnergy+0x798>)
 80028ae:	edd3 7a00 	vldr	s15, [r3]
 80028b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80028b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028be:	dc00      	bgt.n	80028c2 <calcDctEnergy+0x712>
	   {
		   txData[0] = 85;
		   HAL_UART_Transmit(&huart1, txData, 1, 1000);
		   flags.audioButton = 1;
	   }
}
 80028c0:	e00c      	b.n	80028dc <calcDctEnergy+0x72c>
		   txData[0] = 85;
 80028c2:	4b11      	ldr	r3, [pc, #68]	; (8002908 <calcDctEnergy+0x758>)
 80028c4:	2255      	movs	r2, #85	; 0x55
 80028c6:	701a      	strb	r2, [r3, #0]
		   HAL_UART_Transmit(&huart1, txData, 1, 1000);
 80028c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028cc:	2201      	movs	r2, #1
 80028ce:	490e      	ldr	r1, [pc, #56]	; (8002908 <calcDctEnergy+0x758>)
 80028d0:	480e      	ldr	r0, [pc, #56]	; (800290c <calcDctEnergy+0x75c>)
 80028d2:	f005 fc6c 	bl	80081ae <HAL_UART_Transmit>
		   flags.audioButton = 1;
 80028d6:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <calcDctEnergy+0x760>)
 80028d8:	2201      	movs	r2, #1
 80028da:	701a      	strb	r2, [r3, #0]
}
 80028dc:	bf00      	nop
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	cccccccd 	.word	0xcccccccd
 80028e4:	3fdccccc 	.word	0x3fdccccc
 80028e8:	20000538 	.word	0x20000538
 80028ec:	bf86a1d8 	.word	0xbf86a1d8
 80028f0:	c03b05e2 	.word	0xc03b05e2
 80028f4:	bf191764 	.word	0xbf191764
 80028f8:	200005dc 	.word	0x200005dc
 80028fc:	40280000 	.word	0x40280000
 8002900:	3ff00000 	.word	0x3ff00000
 8002904:	200005e8 	.word	0x200005e8
 8002908:	2000190c 	.word	0x2000190c
 800290c:	20000224 	.word	0x20000224
 8002910:	20000090 	.word	0x20000090
 8002914:	40fc64d7 	.word	0x40fc64d7
 8002918:	bd53d060 	.word	0xbd53d060
 800291c:	bd3629c0 	.word	0xbd3629c0
 8002920:	c018920c 	.word	0xc018920c
 8002924:	c08a2a51 	.word	0xc08a2a51
 8002928:	c0b20db9 	.word	0xc0b20db9
 800292c:	c081e8f8 	.word	0xc081e8f8
 8002930:	bf06b2a4 	.word	0xbf06b2a4
 8002934:	3f265c50 	.word	0x3f265c50
 8002938:	bf8aa319 	.word	0xbf8aa319
 800293c:	c032b867 	.word	0xc032b867
 8002940:	c0131eb2 	.word	0xc0131eb2
 8002944:	200005e0 	.word	0x200005e0
 8002948:	200005ec 	.word	0x200005ec

0800294c <enableRecordAudio>:

void enableRecordAudio()
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
	// Start TIM5 2 seconds timer
	HAL_TIM_Base_Start_IT(&htim5);
 8002950:	4802      	ldr	r0, [pc, #8]	; (800295c <enableRecordAudio+0x10>)
 8002952:	f004 fc3d 	bl	80071d0 <HAL_TIM_Base_Start_IT>
}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	200001dc 	.word	0x200001dc

08002960 <startRecordAudio>:

uint8_t startRecordAudio()
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
	uint8_t isNoErrorWhileRecording = 1;
 8002966:	2301      	movs	r3, #1
 8002968:	71fb      	strb	r3, [r7, #7]

	// Start record audio sequence, wait 2 second
	// Set RECORD_STATE_Pin
	HAL_GPIO_WritePin(RECORD_STATE_GPIO_Port, RECORD_STATE_Pin, GPIO_PIN_SET);
 800296a:	2201      	movs	r2, #1
 800296c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002970:	4827      	ldr	r0, [pc, #156]	; (8002a10 <startRecordAudio+0xb0>)
 8002972:	f001 fe53 	bl	800461c <HAL_GPIO_WritePin>
	while(flags.recordTimer == 0);
 8002976:	bf00      	nop
 8002978:	4b26      	ldr	r3, [pc, #152]	; (8002a14 <startRecordAudio+0xb4>)
 800297a:	789b      	ldrb	r3, [r3, #2]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0fb      	beq.n	8002978 <startRecordAudio+0x18>

	// Enable I2S Receive DMA
	HAL_I2S_Receive_DMA(&hi2s2, (uint16_t *) receiveBuffer, BUFFER_SIZE);
 8002980:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002984:	4924      	ldr	r1, [pc, #144]	; (8002a18 <startRecordAudio+0xb8>)
 8002986:	4825      	ldr	r0, [pc, #148]	; (8002a1c <startRecordAudio+0xbc>)
 8002988:	f002 ff62 	bl	8005850 <HAL_I2S_Receive_DMA>
	// Clear RECORD_STATE_Pin
	HAL_GPIO_WritePin(RECORD_STATE_GPIO_Port, RECORD_STATE_Pin, GPIO_PIN_RESET);
 800298c:	2200      	movs	r2, #0
 800298e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002992:	481f      	ldr	r0, [pc, #124]	; (8002a10 <startRecordAudio+0xb0>)
 8002994:	f001 fe42 	bl	800461c <HAL_GPIO_WritePin>
	while(flags.recordTimer == 1) {
 8002998:	e008      	b.n	80029ac <startRecordAudio+0x4c>
		fftBufferIndex = 0;
 800299a:	4b21      	ldr	r3, [pc, #132]	; (8002a20 <startRecordAudio+0xc0>)
 800299c:	2200      	movs	r2, #0
 800299e:	801a      	strh	r2, [r3, #0]
		if(flags.dataReceived == 1) processData();
 80029a0:	4b1c      	ldr	r3, [pc, #112]	; (8002a14 <startRecordAudio+0xb4>)
 80029a2:	78db      	ldrb	r3, [r3, #3]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <startRecordAudio+0x4c>
 80029a8:	f7ff f8f6 	bl	8001b98 <processData>
	while(flags.recordTimer == 1) {
 80029ac:	4b19      	ldr	r3, [pc, #100]	; (8002a14 <startRecordAudio+0xb4>)
 80029ae:	789b      	ldrb	r3, [r3, #2]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d0f2      	beq.n	800299a <startRecordAudio+0x3a>
	}

	// Stops the audio DMA Stream/Channel playing from the Media
	stateI2S = HAL_I2S_GetState(&hi2s2);
 80029b4:	4819      	ldr	r0, [pc, #100]	; (8002a1c <startRecordAudio+0xbc>)
 80029b6:	f003 f9f5 	bl	8005da4 <HAL_I2S_GetState>
 80029ba:	4603      	mov	r3, r0
 80029bc:	461a      	mov	r2, r3
 80029be:	4b19      	ldr	r3, [pc, #100]	; (8002a24 <startRecordAudio+0xc4>)
 80029c0:	601a      	str	r2, [r3, #0]
	if(stateI2S > HAL_I2S_STATE_READY) HAL_I2S_DMAStop(&hi2s2);
 80029c2:	4b18      	ldr	r3, [pc, #96]	; (8002a24 <startRecordAudio+0xc4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	dd02      	ble.n	80029d0 <startRecordAudio+0x70>
 80029ca:	4814      	ldr	r0, [pc, #80]	; (8002a1c <startRecordAudio+0xbc>)
 80029cc:	f002 fffc 	bl	80059c8 <HAL_I2S_DMAStop>

	// Clear the audio record LED state

	HAL_GPIO_WritePin(RECORD_STATE_GPIO_Port, RECORD_STATE_Pin, GPIO_PIN_SET);
 80029d0:	2201      	movs	r2, #1
 80029d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029d6:	480e      	ldr	r0, [pc, #56]	; (8002a10 <startRecordAudio+0xb0>)
 80029d8:	f001 fe20 	bl	800461c <HAL_GPIO_WritePin>
	while(flags.recordTimer == 0);
 80029dc:	bf00      	nop
 80029de:	4b0d      	ldr	r3, [pc, #52]	; (8002a14 <startRecordAudio+0xb4>)
 80029e0:	789b      	ldrb	r3, [r3, #2]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0fb      	beq.n	80029de <startRecordAudio+0x7e>

	// Stop TIM5
	HAL_TIM_Base_Stop_IT(&htim5);
 80029e6:	4810      	ldr	r0, [pc, #64]	; (8002a28 <startRecordAudio+0xc8>)
 80029e8:	f004 fc54 	bl	8007294 <HAL_TIM_Base_Stop_IT>

	// Clear RECORD_STATE Led
	HAL_GPIO_WritePin(RECORD_STATE_GPIO_Port, RECORD_STATE_Pin, GPIO_PIN_RESET);
 80029ec:	2200      	movs	r2, #0
 80029ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029f2:	4807      	ldr	r0, [pc, #28]	; (8002a10 <startRecordAudio+0xb0>)
 80029f4:	f001 fe12 	bl	800461c <HAL_GPIO_WritePin>
	// Clear record timer flags
	flags.recordTimer = 0;
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <startRecordAudio+0xb4>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	709a      	strb	r2, [r3, #2]
	// Clear dataReceived flag
	flags.dataReceived = 0;
 80029fe:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <startRecordAudio+0xb4>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	70da      	strb	r2, [r3, #3]
	// Return status of record audio sequence
	return isNoErrorWhileRecording;
 8002a04:	79fb      	ldrb	r3, [r7, #7]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40020800 	.word	0x40020800
 8002a14:	20000090 	.word	0x20000090
 8002a18:	200005f0 	.word	0x200005f0
 8002a1c:	200000ec 	.word	0x200000ec
 8002a20:	200015f4 	.word	0x200015f4
 8002a24:	2000291c 	.word	0x2000291c
 8002a28:	200001dc 	.word	0x200001dc

08002a2c <store10HighestFreqsdB>:

uint8_t store10HighestFreqsdB(){
 8002a2c:	b480      	push	{r7}
 8002a2e:	b089      	sub	sp, #36	; 0x24
 8002a30:	af00      	add	r7, sp, #0
	uint8_t totalFreqs = 0, tempFreqsIndex = 0, correctFreqsIndex = 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	77fb      	strb	r3, [r7, #31]
 8002a36:	2300      	movs	r3, #0
 8002a38:	77bb      	strb	r3, [r7, #30]
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	777b      	strb	r3, [r7, #29]
	uint8_t tempFreqs[MAX_FREQ_AND_GAIN];

	for(uint16_t freqSampledIndex = 0; freqSampledIndex < MAX_RECORD_COUNT; freqSampledIndex++){
 8002a3e:	2300      	movs	r3, #0
 8002a40:	837b      	strh	r3, [r7, #26]
 8002a42:	e08c      	b.n	8002b5e <store10HighestFreqsdB+0x132>
		// First loop to get MAX_RECORD_COUNT storedFreqs[freqSampledIndex][x]; x means don't care
		for(uint16_t magniIndex = 0; magniIndex < FFT_LENGTH / 4; magniIndex++){
 8002a44:	2300      	movs	r3, #0
 8002a46:	833b      	strh	r3, [r7, #24]
 8002a48:	e07e      	b.n	8002b48 <store10HighestFreqsdB+0x11c>
			// Second loop to check dB gain for a storedFreqs[x][dBIndex] sample; x means dont't care
			if(storedFreqs[freqSampledIndex][magniIndex] > 0 && freqSampledIndex <= 0) {
 8002a4a:	8b7a      	ldrh	r2, [r7, #26]
 8002a4c:	8b3b      	ldrh	r3, [r7, #24]
 8002a4e:	4950      	ldr	r1, [pc, #320]	; (8002b90 <store10HighestFreqsdB+0x164>)
 8002a50:	01d2      	lsls	r2, r2, #7
 8002a52:	440a      	add	r2, r1
 8002a54:	4413      	add	r3, r2
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d01d      	beq.n	8002a98 <store10HighestFreqsdB+0x6c>
 8002a5c:	8b7b      	ldrh	r3, [r7, #26]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d11a      	bne.n	8002a98 <store10HighestFreqsdB+0x6c>
				tempFreqs[tempFreqsIndex] = magniIndex;
 8002a62:	7fbb      	ldrb	r3, [r7, #30]
 8002a64:	8b3a      	ldrh	r2, [r7, #24]
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	3320      	adds	r3, #32
 8002a6a:	443b      	add	r3, r7
 8002a6c:	f803 2c20 	strb.w	r2, [r3, #-32]
				tempFreqs[tempFreqsIndex + 1] = storedFreqs[freqSampledIndex][magniIndex];
 8002a70:	8b79      	ldrh	r1, [r7, #26]
 8002a72:	8b3a      	ldrh	r2, [r7, #24]
 8002a74:	7fbb      	ldrb	r3, [r7, #30]
 8002a76:	3301      	adds	r3, #1
 8002a78:	4845      	ldr	r0, [pc, #276]	; (8002b90 <store10HighestFreqsdB+0x164>)
 8002a7a:	01c9      	lsls	r1, r1, #7
 8002a7c:	4401      	add	r1, r0
 8002a7e:	440a      	add	r2, r1
 8002a80:	7812      	ldrb	r2, [r2, #0]
 8002a82:	3320      	adds	r3, #32
 8002a84:	443b      	add	r3, r7
 8002a86:	f803 2c20 	strb.w	r2, [r3, #-32]
				totalFreqs++;
 8002a8a:	7ffb      	ldrb	r3, [r7, #31]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	77fb      	strb	r3, [r7, #31]
				tempFreqsIndex += 2;
 8002a90:	7fbb      	ldrb	r3, [r7, #30]
 8002a92:	3302      	adds	r3, #2
 8002a94:	77bb      	strb	r3, [r7, #30]
 8002a96:	e048      	b.n	8002b2a <store10HighestFreqsdB+0xfe>
			} else if(storedFreqs[freqSampledIndex][magniIndex] > 0 && freqSampledIndex > 0){
 8002a98:	8b7a      	ldrh	r2, [r7, #26]
 8002a9a:	8b3b      	ldrh	r3, [r7, #24]
 8002a9c:	493c      	ldr	r1, [pc, #240]	; (8002b90 <store10HighestFreqsdB+0x164>)
 8002a9e:	01d2      	lsls	r2, r2, #7
 8002aa0:	440a      	add	r2, r1
 8002aa2:	4413      	add	r3, r2
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d03f      	beq.n	8002b2a <store10HighestFreqsdB+0xfe>
 8002aaa:	8b7b      	ldrh	r3, [r7, #26]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d03c      	beq.n	8002b2a <store10HighestFreqsdB+0xfe>
				uint8_t isMatch = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	75bb      	strb	r3, [r7, #22]

				for(uint8_t i = 0; i < tempFreqsIndex; i += 2){
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	75fb      	strb	r3, [r7, #23]
 8002ab8:	e033      	b.n	8002b22 <store10HighestFreqsdB+0xf6>
					isMatch = tempFreqs[i] == magniIndex ? 1 : 0;
 8002aba:	7dfb      	ldrb	r3, [r7, #23]
 8002abc:	3320      	adds	r3, #32
 8002abe:	443b      	add	r3, r7
 8002ac0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	8b3a      	ldrh	r2, [r7, #24]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	bf0c      	ite	eq
 8002acc:	2301      	moveq	r3, #1
 8002ace:	2300      	movne	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	75bb      	strb	r3, [r7, #22]

					if(isMatch >= 1) {
 8002ad4:	7dbb      	ldrb	r3, [r7, #22]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d020      	beq.n	8002b1c <store10HighestFreqsdB+0xf0>
						averageHighestFreqs[correctFreqsIndex] = magniIndex;
 8002ada:	7f7b      	ldrb	r3, [r7, #29]
 8002adc:	8b3a      	ldrh	r2, [r7, #24]
 8002ade:	b2d1      	uxtb	r1, r2
 8002ae0:	4a2c      	ldr	r2, [pc, #176]	; (8002b94 <store10HighestFreqsdB+0x168>)
 8002ae2:	54d1      	strb	r1, [r2, r3]
						averageHighestFreqs[correctFreqsIndex + 1] = (storedFreqs[freqSampledIndex][magniIndex] + tempFreqs[i + 1] ) / 2;
 8002ae4:	8b7a      	ldrh	r2, [r7, #26]
 8002ae6:	8b3b      	ldrh	r3, [r7, #24]
 8002ae8:	4929      	ldr	r1, [pc, #164]	; (8002b90 <store10HighestFreqsdB+0x164>)
 8002aea:	01d2      	lsls	r2, r2, #7
 8002aec:	440a      	add	r2, r1
 8002aee:	4413      	add	r3, r2
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	7dfb      	ldrb	r3, [r7, #23]
 8002af6:	3301      	adds	r3, #1
 8002af8:	3320      	adds	r3, #32
 8002afa:	443b      	add	r3, r7
 8002afc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002b00:	4413      	add	r3, r2
 8002b02:	0fda      	lsrs	r2, r3, #31
 8002b04:	4413      	add	r3, r2
 8002b06:	105b      	asrs	r3, r3, #1
 8002b08:	461a      	mov	r2, r3
 8002b0a:	7f7b      	ldrb	r3, [r7, #29]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	b2d1      	uxtb	r1, r2
 8002b10:	4a20      	ldr	r2, [pc, #128]	; (8002b94 <store10HighestFreqsdB+0x168>)
 8002b12:	54d1      	strb	r1, [r2, r3]
						correctFreqsIndex += 2;
 8002b14:	7f7b      	ldrb	r3, [r7, #29]
 8002b16:	3302      	adds	r3, #2
 8002b18:	777b      	strb	r3, [r7, #29]
						break;
 8002b1a:	e006      	b.n	8002b2a <store10HighestFreqsdB+0xfe>
				for(uint8_t i = 0; i < tempFreqsIndex; i += 2){
 8002b1c:	7dfb      	ldrb	r3, [r7, #23]
 8002b1e:	3302      	adds	r3, #2
 8002b20:	75fb      	strb	r3, [r7, #23]
 8002b22:	7dfa      	ldrb	r2, [r7, #23]
 8002b24:	7fbb      	ldrb	r3, [r7, #30]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d3c7      	bcc.n	8002aba <store10HighestFreqsdB+0x8e>
					}

				}
			}

			if(correctFreqsIndex >= 20 && freqSampledIndex > 0) break;
 8002b2a:	7f7b      	ldrb	r3, [r7, #29]
 8002b2c:	2b13      	cmp	r3, #19
 8002b2e:	d902      	bls.n	8002b36 <store10HighestFreqsdB+0x10a>
 8002b30:	8b7b      	ldrh	r3, [r7, #26]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10d      	bne.n	8002b52 <store10HighestFreqsdB+0x126>
			if(totalFreqs >= 10 && freqSampledIndex <= 0) break;
 8002b36:	7ffb      	ldrb	r3, [r7, #31]
 8002b38:	2b09      	cmp	r3, #9
 8002b3a:	d902      	bls.n	8002b42 <store10HighestFreqsdB+0x116>
 8002b3c:	8b7b      	ldrh	r3, [r7, #26]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d009      	beq.n	8002b56 <store10HighestFreqsdB+0x12a>
		for(uint16_t magniIndex = 0; magniIndex < FFT_LENGTH / 4; magniIndex++){
 8002b42:	8b3b      	ldrh	r3, [r7, #24]
 8002b44:	3301      	adds	r3, #1
 8002b46:	833b      	strh	r3, [r7, #24]
 8002b48:	8b3b      	ldrh	r3, [r7, #24]
 8002b4a:	2b7f      	cmp	r3, #127	; 0x7f
 8002b4c:	f67f af7d 	bls.w	8002a4a <store10HighestFreqsdB+0x1e>
 8002b50:	e002      	b.n	8002b58 <store10HighestFreqsdB+0x12c>
			if(correctFreqsIndex >= 20 && freqSampledIndex > 0) break;
 8002b52:	bf00      	nop
 8002b54:	e000      	b.n	8002b58 <store10HighestFreqsdB+0x12c>
			if(totalFreqs >= 10 && freqSampledIndex <= 0) break;
 8002b56:	bf00      	nop
	for(uint16_t freqSampledIndex = 0; freqSampledIndex < MAX_RECORD_COUNT; freqSampledIndex++){
 8002b58:	8b7b      	ldrh	r3, [r7, #26]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	837b      	strh	r3, [r7, #26]
 8002b5e:	8b7b      	ldrh	r3, [r7, #26]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	f67f af6f 	bls.w	8002a44 <store10HighestFreqsdB+0x18>
		}
	}

	readAfter = correctFreqsIndex;
 8002b66:	4a0c      	ldr	r2, [pc, #48]	; (8002b98 <store10HighestFreqsdB+0x16c>)
 8002b68:	7f7b      	ldrb	r3, [r7, #29]
 8002b6a:	7013      	strb	r3, [r2, #0]
	readBefore = tempFreqsIndex;
 8002b6c:	4a0b      	ldr	r2, [pc, #44]	; (8002b9c <store10HighestFreqsdB+0x170>)
 8002b6e:	7fbb      	ldrb	r3, [r7, #30]
 8002b70:	7013      	strb	r3, [r2, #0]

	return 100 * correctFreqsIndex / tempFreqsIndex;
 8002b72:	7f7b      	ldrb	r3, [r7, #29]
 8002b74:	2264      	movs	r2, #100	; 0x64
 8002b76:	fb03 f202 	mul.w	r2, r3, r2
 8002b7a:	7fbb      	ldrb	r3, [r7, #30]
 8002b7c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002b80:	b2db      	uxtb	r3, r3
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3724      	adds	r7, #36	; 0x24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	200017f8 	.word	0x200017f8
 8002b94:	200018f8 	.word	0x200018f8
 8002b98:	20002923 	.word	0x20002923
 8002b9c:	20002924 	.word	0x20002924

08002ba0 <startRecordSequence>:

void startRecordSequence(){
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
	// Clear previous records counts
	HAL_GPIO_WritePin(RECORD_STATE_GPIO_Port, RECORD_STATE_Pin, GPIO_PIN_SET);
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002bac:	483e      	ldr	r0, [pc, #248]	; (8002ca8 <startRecordSequence+0x108>)
 8002bae:	f001 fd35 	bl	800461c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_MIC_STATE_GPIO_Port, LED_MIC_STATE_Pin, GPIO_PIN_SET);
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bb8:	483b      	ldr	r0, [pc, #236]	; (8002ca8 <startRecordSequence+0x108>)
 8002bba:	f001 fd2f 	bl	800461c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8002bbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bc2:	f000 fe6f 	bl	80038a4 <HAL_Delay>
	HAL_GPIO_WritePin(RECORD_STATE_GPIO_Port, RECORD_STATE_Pin, GPIO_PIN_RESET);
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002bcc:	4836      	ldr	r0, [pc, #216]	; (8002ca8 <startRecordSequence+0x108>)
 8002bce:	f001 fd25 	bl	800461c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_MIC_STATE_GPIO_Port, LED_MIC_STATE_Pin, GPIO_PIN_RESET);
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bd8:	4833      	ldr	r0, [pc, #204]	; (8002ca8 <startRecordSequence+0x108>)
 8002bda:	f001 fd1f 	bl	800461c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002bde:	2064      	movs	r0, #100	; 0x64
 8002be0:	f000 fe60 	bl	80038a4 <HAL_Delay>

	recordsCount = 0;
 8002be4:	4b31      	ldr	r3, [pc, #196]	; (8002cac <startRecordSequence+0x10c>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	701a      	strb	r2, [r3, #0]
	// Clear previous recorded/processed arrays
	for(uint16_t i = 0; i < MAX_FREQ_AND_GAIN; i++){
 8002bea:	2300      	movs	r3, #0
 8002bec:	80fb      	strh	r3, [r7, #6]
 8002bee:	e006      	b.n	8002bfe <startRecordSequence+0x5e>
	  averageHighestFreqs[i] = 0;
 8002bf0:	88fb      	ldrh	r3, [r7, #6]
 8002bf2:	4a2f      	ldr	r2, [pc, #188]	; (8002cb0 <startRecordSequence+0x110>)
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < MAX_FREQ_AND_GAIN; i++){
 8002bf8:	88fb      	ldrh	r3, [r7, #6]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	80fb      	strh	r3, [r7, #6]
 8002bfe:	88fb      	ldrh	r3, [r7, #6]
 8002c00:	2b13      	cmp	r3, #19
 8002c02:	d9f5      	bls.n	8002bf0 <startRecordSequence+0x50>
	}

	// Record audio MAX_RECORD_COUNT time
	while(recordsCount < MAX_RECORD_COUNT){
 8002c04:	e013      	b.n	8002c2e <startRecordSequence+0x8e>
	  enableRecordAudio();
 8002c06:	f7ff fea1 	bl	800294c <enableRecordAudio>
	  stateRecordAudio = startRecordAudio();
 8002c0a:	f7ff fea9 	bl	8002960 <startRecordAudio>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	461a      	mov	r2, r3
 8002c12:	4b28      	ldr	r3, [pc, #160]	; (8002cb4 <startRecordSequence+0x114>)
 8002c14:	701a      	strb	r2, [r3, #0]

	  if(stateRecordAudio == 1) setLedSuccess();
 8002c16:	4b27      	ldr	r3, [pc, #156]	; (8002cb4 <startRecordSequence+0x114>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d10c      	bne.n	8002c38 <startRecordSequence+0x98>
 8002c1e:	f000 f851 	bl	8002cc4 <setLedSuccess>
	  else break;

	  recordsCount++;
 8002c22:	4b22      	ldr	r3, [pc, #136]	; (8002cac <startRecordSequence+0x10c>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	3301      	adds	r3, #1
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	4b20      	ldr	r3, [pc, #128]	; (8002cac <startRecordSequence+0x10c>)
 8002c2c:	701a      	strb	r2, [r3, #0]
	while(recordsCount < MAX_RECORD_COUNT){
 8002c2e:	4b1f      	ldr	r3, [pc, #124]	; (8002cac <startRecordSequence+0x10c>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d9e7      	bls.n	8002c06 <startRecordSequence+0x66>
 8002c36:	e000      	b.n	8002c3a <startRecordSequence+0x9a>
	  else break;
 8002c38:	bf00      	nop
	}

	resultAvg = store10HighestFreqsdB();
 8002c3a:	f7ff fef7 	bl	8002a2c <store10HighestFreqsdB>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	461a      	mov	r2, r3
 8002c42:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <startRecordSequence+0x118>)
 8002c44:	701a      	strb	r2, [r3, #0]

	// If successful then proceed to store highest FREQS got from records
	if(resultAvg >= 70 && stateRecordAudio == 1) {
 8002c46:	4b1c      	ldr	r3, [pc, #112]	; (8002cb8 <startRecordSequence+0x118>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b45      	cmp	r3, #69	; 0x45
 8002c4c:	d928      	bls.n	8002ca0 <startRecordSequence+0x100>
 8002c4e:	4b19      	ldr	r3, [pc, #100]	; (8002cb4 <startRecordSequence+0x114>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d124      	bne.n	8002ca0 <startRecordSequence+0x100>
	  writeEEPROM(averageHighestFreqs, EEPROM_DEFAULT_RECORDS_AUDIO_ADDRESS, sizeof(averageHighestFreqs));
 8002c56:	2300      	movs	r3, #0
 8002c58:	2214      	movs	r2, #20
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4814      	ldr	r0, [pc, #80]	; (8002cb0 <startRecordSequence+0x110>)
 8002c5e:	f000 fa7f 	bl	8003160 <writeEEPROM>
	  HAL_Delay(500);
 8002c62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c66:	f000 fe1d 	bl	80038a4 <HAL_Delay>
	  // Increment when write to EEPROM return successfully
	  readEEPROM(recordsAudioCount, EEPROM_RECORDS_COUNT_ADDRESS, sizeof(recordsAudioCount));
 8002c6a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002c6e:	2201      	movs	r2, #1
 8002c70:	4619      	mov	r1, r3
 8002c72:	4812      	ldr	r0, [pc, #72]	; (8002cbc <startRecordSequence+0x11c>)
 8002c74:	f000 fad6 	bl	8003224 <readEEPROM>
	  HAL_Delay(500);
 8002c78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c7c:	f000 fe12 	bl	80038a4 <HAL_Delay>
	  recordsAudioCount[0]++;
 8002c80:	4b0e      	ldr	r3, [pc, #56]	; (8002cbc <startRecordSequence+0x11c>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	3301      	adds	r3, #1
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	4b0c      	ldr	r3, [pc, #48]	; (8002cbc <startRecordSequence+0x11c>)
 8002c8a:	701a      	strb	r2, [r3, #0]
	  writeEEPROM(recordsAudioCount, EEPROM_RECORDS_COUNT_ADDRESS, sizeof(recordsAudioCount));
 8002c8c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002c90:	2201      	movs	r2, #1
 8002c92:	4619      	mov	r1, r3
 8002c94:	4809      	ldr	r0, [pc, #36]	; (8002cbc <startRecordSequence+0x11c>)
 8002c96:	f000 fa63 	bl	8003160 <writeEEPROM>
	  flags.recordButton = 0;
 8002c9a:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <startRecordSequence+0x120>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	705a      	strb	r2, [r3, #1]
	}
}
 8002ca0:	bf00      	nop
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40020800 	.word	0x40020800
 8002cac:	20001915 	.word	0x20001915
 8002cb0:	200018f8 	.word	0x200018f8
 8002cb4:	20002920 	.word	0x20002920
 8002cb8:	20000000 	.word	0x20000000
 8002cbc:	20001918 	.word	0x20001918
 8002cc0:	20000090 	.word	0x20000090

08002cc4 <setLedSuccess>:

void setLedSuccess(){
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
	uint16_t delayTime = 500;
 8002cca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002cce:	80fb      	strh	r3, [r7, #6]
	for(uint8_t i = 0; i < 10; i++){
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	717b      	strb	r3, [r7, #5]
 8002cd4:	e024      	b.n	8002d20 <setLedSuccess+0x5c>
		HAL_GPIO_WritePin(RECORD_STATE_GPIO_Port, RECORD_STATE_Pin, GPIO_PIN_SET);
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cdc:	4816      	ldr	r0, [pc, #88]	; (8002d38 <setLedSuccess+0x74>)
 8002cde:	f001 fc9d 	bl	800461c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_MIC_STATE_GPIO_Port, LED_MIC_STATE_Pin, GPIO_PIN_SET);
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ce8:	4813      	ldr	r0, [pc, #76]	; (8002d38 <setLedSuccess+0x74>)
 8002cea:	f001 fc97 	bl	800461c <HAL_GPIO_WritePin>
		HAL_Delay(delayTime);
 8002cee:	88fb      	ldrh	r3, [r7, #6]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f000 fdd7 	bl	80038a4 <HAL_Delay>
		HAL_GPIO_WritePin(RECORD_STATE_GPIO_Port, RECORD_STATE_Pin, GPIO_PIN_RESET);
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cfc:	480e      	ldr	r0, [pc, #56]	; (8002d38 <setLedSuccess+0x74>)
 8002cfe:	f001 fc8d 	bl	800461c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_MIC_STATE_GPIO_Port, LED_MIC_STATE_Pin, GPIO_PIN_RESET);
 8002d02:	2200      	movs	r2, #0
 8002d04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d08:	480b      	ldr	r0, [pc, #44]	; (8002d38 <setLedSuccess+0x74>)
 8002d0a:	f001 fc87 	bl	800461c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8002d0e:	2064      	movs	r0, #100	; 0x64
 8002d10:	f000 fdc8 	bl	80038a4 <HAL_Delay>
		delayTime -= 50;
 8002d14:	88fb      	ldrh	r3, [r7, #6]
 8002d16:	3b32      	subs	r3, #50	; 0x32
 8002d18:	80fb      	strh	r3, [r7, #6]
	for(uint8_t i = 0; i < 10; i++){
 8002d1a:	797b      	ldrb	r3, [r7, #5]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	717b      	strb	r3, [r7, #5]
 8002d20:	797b      	ldrb	r3, [r7, #5]
 8002d22:	2b09      	cmp	r3, #9
 8002d24:	d9d7      	bls.n	8002cd6 <setLedSuccess+0x12>
	}
	HAL_Delay(1000);
 8002d26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d2a:	f000 fdbb 	bl	80038a4 <HAL_Delay>

}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40020800 	.word	0x40020800

08002d3c <startVoiceRecognition>:

void startVoiceRecognition(){
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
	uint8_t keyMatches = 0, totalKey = 0, freqIndex = 0,
 8002d42:	2300      	movs	r3, #0
 8002d44:	73fb      	strb	r3, [r7, #15]
 8002d46:	2300      	movs	r3, #0
 8002d48:	73bb      	strb	r3, [r7, #14]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	713b      	strb	r3, [r7, #4]
			previousMatchPercent = 1, currentMatchPercent = 0, prevHighestMagni = 0,
 8002d4e:	2301      	movs	r3, #1
 8002d50:	737b      	strb	r3, [r7, #13]
 8002d52:	2300      	movs	r3, #0
 8002d54:	70fb      	strb	r3, [r7, #3]
 8002d56:	2300      	movs	r3, #0
 8002d58:	733b      	strb	r3, [r7, #12]
			indexHighestMagni = 0, indexHighestEEPROMMagni = 0, prevHighestEEPROMMagni = 0,
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	72fb      	strb	r3, [r7, #11]
 8002d5e:	2300      	movs	r3, #0
 8002d60:	72bb      	strb	r3, [r7, #10]
 8002d62:	2300      	movs	r3, #0
 8002d64:	727b      	strb	r3, [r7, #9]
			totalStored = 0, status;
 8002d66:	2300      	movs	r3, #0
 8002d68:	723b      	strb	r3, [r7, #8]

	flags.voiceControl = 0;
 8002d6a:	4b61      	ldr	r3, [pc, #388]	; (8002ef0 <startVoiceRecognition+0x1b4>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	711a      	strb	r2, [r3, #4]

	// Clear previous recorded/processed arrays
	for(uint16_t i = 0; i < MAX_FREQ_AND_GAIN; i++){
 8002d70:	2300      	movs	r3, #0
 8002d72:	80fb      	strh	r3, [r7, #6]
 8002d74:	e006      	b.n	8002d84 <startVoiceRecognition+0x48>
	  averageHighestFreqs[i] = 0;
 8002d76:	88fb      	ldrh	r3, [r7, #6]
 8002d78:	4a5e      	ldr	r2, [pc, #376]	; (8002ef4 <startVoiceRecognition+0x1b8>)
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < MAX_FREQ_AND_GAIN; i++){
 8002d7e:	88fb      	ldrh	r3, [r7, #6]
 8002d80:	3301      	adds	r3, #1
 8002d82:	80fb      	strh	r3, [r7, #6]
 8002d84:	88fb      	ldrh	r3, [r7, #6]
 8002d86:	2b13      	cmp	r3, #19
 8002d88:	d9f5      	bls.n	8002d76 <startVoiceRecognition+0x3a>
	}

	isA = 0;
 8002d8a:	4b5b      	ldr	r3, [pc, #364]	; (8002ef8 <startVoiceRecognition+0x1bc>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	701a      	strb	r2, [r3, #0]
	isO = 0;
 8002d90:	4b5a      	ldr	r3, [pc, #360]	; (8002efc <startVoiceRecognition+0x1c0>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	701a      	strb	r2, [r3, #0]

	// store record counts to recordsAudioCount[]
	status = readEEPROM(recordsAudioCount, EEPROM_RECORDS_COUNT_ADDRESS, sizeof(recordsAudioCount));
 8002d96:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4858      	ldr	r0, [pc, #352]	; (8002f00 <startVoiceRecognition+0x1c4>)
 8002da0:	f000 fa40 	bl	8003224 <readEEPROM>
 8002da4:	4603      	mov	r3, r0
 8002da6:	70bb      	strb	r3, [r7, #2]
	HAL_Delay(100);
 8002da8:	2064      	movs	r0, #100	; 0x64
 8002daa:	f000 fd7b 	bl	80038a4 <HAL_Delay>
	if(status != HAL_OK) return;
 8002dae:	78bb      	ldrb	r3, [r7, #2]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f040 8096 	bne.w	8002ee2 <startVoiceRecognition+0x1a6>

	totalStored = recordsAudioCount[0];
 8002db6:	4b52      	ldr	r3, [pc, #328]	; (8002f00 <startVoiceRecognition+0x1c4>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	723b      	strb	r3, [r7, #8]

	if(totalStored <= 0) return;
 8002dbc:	7a3b      	ldrb	r3, [r7, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 8091 	beq.w	8002ee6 <startVoiceRecognition+0x1aa>


	while(totalStored > 0){
 8002dc4:	e078      	b.n	8002eb8 <startVoiceRecognition+0x17c>
		// decrement recordsAudioCount so that readEEPROM can calc the
		// correct address
		totalStored--;
 8002dc6:	7a3b      	ldrb	r3, [r7, #8]
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	723b      	strb	r3, [r7, #8]
		recordsAudioCount[0] = totalStored;
 8002dcc:	4a4c      	ldr	r2, [pc, #304]	; (8002f00 <startVoiceRecognition+0x1c4>)
 8002dce:	7a3b      	ldrb	r3, [r7, #8]
 8002dd0:	7013      	strb	r3, [r2, #0]

		// store keys to averageHighestFreqs[]
		readEEPROM(averageHighestFreqs, EEPROM_DEFAULT_RECORDS_AUDIO_ADDRESS, sizeof(averageHighestFreqs));
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	2214      	movs	r2, #20
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4846      	ldr	r0, [pc, #280]	; (8002ef4 <startVoiceRecognition+0x1b8>)
 8002dda:	f000 fa23 	bl	8003224 <readEEPROM>
		HAL_Delay(100);
 8002dde:	2064      	movs	r0, #100	; 0x64
 8002de0:	f000 fd60 	bl	80038a4 <HAL_Delay>

		keyMatches = 0;
 8002de4:	2300      	movs	r3, #0
 8002de6:	73fb      	strb	r3, [r7, #15]
		freqIndex = 0;
 8002de8:	2300      	movs	r3, #0
 8002dea:	713b      	strb	r3, [r7, #4]
		totalKey = 0;
 8002dec:	2300      	movs	r3, #0
 8002dee:	73bb      	strb	r3, [r7, #14]

		for(uint8_t avgIndex = 0; avgIndex < MAX_FREQ_AND_GAIN; avgIndex += 2){
 8002df0:	2300      	movs	r3, #0
 8002df2:	717b      	strb	r3, [r7, #5]
 8002df4:	e031      	b.n	8002e5a <startVoiceRecognition+0x11e>
			freqIndex = averageHighestFreqs[avgIndex];
 8002df6:	797b      	ldrb	r3, [r7, #5]
 8002df8:	4a3e      	ldr	r2, [pc, #248]	; (8002ef4 <startVoiceRecognition+0x1b8>)
 8002dfa:	5cd3      	ldrb	r3, [r2, r3]
 8002dfc:	713b      	strb	r3, [r7, #4]

			if(freqIndex == 0 && (freqIndex + 1) == 0) break;
			if(storedFreqs[0][freqIndex] > 0) {
 8002dfe:	793b      	ldrb	r3, [r7, #4]
 8002e00:	4a40      	ldr	r2, [pc, #256]	; (8002f04 <startVoiceRecognition+0x1c8>)
 8002e02:	5cd3      	ldrb	r3, [r2, r3]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d011      	beq.n	8002e2c <startVoiceRecognition+0xf0>

				if(storedFreqs[0][freqIndex] > prevHighestMagni && freqIndex != 0) {
 8002e08:	793b      	ldrb	r3, [r7, #4]
 8002e0a:	4a3e      	ldr	r2, [pc, #248]	; (8002f04 <startVoiceRecognition+0x1c8>)
 8002e0c:	5cd3      	ldrb	r3, [r2, r3]
 8002e0e:	7b3a      	ldrb	r2, [r7, #12]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d208      	bcs.n	8002e26 <startVoiceRecognition+0xea>
 8002e14:	793b      	ldrb	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d005      	beq.n	8002e26 <startVoiceRecognition+0xea>
					prevHighestMagni = storedFreqs[0][freqIndex];
 8002e1a:	793b      	ldrb	r3, [r7, #4]
 8002e1c:	4a39      	ldr	r2, [pc, #228]	; (8002f04 <startVoiceRecognition+0x1c8>)
 8002e1e:	5cd3      	ldrb	r3, [r2, r3]
 8002e20:	733b      	strb	r3, [r7, #12]
					indexHighestMagni = freqIndex;
 8002e22:	793b      	ldrb	r3, [r7, #4]
 8002e24:	72fb      	strb	r3, [r7, #11]
				}

				keyMatches++;
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	73fb      	strb	r3, [r7, #15]
			}

			if(averageHighestFreqs[avgIndex + 1] > prevHighestEEPROMMagni && avgIndex != 0) {
 8002e2c:	797b      	ldrb	r3, [r7, #5]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	4a30      	ldr	r2, [pc, #192]	; (8002ef4 <startVoiceRecognition+0x1b8>)
 8002e32:	5cd3      	ldrb	r3, [r2, r3]
 8002e34:	7a7a      	ldrb	r2, [r7, #9]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d209      	bcs.n	8002e4e <startVoiceRecognition+0x112>
 8002e3a:	797b      	ldrb	r3, [r7, #5]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d006      	beq.n	8002e4e <startVoiceRecognition+0x112>
				prevHighestEEPROMMagni = averageHighestFreqs[avgIndex + 1];
 8002e40:	797b      	ldrb	r3, [r7, #5]
 8002e42:	3301      	adds	r3, #1
 8002e44:	4a2b      	ldr	r2, [pc, #172]	; (8002ef4 <startVoiceRecognition+0x1b8>)
 8002e46:	5cd3      	ldrb	r3, [r2, r3]
 8002e48:	727b      	strb	r3, [r7, #9]
				indexHighestEEPROMMagni = freqIndex;
 8002e4a:	793b      	ldrb	r3, [r7, #4]
 8002e4c:	72bb      	strb	r3, [r7, #10]
			}

			totalKey++;
 8002e4e:	7bbb      	ldrb	r3, [r7, #14]
 8002e50:	3301      	adds	r3, #1
 8002e52:	73bb      	strb	r3, [r7, #14]
		for(uint8_t avgIndex = 0; avgIndex < MAX_FREQ_AND_GAIN; avgIndex += 2){
 8002e54:	797b      	ldrb	r3, [r7, #5]
 8002e56:	3302      	adds	r3, #2
 8002e58:	717b      	strb	r3, [r7, #5]
 8002e5a:	797b      	ldrb	r3, [r7, #5]
 8002e5c:	2b13      	cmp	r3, #19
 8002e5e:	d9ca      	bls.n	8002df6 <startVoiceRecognition+0xba>
		}

		readBefore = indexHighestEEPROMMagni;
 8002e60:	4a29      	ldr	r2, [pc, #164]	; (8002f08 <startVoiceRecognition+0x1cc>)
 8002e62:	7abb      	ldrb	r3, [r7, #10]
 8002e64:	7013      	strb	r3, [r2, #0]
		readAfter = indexHighestMagni;
 8002e66:	4a29      	ldr	r2, [pc, #164]	; (8002f0c <startVoiceRecognition+0x1d0>)
 8002e68:	7afb      	ldrb	r3, [r7, #11]
 8002e6a:	7013      	strb	r3, [r2, #0]

		currentMatchPercent = 100 * keyMatches / totalKey;
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
 8002e6e:	2264      	movs	r2, #100	; 0x64
 8002e70:	fb03 f202 	mul.w	r2, r3, r2
 8002e74:	7bbb      	ldrb	r3, [r7, #14]
 8002e76:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e7a:	70fb      	strb	r3, [r7, #3]
		if(currentMatchPercent > previousMatchPercent
 8002e7c:	78fa      	ldrb	r2, [r7, #3]
 8002e7e:	7b7b      	ldrb	r3, [r7, #13]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d915      	bls.n	8002eb0 <startVoiceRecognition+0x174>
				&& currentMatchPercent >= 60
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	2b3b      	cmp	r3, #59	; 0x3b
 8002e88:	d912      	bls.n	8002eb0 <startVoiceRecognition+0x174>
				&& indexHighestEEPROMMagni == indexHighestMagni) {
 8002e8a:	7aba      	ldrb	r2, [r7, #10]
 8002e8c:	7afb      	ldrb	r3, [r7, #11]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d10e      	bne.n	8002eb0 <startVoiceRecognition+0x174>
			previousMatchPercent = currentMatchPercent;
 8002e92:	78fb      	ldrb	r3, [r7, #3]
 8002e94:	737b      	strb	r3, [r7, #13]
			if(totalStored == 0) isA = 1;
 8002e96:	7a3b      	ldrb	r3, [r7, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d103      	bne.n	8002ea4 <startVoiceRecognition+0x168>
 8002e9c:	4b16      	ldr	r3, [pc, #88]	; (8002ef8 <startVoiceRecognition+0x1bc>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	701a      	strb	r2, [r3, #0]
 8002ea2:	e005      	b.n	8002eb0 <startVoiceRecognition+0x174>
			else if(totalStored == 1) isO = 1;
 8002ea4:	7a3b      	ldrb	r3, [r7, #8]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d102      	bne.n	8002eb0 <startVoiceRecognition+0x174>
 8002eaa:	4b14      	ldr	r3, [pc, #80]	; (8002efc <startVoiceRecognition+0x1c0>)
 8002eac:	2201      	movs	r2, #1
 8002eae:	701a      	strb	r2, [r3, #0]
		}

		prevHighestEEPROMMagni = 0;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	727b      	strb	r3, [r7, #9]
		prevHighestMagni = 0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	733b      	strb	r3, [r7, #12]
	while(totalStored > 0){
 8002eb8:	7a3b      	ldrb	r3, [r7, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d183      	bne.n	8002dc6 <startVoiceRecognition+0x8a>
	}

	if(previousMatchPercent >= 80) setLedSuccess();
 8002ebe:	7b7b      	ldrb	r3, [r7, #13]
 8002ec0:	2b4f      	cmp	r3, #79	; 0x4f
 8002ec2:	d901      	bls.n	8002ec8 <startVoiceRecognition+0x18c>
 8002ec4:	f7ff fefe 	bl	8002cc4 <setLedSuccess>
	HAL_GPIO_WritePin(RECORD_STATE_GPIO_Port, RECORD_STATE_Pin, GPIO_PIN_RESET);
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ece:	4810      	ldr	r0, [pc, #64]	; (8002f10 <startVoiceRecognition+0x1d4>)
 8002ed0:	f001 fba4 	bl	800461c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_MIC_STATE_GPIO_Port, LED_MIC_STATE_Pin, GPIO_PIN_RESET);
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002eda:	480d      	ldr	r0, [pc, #52]	; (8002f10 <startVoiceRecognition+0x1d4>)
 8002edc:	f001 fb9e 	bl	800461c <HAL_GPIO_WritePin>
 8002ee0:	e002      	b.n	8002ee8 <startVoiceRecognition+0x1ac>
	if(status != HAL_OK) return;
 8002ee2:	bf00      	nop
 8002ee4:	e000      	b.n	8002ee8 <startVoiceRecognition+0x1ac>
	if(totalStored <= 0) return;
 8002ee6:	bf00      	nop

}
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	20000090 	.word	0x20000090
 8002ef4:	200018f8 	.word	0x200018f8
 8002ef8:	20002921 	.word	0x20002921
 8002efc:	20002922 	.word	0x20002922
 8002f00:	20001918 	.word	0x20001918
 8002f04:	200017f8 	.word	0x200017f8
 8002f08:	20002924 	.word	0x20002924
 8002f0c:	20002923 	.word	0x20002923
 8002f10:	40020800 	.word	0x40020800

08002f14 <processDataUART>:
	}

	return totalValidKeys;
}

void processDataUART(){
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af02      	add	r7, sp, #8
	uint8_t rxDataUART;
	flags.dataReceivedUART = 0;
 8002f1a:	4b55      	ldr	r3, [pc, #340]	; (8003070 <processDataUART+0x15c>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	715a      	strb	r2, [r3, #5]

	rxDataUART = rxData[0];
 8002f20:	4b54      	ldr	r3, [pc, #336]	; (8003074 <processDataUART+0x160>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	71fb      	strb	r3, [r7, #7]

	if(rxDataUART == RESET_RECORDS_COUNT) {
 8002f26:	79fb      	ldrb	r3, [r7, #7]
 8002f28:	2b37      	cmp	r3, #55	; 0x37
 8002f2a:	d10a      	bne.n	8002f42 <processDataUART+0x2e>
		recordsAudioCount[0] = 0;
 8002f2c:	4b52      	ldr	r3, [pc, #328]	; (8003078 <processDataUART+0x164>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	701a      	strb	r2, [r3, #0]
		writeEEPROM(recordsAudioCount, EEPROM_RECORDS_COUNT_ADDRESS, sizeof(recordsAudioCount));
 8002f32:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002f36:	2201      	movs	r2, #1
 8002f38:	4619      	mov	r1, r3
 8002f3a:	484f      	ldr	r0, [pc, #316]	; (8003078 <processDataUART+0x164>)
 8002f3c:	f000 f910 	bl	8003160 <writeEEPROM>
 8002f40:	e08c      	b.n	800305c <processDataUART+0x148>
	} else if(rxDataUART == START_RECORD) {
 8002f42:	79fb      	ldrb	r3, [r7, #7]
 8002f44:	2b38      	cmp	r3, #56	; 0x38
 8002f46:	d106      	bne.n	8002f56 <processDataUART+0x42>
		rxDataTemp[0] = START_VOICE_FFT;
 8002f48:	4b4c      	ldr	r3, [pc, #304]	; (800307c <processDataUART+0x168>)
 8002f4a:	2239      	movs	r2, #57	; 0x39
 8002f4c:	701a      	strb	r2, [r3, #0]
		flags.recordButton = 1;
 8002f4e:	4b48      	ldr	r3, [pc, #288]	; (8003070 <processDataUART+0x15c>)
 8002f50:	2201      	movs	r2, #1
 8002f52:	705a      	strb	r2, [r3, #1]
 8002f54:	e082      	b.n	800305c <processDataUART+0x148>
	} else if(rxDataUART == START_VOICE_FFT){
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	2b39      	cmp	r3, #57	; 0x39
 8002f5a:	d106      	bne.n	8002f6a <processDataUART+0x56>
		rxDataTemp[0] = START_VOICE_FFT;
 8002f5c:	4b47      	ldr	r3, [pc, #284]	; (800307c <processDataUART+0x168>)
 8002f5e:	2239      	movs	r2, #57	; 0x39
 8002f60:	701a      	strb	r2, [r3, #0]
		flags.audioButton = 1;
 8002f62:	4b43      	ldr	r3, [pc, #268]	; (8003070 <processDataUART+0x15c>)
 8002f64:	2201      	movs	r2, #1
 8002f66:	701a      	strb	r2, [r3, #0]
 8002f68:	e078      	b.n	800305c <processDataUART+0x148>
	} else if(rxDataUART == TRANSMIT_TOTAL_RECORDS_COUNT){
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	2b36      	cmp	r3, #54	; 0x36
 8002f6e:	d111      	bne.n	8002f94 <processDataUART+0x80>
		readEEPROM(recordsAudioCount, EEPROM_RECORDS_COUNT_ADDRESS, sizeof(recordsAudioCount));
 8002f70:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002f74:	2201      	movs	r2, #1
 8002f76:	4619      	mov	r1, r3
 8002f78:	483f      	ldr	r0, [pc, #252]	; (8003078 <processDataUART+0x164>)
 8002f7a:	f000 f953 	bl	8003224 <readEEPROM>
		HAL_Delay(100);
 8002f7e:	2064      	movs	r0, #100	; 0x64
 8002f80:	f000 fc90 	bl	80038a4 <HAL_Delay>
		HAL_UART_Transmit(&huart1, recordsAudioCount, 1, 1000);
 8002f84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f88:	2201      	movs	r2, #1
 8002f8a:	493b      	ldr	r1, [pc, #236]	; (8003078 <processDataUART+0x164>)
 8002f8c:	483c      	ldr	r0, [pc, #240]	; (8003080 <processDataUART+0x16c>)
 8002f8e:	f005 f90e 	bl	80081ae <HAL_UART_Transmit>
 8002f92:	e063      	b.n	800305c <processDataUART+0x148>
	} else if(rxDataUART == START_VOICE_FFT_DCT){
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	2b3a      	cmp	r3, #58	; 0x3a
 8002f98:	d106      	bne.n	8002fa8 <processDataUART+0x94>
		flags.audioButton = 1;
 8002f9a:	4b35      	ldr	r3, [pc, #212]	; (8003070 <processDataUART+0x15c>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	701a      	strb	r2, [r3, #0]
		rxDataTemp[0] = START_VOICE_FFT_DCT;
 8002fa0:	4b36      	ldr	r3, [pc, #216]	; (800307c <processDataUART+0x168>)
 8002fa2:	223a      	movs	r2, #58	; 0x3a
 8002fa4:	701a      	strb	r2, [r3, #0]
 8002fa6:	e059      	b.n	800305c <processDataUART+0x148>
	} else if(rxDataUART == VOICE_MOVE_FORWARD){
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	2b3b      	cmp	r3, #59	; 0x3b
 8002fac:	d103      	bne.n	8002fb6 <processDataUART+0xa2>
		voiceMoveCommand(VOICE_MOVE_FORWARD);
 8002fae:	203b      	movs	r0, #59	; 0x3b
 8002fb0:	f000 f868 	bl	8003084 <voiceMoveCommand>
 8002fb4:	e052      	b.n	800305c <processDataUART+0x148>
	} else if(rxDataUART == VOICE_MOVE_BACKWARD){
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	2b3c      	cmp	r3, #60	; 0x3c
 8002fba:	d103      	bne.n	8002fc4 <processDataUART+0xb0>
		voiceMoveCommand(VOICE_MOVE_BACKWARD);
 8002fbc:	203c      	movs	r0, #60	; 0x3c
 8002fbe:	f000 f861 	bl	8003084 <voiceMoveCommand>
 8002fc2:	e04b      	b.n	800305c <processDataUART+0x148>
	} else if(rxDataUART == VOICE_MOVE_TURN){
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	2b3d      	cmp	r3, #61	; 0x3d
 8002fc8:	d103      	bne.n	8002fd2 <processDataUART+0xbe>
		voiceMoveCommand(VOICE_MOVE_TURN);
 8002fca:	203d      	movs	r0, #61	; 0x3d
 8002fcc:	f000 f85a 	bl	8003084 <voiceMoveCommand>
 8002fd0:	e044      	b.n	800305c <processDataUART+0x148>
	} else if(rxDataUART == MOVE_STOP){
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	2b35      	cmp	r3, #53	; 0x35
 8002fd6:	d108      	bne.n	8002fea <processDataUART+0xd6>
		setCarDirections(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, 0);
 8002fd8:	2300      	movs	r3, #0
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	2300      	movs	r3, #0
 8002fde:	2200      	movs	r2, #0
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	2000      	movs	r0, #0
 8002fe4:	f000 f884 	bl	80030f0 <setCarDirections>
 8002fe8:	e038      	b.n	800305c <processDataUART+0x148>
	} else if(rxDataUART <= MOVE_FORWARD){
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	2b33      	cmp	r3, #51	; 0x33
 8002fee:	d80c      	bhi.n	800300a <processDataUART+0xf6>
		setCarDirections(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, rxDataUART * 5);
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	0092      	lsls	r2, r2, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	2201      	movs	r2, #1
 8003000:	2100      	movs	r1, #0
 8003002:	2001      	movs	r0, #1
 8003004:	f000 f874 	bl	80030f0 <setCarDirections>
 8003008:	e028      	b.n	800305c <processDataUART+0x148>
	} else if(rxDataUART <= MOVE_BACKWARD){
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	2b73      	cmp	r3, #115	; 0x73
 800300e:	d80e      	bhi.n	800302e <processDataUART+0x11a>
		setCarDirections(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, (rxDataUART - 64) * 5);
 8003010:	79fb      	ldrb	r3, [r7, #7]
 8003012:	461a      	mov	r2, r3
 8003014:	0092      	lsls	r2, r2, #2
 8003016:	4413      	add	r3, r2
 8003018:	b2db      	uxtb	r3, r3
 800301a:	3b40      	subs	r3, #64	; 0x40
 800301c:	b2db      	uxtb	r3, r3
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	2301      	movs	r3, #1
 8003022:	2200      	movs	r2, #0
 8003024:	2101      	movs	r1, #1
 8003026:	2000      	movs	r0, #0
 8003028:	f000 f862 	bl	80030f0 <setCarDirections>
 800302c:	e016      	b.n	800305c <processDataUART+0x148>
	} else if(rxDataUART <= MOVE_RIGHT){
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	2bb4      	cmp	r3, #180	; 0xb4
 8003032:	d808      	bhi.n	8003046 <processDataUART+0x132>
		setCarDirections(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, 110);
 8003034:	236e      	movs	r3, #110	; 0x6e
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	2301      	movs	r3, #1
 800303a:	2200      	movs	r2, #0
 800303c:	2100      	movs	r1, #0
 800303e:	2001      	movs	r0, #1
 8003040:	f000 f856 	bl	80030f0 <setCarDirections>
 8003044:	e00a      	b.n	800305c <processDataUART+0x148>
	} else if(rxDataUART <= MOVE_LEFT){
 8003046:	79fb      	ldrb	r3, [r7, #7]
 8003048:	2bf4      	cmp	r3, #244	; 0xf4
 800304a:	d807      	bhi.n	800305c <processDataUART+0x148>
		setCarDirections(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, 110);
 800304c:	236e      	movs	r3, #110	; 0x6e
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	2300      	movs	r3, #0
 8003052:	2201      	movs	r2, #1
 8003054:	2101      	movs	r1, #1
 8003056:	2000      	movs	r0, #0
 8003058:	f000 f84a 	bl	80030f0 <setCarDirections>
	}
	// Enable UART receive interrupt again
	HAL_UART_Receive_IT(&huart1, (uint8_t *) rxData, 1);
 800305c:	2201      	movs	r2, #1
 800305e:	4905      	ldr	r1, [pc, #20]	; (8003074 <processDataUART+0x160>)
 8003060:	4807      	ldr	r0, [pc, #28]	; (8003080 <processDataUART+0x16c>)
 8003062:	f005 f936 	bl	80082d2 <HAL_UART_Receive_IT>
}
 8003066:	bf00      	nop
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	20000090 	.word	0x20000090
 8003074:	20001910 	.word	0x20001910
 8003078:	20001918 	.word	0x20001918
 800307c:	20001914 	.word	0x20001914
 8003080:	20000224 	.word	0x20000224

08003084 <voiceMoveCommand>:

void voiceMoveCommand(uint8_t command){
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af02      	add	r7, sp, #8
 800308a:	4603      	mov	r3, r0
 800308c:	71fb      	strb	r3, [r7, #7]
	if(command == VOICE_MOVE_FORWARD){
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	2b3b      	cmp	r3, #59	; 0x3b
 8003092:	d108      	bne.n	80030a6 <voiceMoveCommand+0x22>
		setCarDirections(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, 110);
 8003094:	236e      	movs	r3, #110	; 0x6e
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	2300      	movs	r3, #0
 800309a:	2201      	movs	r2, #1
 800309c:	2100      	movs	r1, #0
 800309e:	2001      	movs	r0, #1
 80030a0:	f000 f826 	bl	80030f0 <setCarDirections>
 80030a4:	e013      	b.n	80030ce <voiceMoveCommand+0x4a>
	} else if(command == VOICE_MOVE_BACKWARD){
 80030a6:	79fb      	ldrb	r3, [r7, #7]
 80030a8:	2b3c      	cmp	r3, #60	; 0x3c
 80030aa:	d108      	bne.n	80030be <voiceMoveCommand+0x3a>
		setCarDirections(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, 110);
 80030ac:	236e      	movs	r3, #110	; 0x6e
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	2301      	movs	r3, #1
 80030b2:	2200      	movs	r2, #0
 80030b4:	2101      	movs	r1, #1
 80030b6:	2000      	movs	r0, #0
 80030b8:	f000 f81a 	bl	80030f0 <setCarDirections>
 80030bc:	e007      	b.n	80030ce <voiceMoveCommand+0x4a>
	} else {
		setCarDirections(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, 110);
 80030be:	236e      	movs	r3, #110	; 0x6e
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	2301      	movs	r3, #1
 80030c4:	2200      	movs	r2, #0
 80030c6:	2100      	movs	r1, #0
 80030c8:	2001      	movs	r0, #1
 80030ca:	f000 f811 	bl	80030f0 <setCarDirections>
	}

	HAL_Delay(1500);
 80030ce:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80030d2:	f000 fbe7 	bl	80038a4 <HAL_Delay>

	// turn off car after 1500ms
	setCarDirections(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, 0);
 80030d6:	2300      	movs	r3, #0
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	2300      	movs	r3, #0
 80030dc:	2200      	movs	r2, #0
 80030de:	2100      	movs	r1, #0
 80030e0:	2000      	movs	r0, #0
 80030e2:	f000 f805 	bl	80030f0 <setCarDirections>
}
 80030e6:	bf00      	nop
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
	...

080030f0 <setCarDirections>:

void setCarDirections(uint8_t dirState1, uint8_t dirState2, uint8_t dirState3, uint8_t dirState4, uint8_t speed){
 80030f0:	b590      	push	{r4, r7, lr}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4604      	mov	r4, r0
 80030f8:	4608      	mov	r0, r1
 80030fa:	4611      	mov	r1, r2
 80030fc:	461a      	mov	r2, r3
 80030fe:	4623      	mov	r3, r4
 8003100:	71fb      	strb	r3, [r7, #7]
 8003102:	4603      	mov	r3, r0
 8003104:	71bb      	strb	r3, [r7, #6]
 8003106:	460b      	mov	r3, r1
 8003108:	717b      	strb	r3, [r7, #5]
 800310a:	4613      	mov	r3, r2
 800310c:	713b      	strb	r3, [r7, #4]
	HAL_GPIO_WritePin(CAR_DIR_1_GPIO_Port, CAR_DIR_1_Pin, dirState1);
 800310e:	79fb      	ldrb	r3, [r7, #7]
 8003110:	461a      	mov	r2, r3
 8003112:	2108      	movs	r1, #8
 8003114:	4810      	ldr	r0, [pc, #64]	; (8003158 <setCarDirections+0x68>)
 8003116:	f001 fa81 	bl	800461c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CAR_DIR_2_GPIO_Port, CAR_DIR_2_Pin, dirState2);
 800311a:	79bb      	ldrb	r3, [r7, #6]
 800311c:	461a      	mov	r2, r3
 800311e:	2110      	movs	r1, #16
 8003120:	480d      	ldr	r0, [pc, #52]	; (8003158 <setCarDirections+0x68>)
 8003122:	f001 fa7b 	bl	800461c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CAR_DIR_3_GPIO_Port, CAR_DIR_3_Pin, dirState3);
 8003126:	797b      	ldrb	r3, [r7, #5]
 8003128:	461a      	mov	r2, r3
 800312a:	2120      	movs	r1, #32
 800312c:	480a      	ldr	r0, [pc, #40]	; (8003158 <setCarDirections+0x68>)
 800312e:	f001 fa75 	bl	800461c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CAR_DIR_4_GPIO_Port, CAR_DIR_4_Pin, dirState4);
 8003132:	793b      	ldrb	r3, [r7, #4]
 8003134:	461a      	mov	r2, r3
 8003136:	2140      	movs	r1, #64	; 0x40
 8003138:	4807      	ldr	r0, [pc, #28]	; (8003158 <setCarDirections+0x68>)
 800313a:	f001 fa6f 	bl	800461c <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);
 800313e:	4b07      	ldr	r3, [pc, #28]	; (800315c <setCarDirections+0x6c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	7e3a      	ldrb	r2, [r7, #24]
 8003144:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, speed);
 8003146:	4b05      	ldr	r3, [pc, #20]	; (800315c <setCarDirections+0x6c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	7e3a      	ldrb	r2, [r7, #24]
 800314c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	bd90      	pop	{r4, r7, pc}
 8003156:	bf00      	nop
 8003158:	40020000 	.word	0x40020000
 800315c:	20000194 	.word	0x20000194

08003160 <writeEEPROM>:

uint8_t writeEEPROM(uint8_t *dataArray, uint16_t addressToWrite, uint16_t size){
 8003160:	b5b0      	push	{r4, r5, r7, lr}
 8003162:	b088      	sub	sp, #32
 8003164:	af04      	add	r7, sp, #16
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	807b      	strh	r3, [r7, #2]
 800316c:	4613      	mov	r3, r2
 800316e:	803b      	strh	r3, [r7, #0]
	uint8_t status;

	if(addressToWrite != EEPROM_RECORDS_COUNT_ADDRESS){
 8003170:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003174:	887b      	ldrh	r3, [r7, #2]
 8003176:	4293      	cmp	r3, r2
 8003178:	d038      	beq.n	80031ec <writeEEPROM+0x8c>
		status = readEEPROM(recordsAudioCount, EEPROM_RECORDS_COUNT_ADDRESS, sizeof(recordsAudioCount));
 800317a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800317e:	2201      	movs	r2, #1
 8003180:	4619      	mov	r1, r3
 8003182:	4824      	ldr	r0, [pc, #144]	; (8003214 <writeEEPROM+0xb4>)
 8003184:	f000 f84e 	bl	8003224 <readEEPROM>
 8003188:	4603      	mov	r3, r0
 800318a:	73fb      	strb	r3, [r7, #15]

		if(status == HAL_OK) addressToWrite = addressToWrite + EEPROM_NEXT_RECORD_ADDRESS * recordsAudioCount[0] + floor(recordsAudioCount[0] / 3 ) * 4;
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d12a      	bne.n	80031e8 <writeEEPROM+0x88>
 8003192:	887a      	ldrh	r2, [r7, #2]
 8003194:	2314      	movs	r3, #20
 8003196:	4619      	mov	r1, r3
 8003198:	4b1e      	ldr	r3, [pc, #120]	; (8003214 <writeEEPROM+0xb4>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	fb01 f303 	mul.w	r3, r1, r3
 80031a0:	4413      	add	r3, r2
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fd f96a 	bl	800047c <__aeabi_i2d>
 80031a8:	4604      	mov	r4, r0
 80031aa:	460d      	mov	r5, r1
 80031ac:	4b19      	ldr	r3, [pc, #100]	; (8003214 <writeEEPROM+0xb4>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	4a19      	ldr	r2, [pc, #100]	; (8003218 <writeEEPROM+0xb8>)
 80031b2:	fba2 2303 	umull	r2, r3, r2, r3
 80031b6:	085b      	lsrs	r3, r3, #1
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fd f95e 	bl	800047c <__aeabi_i2d>
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	4b15      	ldr	r3, [pc, #84]	; (800321c <writeEEPROM+0xbc>)
 80031c6:	f7fd f9c3 	bl	8000550 <__aeabi_dmul>
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	4620      	mov	r0, r4
 80031d0:	4629      	mov	r1, r5
 80031d2:	f7fd f807 	bl	80001e4 <__adddf3>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	4610      	mov	r0, r2
 80031dc:	4619      	mov	r1, r3
 80031de:	f7fd fc8f 	bl	8000b00 <__aeabi_d2uiz>
 80031e2:	4603      	mov	r3, r0
 80031e4:	807b      	strh	r3, [r7, #2]
 80031e6:	e001      	b.n	80031ec <writeEEPROM+0x8c>
		else return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e00f      	b.n	800320c <writeEEPROM+0xac>
	}

	status = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, addressToWrite, 2, dataArray, size, 1000);
 80031ec:	21a0      	movs	r1, #160	; 0xa0
 80031ee:	887a      	ldrh	r2, [r7, #2]
 80031f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031f4:	9302      	str	r3, [sp, #8]
 80031f6:	883b      	ldrh	r3, [r7, #0]
 80031f8:	9301      	str	r3, [sp, #4]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	2302      	movs	r3, #2
 8003200:	4807      	ldr	r0, [pc, #28]	; (8003220 <writeEEPROM+0xc0>)
 8003202:	f001 fb69 	bl	80048d8 <HAL_I2C_Mem_Write>
 8003206:	4603      	mov	r3, r0
 8003208:	73fb      	strb	r3, [r7, #15]
	return status;
 800320a:	7bfb      	ldrb	r3, [r7, #15]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bdb0      	pop	{r4, r5, r7, pc}
 8003214:	20001918 	.word	0x20001918
 8003218:	aaaaaaab 	.word	0xaaaaaaab
 800321c:	40100000 	.word	0x40100000
 8003220:	20000098 	.word	0x20000098

08003224 <readEEPROM>:

uint8_t readEEPROM(uint8_t *dataArray, uint16_t addressToRead, uint16_t size){
 8003224:	b5b0      	push	{r4, r5, r7, lr}
 8003226:	b088      	sub	sp, #32
 8003228:	af04      	add	r7, sp, #16
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	460b      	mov	r3, r1
 800322e:	807b      	strh	r3, [r7, #2]
 8003230:	4613      	mov	r3, r2
 8003232:	803b      	strh	r3, [r7, #0]
	uint8_t status;

	if(addressToRead != EEPROM_RECORDS_COUNT_ADDRESS){
 8003234:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003238:	887b      	ldrh	r3, [r7, #2]
 800323a:	4293      	cmp	r3, r2
 800323c:	d029      	beq.n	8003292 <readEEPROM+0x6e>
		addressToRead = addressToRead + EEPROM_NEXT_RECORD_ADDRESS * recordsAudioCount[0] + floor(recordsAudioCount[0] / 3 ) * 4;
 800323e:	887a      	ldrh	r2, [r7, #2]
 8003240:	2314      	movs	r3, #20
 8003242:	4619      	mov	r1, r3
 8003244:	4b1d      	ldr	r3, [pc, #116]	; (80032bc <readEEPROM+0x98>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	fb01 f303 	mul.w	r3, r1, r3
 800324c:	4413      	add	r3, r2
 800324e:	4618      	mov	r0, r3
 8003250:	f7fd f914 	bl	800047c <__aeabi_i2d>
 8003254:	4604      	mov	r4, r0
 8003256:	460d      	mov	r5, r1
 8003258:	4b18      	ldr	r3, [pc, #96]	; (80032bc <readEEPROM+0x98>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	4a18      	ldr	r2, [pc, #96]	; (80032c0 <readEEPROM+0x9c>)
 800325e:	fba2 2303 	umull	r2, r3, r2, r3
 8003262:	085b      	lsrs	r3, r3, #1
 8003264:	b2db      	uxtb	r3, r3
 8003266:	4618      	mov	r0, r3
 8003268:	f7fd f908 	bl	800047c <__aeabi_i2d>
 800326c:	f04f 0200 	mov.w	r2, #0
 8003270:	4b14      	ldr	r3, [pc, #80]	; (80032c4 <readEEPROM+0xa0>)
 8003272:	f7fd f96d 	bl	8000550 <__aeabi_dmul>
 8003276:	4602      	mov	r2, r0
 8003278:	460b      	mov	r3, r1
 800327a:	4620      	mov	r0, r4
 800327c:	4629      	mov	r1, r5
 800327e:	f7fc ffb1 	bl	80001e4 <__adddf3>
 8003282:	4602      	mov	r2, r0
 8003284:	460b      	mov	r3, r1
 8003286:	4610      	mov	r0, r2
 8003288:	4619      	mov	r1, r3
 800328a:	f7fd fc39 	bl	8000b00 <__aeabi_d2uiz>
 800328e:	4603      	mov	r3, r0
 8003290:	807b      	strh	r3, [r7, #2]
	}

	status = HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, addressToRead, 2, dataArray, size, 1000);
 8003292:	21a0      	movs	r1, #160	; 0xa0
 8003294:	887a      	ldrh	r2, [r7, #2]
 8003296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800329a:	9302      	str	r3, [sp, #8]
 800329c:	883b      	ldrh	r3, [r7, #0]
 800329e:	9301      	str	r3, [sp, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	2302      	movs	r3, #2
 80032a6:	4808      	ldr	r0, [pc, #32]	; (80032c8 <readEEPROM+0xa4>)
 80032a8:	f001 fc10 	bl	8004acc <HAL_I2C_Mem_Read>
 80032ac:	4603      	mov	r3, r0
 80032ae:	73fb      	strb	r3, [r7, #15]
	return status;
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bdb0      	pop	{r4, r5, r7, pc}
 80032ba:	bf00      	nop
 80032bc:	20001918 	.word	0x20001918
 80032c0:	aaaaaaab 	.word	0xaaaaaaab
 80032c4:	40100000 	.word	0x40100000
 80032c8:	20000098 	.word	0x20000098

080032cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032d0:	b672      	cpsid	i
}
 80032d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032d4:	e7fe      	b.n	80032d4 <Error_Handler+0x8>
	...

080032d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	607b      	str	r3, [r7, #4]
 80032e2:	4b10      	ldr	r3, [pc, #64]	; (8003324 <HAL_MspInit+0x4c>)
 80032e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e6:	4a0f      	ldr	r2, [pc, #60]	; (8003324 <HAL_MspInit+0x4c>)
 80032e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032ec:	6453      	str	r3, [r2, #68]	; 0x44
 80032ee:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <HAL_MspInit+0x4c>)
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032f6:	607b      	str	r3, [r7, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032fa:	2300      	movs	r3, #0
 80032fc:	603b      	str	r3, [r7, #0]
 80032fe:	4b09      	ldr	r3, [pc, #36]	; (8003324 <HAL_MspInit+0x4c>)
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	4a08      	ldr	r2, [pc, #32]	; (8003324 <HAL_MspInit+0x4c>)
 8003304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003308:	6413      	str	r3, [r2, #64]	; 0x40
 800330a:	4b06      	ldr	r3, [pc, #24]	; (8003324 <HAL_MspInit+0x4c>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40023800 	.word	0x40023800

08003328 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08a      	sub	sp, #40	; 0x28
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003330:	f107 0314 	add.w	r3, r7, #20
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	605a      	str	r2, [r3, #4]
 800333a:	609a      	str	r2, [r3, #8]
 800333c:	60da      	str	r2, [r3, #12]
 800333e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a19      	ldr	r2, [pc, #100]	; (80033ac <HAL_I2C_MspInit+0x84>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d12b      	bne.n	80033a2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800334a:	2300      	movs	r3, #0
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	4b18      	ldr	r3, [pc, #96]	; (80033b0 <HAL_I2C_MspInit+0x88>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	4a17      	ldr	r2, [pc, #92]	; (80033b0 <HAL_I2C_MspInit+0x88>)
 8003354:	f043 0302 	orr.w	r3, r3, #2
 8003358:	6313      	str	r3, [r2, #48]	; 0x30
 800335a:	4b15      	ldr	r3, [pc, #84]	; (80033b0 <HAL_I2C_MspInit+0x88>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	613b      	str	r3, [r7, #16]
 8003364:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003366:	23c0      	movs	r3, #192	; 0xc0
 8003368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800336a:	2312      	movs	r3, #18
 800336c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336e:	2300      	movs	r3, #0
 8003370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003372:	2303      	movs	r3, #3
 8003374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003376:	2304      	movs	r3, #4
 8003378:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800337a:	f107 0314 	add.w	r3, r7, #20
 800337e:	4619      	mov	r1, r3
 8003380:	480c      	ldr	r0, [pc, #48]	; (80033b4 <HAL_I2C_MspInit+0x8c>)
 8003382:	f000 ffc7 	bl	8004314 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003386:	2300      	movs	r3, #0
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <HAL_I2C_MspInit+0x88>)
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	4a08      	ldr	r2, [pc, #32]	; (80033b0 <HAL_I2C_MspInit+0x88>)
 8003390:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003394:	6413      	str	r3, [r2, #64]	; 0x40
 8003396:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <HAL_I2C_MspInit+0x88>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80033a2:	bf00      	nop
 80033a4:	3728      	adds	r7, #40	; 0x28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40005400 	.word	0x40005400
 80033b0:	40023800 	.word	0x40023800
 80033b4:	40020400 	.word	0x40020400

080033b8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b090      	sub	sp, #64	; 0x40
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	605a      	str	r2, [r3, #4]
 80033ca:	609a      	str	r2, [r3, #8]
 80033cc:	60da      	str	r2, [r3, #12]
 80033ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033d0:	f107 0314 	add.w	r3, r7, #20
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	605a      	str	r2, [r3, #4]
 80033da:	609a      	str	r2, [r3, #8]
 80033dc:	60da      	str	r2, [r3, #12]
 80033de:	611a      	str	r2, [r3, #16]
 80033e0:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI2)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a3b      	ldr	r2, [pc, #236]	; (80034d4 <HAL_I2S_MspInit+0x11c>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d16e      	bne.n	80034ca <HAL_I2S_MspInit+0x112>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80033ec:	2301      	movs	r3, #1
 80033ee:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80033f0:	23c0      	movs	r3, #192	; 0xc0
 80033f2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 80033f4:	2310      	movs	r3, #16
 80033f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 3;
 80033f8:	2303      	movs	r3, #3
 80033fa:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033fc:	f107 0314 	add.w	r3, r7, #20
 8003400:	4618      	mov	r0, r3
 8003402:	f003 fd45 	bl	8006e90 <HAL_RCCEx_PeriphCLKConfig>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <HAL_I2S_MspInit+0x58>
    {
      Error_Handler();
 800340c:	f7ff ff5e 	bl	80032cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003410:	2300      	movs	r3, #0
 8003412:	613b      	str	r3, [r7, #16]
 8003414:	4b30      	ldr	r3, [pc, #192]	; (80034d8 <HAL_I2S_MspInit+0x120>)
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	4a2f      	ldr	r2, [pc, #188]	; (80034d8 <HAL_I2S_MspInit+0x120>)
 800341a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800341e:	6413      	str	r3, [r2, #64]	; 0x40
 8003420:	4b2d      	ldr	r3, [pc, #180]	; (80034d8 <HAL_I2S_MspInit+0x120>)
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	4b29      	ldr	r3, [pc, #164]	; (80034d8 <HAL_I2S_MspInit+0x120>)
 8003432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003434:	4a28      	ldr	r2, [pc, #160]	; (80034d8 <HAL_I2S_MspInit+0x120>)
 8003436:	f043 0302 	orr.w	r3, r3, #2
 800343a:	6313      	str	r3, [r2, #48]	; 0x30
 800343c:	4b26      	ldr	r3, [pc, #152]	; (80034d8 <HAL_I2S_MspInit+0x120>)
 800343e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	68fb      	ldr	r3, [r7, #12]
    /**I2S2 GPIO Configuration
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
 8003448:	f44f 4314 	mov.w	r3, #37888	; 0x9400
 800344c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344e:	2302      	movs	r3, #2
 8003450:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003452:	2300      	movs	r3, #0
 8003454:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003456:	2300      	movs	r3, #0
 8003458:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800345a:	2305      	movs	r3, #5
 800345c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800345e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003462:	4619      	mov	r1, r3
 8003464:	481d      	ldr	r0, [pc, #116]	; (80034dc <HAL_I2S_MspInit+0x124>)
 8003466:	f000 ff55 	bl	8004314 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800346a:	4b1d      	ldr	r3, [pc, #116]	; (80034e0 <HAL_I2S_MspInit+0x128>)
 800346c:	4a1d      	ldr	r2, [pc, #116]	; (80034e4 <HAL_I2S_MspInit+0x12c>)
 800346e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8003470:	4b1b      	ldr	r3, [pc, #108]	; (80034e0 <HAL_I2S_MspInit+0x128>)
 8003472:	2200      	movs	r2, #0
 8003474:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003476:	4b1a      	ldr	r3, [pc, #104]	; (80034e0 <HAL_I2S_MspInit+0x128>)
 8003478:	2200      	movs	r2, #0
 800347a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800347c:	4b18      	ldr	r3, [pc, #96]	; (80034e0 <HAL_I2S_MspInit+0x128>)
 800347e:	2200      	movs	r2, #0
 8003480:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003482:	4b17      	ldr	r3, [pc, #92]	; (80034e0 <HAL_I2S_MspInit+0x128>)
 8003484:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003488:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800348a:	4b15      	ldr	r3, [pc, #84]	; (80034e0 <HAL_I2S_MspInit+0x128>)
 800348c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003490:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003492:	4b13      	ldr	r3, [pc, #76]	; (80034e0 <HAL_I2S_MspInit+0x128>)
 8003494:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003498:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800349a:	4b11      	ldr	r3, [pc, #68]	; (80034e0 <HAL_I2S_MspInit+0x128>)
 800349c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034a0:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80034a2:	4b0f      	ldr	r3, [pc, #60]	; (80034e0 <HAL_I2S_MspInit+0x128>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034a8:	4b0d      	ldr	r3, [pc, #52]	; (80034e0 <HAL_I2S_MspInit+0x128>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80034ae:	480c      	ldr	r0, [pc, #48]	; (80034e0 <HAL_I2S_MspInit+0x128>)
 80034b0:	f000 fb2e 	bl	8003b10 <HAL_DMA_Init>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_I2S_MspInit+0x106>
    {
      Error_Handler();
 80034ba:	f7ff ff07 	bl	80032cc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a07      	ldr	r2, [pc, #28]	; (80034e0 <HAL_I2S_MspInit+0x128>)
 80034c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80034c4:	4a06      	ldr	r2, [pc, #24]	; (80034e0 <HAL_I2S_MspInit+0x128>)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80034ca:	bf00      	nop
 80034cc:	3740      	adds	r7, #64	; 0x40
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40003800 	.word	0x40003800
 80034d8:	40023800 	.word	0x40023800
 80034dc:	40020400 	.word	0x40020400
 80034e0:	20000134 	.word	0x20000134
 80034e4:	40026058 	.word	0x40026058

080034e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a18      	ldr	r2, [pc, #96]	; (8003558 <HAL_TIM_Base_MspInit+0x70>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d10e      	bne.n	8003518 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	4b17      	ldr	r3, [pc, #92]	; (800355c <HAL_TIM_Base_MspInit+0x74>)
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	4a16      	ldr	r2, [pc, #88]	; (800355c <HAL_TIM_Base_MspInit+0x74>)
 8003504:	f043 0302 	orr.w	r3, r3, #2
 8003508:	6413      	str	r3, [r2, #64]	; 0x40
 800350a:	4b14      	ldr	r3, [pc, #80]	; (800355c <HAL_TIM_Base_MspInit+0x74>)
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003516:	e01a      	b.n	800354e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a10      	ldr	r2, [pc, #64]	; (8003560 <HAL_TIM_Base_MspInit+0x78>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d115      	bne.n	800354e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	60bb      	str	r3, [r7, #8]
 8003526:	4b0d      	ldr	r3, [pc, #52]	; (800355c <HAL_TIM_Base_MspInit+0x74>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	4a0c      	ldr	r2, [pc, #48]	; (800355c <HAL_TIM_Base_MspInit+0x74>)
 800352c:	f043 0308 	orr.w	r3, r3, #8
 8003530:	6413      	str	r3, [r2, #64]	; 0x40
 8003532:	4b0a      	ldr	r3, [pc, #40]	; (800355c <HAL_TIM_Base_MspInit+0x74>)
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	60bb      	str	r3, [r7, #8]
 800353c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800353e:	2200      	movs	r2, #0
 8003540:	2100      	movs	r1, #0
 8003542:	2032      	movs	r0, #50	; 0x32
 8003544:	f000 faad 	bl	8003aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003548:	2032      	movs	r0, #50	; 0x32
 800354a:	f000 fac6 	bl	8003ada <HAL_NVIC_EnableIRQ>
}
 800354e:	bf00      	nop
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40000400 	.word	0x40000400
 800355c:	40023800 	.word	0x40023800
 8003560:	40000c00 	.word	0x40000c00

08003564 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08a      	sub	sp, #40	; 0x28
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800356c:	f107 0314 	add.w	r3, r7, #20
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	605a      	str	r2, [r3, #4]
 8003576:	609a      	str	r2, [r3, #8]
 8003578:	60da      	str	r2, [r3, #12]
 800357a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a21      	ldr	r2, [pc, #132]	; (8003608 <HAL_TIM_MspPostInit+0xa4>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d13b      	bne.n	80035fe <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003586:	2300      	movs	r3, #0
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	4b20      	ldr	r3, [pc, #128]	; (800360c <HAL_TIM_MspPostInit+0xa8>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	4a1f      	ldr	r2, [pc, #124]	; (800360c <HAL_TIM_MspPostInit+0xa8>)
 8003590:	f043 0301 	orr.w	r3, r3, #1
 8003594:	6313      	str	r3, [r2, #48]	; 0x30
 8003596:	4b1d      	ldr	r3, [pc, #116]	; (800360c <HAL_TIM_MspPostInit+0xa8>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	4b19      	ldr	r3, [pc, #100]	; (800360c <HAL_TIM_MspPostInit+0xa8>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	4a18      	ldr	r2, [pc, #96]	; (800360c <HAL_TIM_MspPostInit+0xa8>)
 80035ac:	f043 0302 	orr.w	r3, r3, #2
 80035b0:	6313      	str	r3, [r2, #48]	; 0x30
 80035b2:	4b16      	ldr	r3, [pc, #88]	; (800360c <HAL_TIM_MspPostInit+0xa8>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80035be:	2380      	movs	r3, #128	; 0x80
 80035c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c2:	2302      	movs	r3, #2
 80035c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ca:	2300      	movs	r3, #0
 80035cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80035ce:	2302      	movs	r3, #2
 80035d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d2:	f107 0314 	add.w	r3, r7, #20
 80035d6:	4619      	mov	r1, r3
 80035d8:	480d      	ldr	r0, [pc, #52]	; (8003610 <HAL_TIM_MspPostInit+0xac>)
 80035da:	f000 fe9b 	bl	8004314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80035de:	2301      	movs	r3, #1
 80035e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e2:	2302      	movs	r3, #2
 80035e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ea:	2300      	movs	r3, #0
 80035ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80035ee:	2302      	movs	r3, #2
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035f2:	f107 0314 	add.w	r3, r7, #20
 80035f6:	4619      	mov	r1, r3
 80035f8:	4806      	ldr	r0, [pc, #24]	; (8003614 <HAL_TIM_MspPostInit+0xb0>)
 80035fa:	f000 fe8b 	bl	8004314 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80035fe:	bf00      	nop
 8003600:	3728      	adds	r7, #40	; 0x28
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40000400 	.word	0x40000400
 800360c:	40023800 	.word	0x40023800
 8003610:	40020000 	.word	0x40020000
 8003614:	40020400 	.word	0x40020400

08003618 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b08a      	sub	sp, #40	; 0x28
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003620:	f107 0314 	add.w	r3, r7, #20
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	605a      	str	r2, [r3, #4]
 800362a:	609a      	str	r2, [r3, #8]
 800362c:	60da      	str	r2, [r3, #12]
 800362e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a1d      	ldr	r2, [pc, #116]	; (80036ac <HAL_UART_MspInit+0x94>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d134      	bne.n	80036a4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800363a:	2300      	movs	r3, #0
 800363c:	613b      	str	r3, [r7, #16]
 800363e:	4b1c      	ldr	r3, [pc, #112]	; (80036b0 <HAL_UART_MspInit+0x98>)
 8003640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003642:	4a1b      	ldr	r2, [pc, #108]	; (80036b0 <HAL_UART_MspInit+0x98>)
 8003644:	f043 0310 	orr.w	r3, r3, #16
 8003648:	6453      	str	r3, [r2, #68]	; 0x44
 800364a:	4b19      	ldr	r3, [pc, #100]	; (80036b0 <HAL_UART_MspInit+0x98>)
 800364c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364e:	f003 0310 	and.w	r3, r3, #16
 8003652:	613b      	str	r3, [r7, #16]
 8003654:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003656:	2300      	movs	r3, #0
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	4b15      	ldr	r3, [pc, #84]	; (80036b0 <HAL_UART_MspInit+0x98>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	4a14      	ldr	r2, [pc, #80]	; (80036b0 <HAL_UART_MspInit+0x98>)
 8003660:	f043 0301 	orr.w	r3, r3, #1
 8003664:	6313      	str	r3, [r2, #48]	; 0x30
 8003666:	4b12      	ldr	r3, [pc, #72]	; (80036b0 <HAL_UART_MspInit+0x98>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003672:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003678:	2302      	movs	r3, #2
 800367a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367c:	2300      	movs	r3, #0
 800367e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003680:	2303      	movs	r3, #3
 8003682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003684:	2307      	movs	r3, #7
 8003686:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003688:	f107 0314 	add.w	r3, r7, #20
 800368c:	4619      	mov	r1, r3
 800368e:	4809      	ldr	r0, [pc, #36]	; (80036b4 <HAL_UART_MspInit+0x9c>)
 8003690:	f000 fe40 	bl	8004314 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003694:	2200      	movs	r2, #0
 8003696:	2100      	movs	r1, #0
 8003698:	2025      	movs	r0, #37	; 0x25
 800369a:	f000 fa02 	bl	8003aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800369e:	2025      	movs	r0, #37	; 0x25
 80036a0:	f000 fa1b 	bl	8003ada <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80036a4:	bf00      	nop
 80036a6:	3728      	adds	r7, #40	; 0x28
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40011000 	.word	0x40011000
 80036b0:	40023800 	.word	0x40023800
 80036b4:	40020000 	.word	0x40020000

080036b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036bc:	e7fe      	b.n	80036bc <NMI_Handler+0x4>

080036be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036be:	b480      	push	{r7}
 80036c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036c2:	e7fe      	b.n	80036c2 <HardFault_Handler+0x4>

080036c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036c8:	e7fe      	b.n	80036c8 <MemManage_Handler+0x4>

080036ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036ca:	b480      	push	{r7}
 80036cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036ce:	e7fe      	b.n	80036ce <BusFault_Handler+0x4>

080036d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036d4:	e7fe      	b.n	80036d4 <UsageFault_Handler+0x4>

080036d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036d6:	b480      	push	{r7}
 80036d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036da:	bf00      	nop
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036e8:	bf00      	nop
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036f2:	b480      	push	{r7}
 80036f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036f6:	bf00      	nop
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003704:	f000 f8ae 	bl	8003864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003708:	bf00      	nop
 800370a:	bd80      	pop	{r7, pc}

0800370c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003710:	4802      	ldr	r0, [pc, #8]	; (800371c <DMA1_Stream3_IRQHandler+0x10>)
 8003712:	f000 fb95 	bl	8003e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003716:	bf00      	nop
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	20000134 	.word	0x20000134

08003720 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003724:	4802      	ldr	r0, [pc, #8]	; (8003730 <USART1_IRQHandler+0x10>)
 8003726:	f004 fe05 	bl	8008334 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800372a:	bf00      	nop
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	20000224 	.word	0x20000224

08003734 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003738:	4802      	ldr	r0, [pc, #8]	; (8003744 <TIM5_IRQHandler+0x10>)
 800373a:	f003 fee3 	bl	8007504 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800373e:	bf00      	nop
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	200001dc 	.word	0x200001dc

08003748 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800374c:	4b06      	ldr	r3, [pc, #24]	; (8003768 <SystemInit+0x20>)
 800374e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003752:	4a05      	ldr	r2, [pc, #20]	; (8003768 <SystemInit+0x20>)
 8003754:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003758:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800375c:	bf00      	nop
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	e000ed00 	.word	0xe000ed00

0800376c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800376c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003770:	480d      	ldr	r0, [pc, #52]	; (80037a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003772:	490e      	ldr	r1, [pc, #56]	; (80037ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003774:	4a0e      	ldr	r2, [pc, #56]	; (80037b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003778:	e002      	b.n	8003780 <LoopCopyDataInit>

0800377a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800377a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800377c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800377e:	3304      	adds	r3, #4

08003780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003784:	d3f9      	bcc.n	800377a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003786:	4a0b      	ldr	r2, [pc, #44]	; (80037b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003788:	4c0b      	ldr	r4, [pc, #44]	; (80037b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800378a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800378c:	e001      	b.n	8003792 <LoopFillZerobss>

0800378e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800378e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003790:	3204      	adds	r2, #4

08003792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003794:	d3fb      	bcc.n	800378e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003796:	f7ff ffd7 	bl	8003748 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800379a:	f005 fd39 	bl	8009210 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800379e:	f7fd fe89 	bl	80014b4 <main>
  bx  lr    
 80037a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80037a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80037a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037ac:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80037b0:	0800c4f0 	.word	0x0800c4f0
  ldr r2, =_sbss
 80037b4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80037b8:	2000292c 	.word	0x2000292c

080037bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037bc:	e7fe      	b.n	80037bc <ADC_IRQHandler>
	...

080037c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037c4:	4b0e      	ldr	r3, [pc, #56]	; (8003800 <HAL_Init+0x40>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a0d      	ldr	r2, [pc, #52]	; (8003800 <HAL_Init+0x40>)
 80037ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037d0:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <HAL_Init+0x40>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a0a      	ldr	r2, [pc, #40]	; (8003800 <HAL_Init+0x40>)
 80037d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037dc:	4b08      	ldr	r3, [pc, #32]	; (8003800 <HAL_Init+0x40>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a07      	ldr	r2, [pc, #28]	; (8003800 <HAL_Init+0x40>)
 80037e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037e8:	2003      	movs	r0, #3
 80037ea:	f000 f94f 	bl	8003a8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037ee:	200f      	movs	r0, #15
 80037f0:	f000 f808 	bl	8003804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037f4:	f7ff fd70 	bl	80032d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40023c00 	.word	0x40023c00

08003804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800380c:	4b12      	ldr	r3, [pc, #72]	; (8003858 <HAL_InitTick+0x54>)
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	4b12      	ldr	r3, [pc, #72]	; (800385c <HAL_InitTick+0x58>)
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	4619      	mov	r1, r3
 8003816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800381a:	fbb3 f3f1 	udiv	r3, r3, r1
 800381e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003822:	4618      	mov	r0, r3
 8003824:	f000 f967 	bl	8003af6 <HAL_SYSTICK_Config>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e00e      	b.n	8003850 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b0f      	cmp	r3, #15
 8003836:	d80a      	bhi.n	800384e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003838:	2200      	movs	r2, #0
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	f04f 30ff 	mov.w	r0, #4294967295
 8003840:	f000 f92f 	bl	8003aa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003844:	4a06      	ldr	r2, [pc, #24]	; (8003860 <HAL_InitTick+0x5c>)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	e000      	b.n	8003850 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
}
 8003850:	4618      	mov	r0, r3
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	20000004 	.word	0x20000004
 800385c:	2000000c 	.word	0x2000000c
 8003860:	20000008 	.word	0x20000008

08003864 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003868:	4b06      	ldr	r3, [pc, #24]	; (8003884 <HAL_IncTick+0x20>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	461a      	mov	r2, r3
 800386e:	4b06      	ldr	r3, [pc, #24]	; (8003888 <HAL_IncTick+0x24>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4413      	add	r3, r2
 8003874:	4a04      	ldr	r2, [pc, #16]	; (8003888 <HAL_IncTick+0x24>)
 8003876:	6013      	str	r3, [r2, #0]
}
 8003878:	bf00      	nop
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	2000000c 	.word	0x2000000c
 8003888:	20002928 	.word	0x20002928

0800388c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  return uwTick;
 8003890:	4b03      	ldr	r3, [pc, #12]	; (80038a0 <HAL_GetTick+0x14>)
 8003892:	681b      	ldr	r3, [r3, #0]
}
 8003894:	4618      	mov	r0, r3
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	20002928 	.word	0x20002928

080038a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038ac:	f7ff ffee 	bl	800388c <HAL_GetTick>
 80038b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038bc:	d005      	beq.n	80038ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038be:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <HAL_Delay+0x44>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	461a      	mov	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4413      	add	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038ca:	bf00      	nop
 80038cc:	f7ff ffde 	bl	800388c <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d8f7      	bhi.n	80038cc <HAL_Delay+0x28>
  {
  }
}
 80038dc:	bf00      	nop
 80038de:	bf00      	nop
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	2000000c 	.word	0x2000000c

080038ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038fc:	4b0c      	ldr	r3, [pc, #48]	; (8003930 <__NVIC_SetPriorityGrouping+0x44>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003908:	4013      	ands	r3, r2
 800390a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800391c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800391e:	4a04      	ldr	r2, [pc, #16]	; (8003930 <__NVIC_SetPriorityGrouping+0x44>)
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	60d3      	str	r3, [r2, #12]
}
 8003924:	bf00      	nop
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	e000ed00 	.word	0xe000ed00

08003934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003938:	4b04      	ldr	r3, [pc, #16]	; (800394c <__NVIC_GetPriorityGrouping+0x18>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	0a1b      	lsrs	r3, r3, #8
 800393e:	f003 0307 	and.w	r3, r3, #7
}
 8003942:	4618      	mov	r0, r3
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	e000ed00 	.word	0xe000ed00

08003950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	4603      	mov	r3, r0
 8003958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800395a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395e:	2b00      	cmp	r3, #0
 8003960:	db0b      	blt.n	800397a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003962:	79fb      	ldrb	r3, [r7, #7]
 8003964:	f003 021f 	and.w	r2, r3, #31
 8003968:	4907      	ldr	r1, [pc, #28]	; (8003988 <__NVIC_EnableIRQ+0x38>)
 800396a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396e:	095b      	lsrs	r3, r3, #5
 8003970:	2001      	movs	r0, #1
 8003972:	fa00 f202 	lsl.w	r2, r0, r2
 8003976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800397a:	bf00      	nop
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	e000e100 	.word	0xe000e100

0800398c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	4603      	mov	r3, r0
 8003994:	6039      	str	r1, [r7, #0]
 8003996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399c:	2b00      	cmp	r3, #0
 800399e:	db0a      	blt.n	80039b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	490c      	ldr	r1, [pc, #48]	; (80039d8 <__NVIC_SetPriority+0x4c>)
 80039a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039aa:	0112      	lsls	r2, r2, #4
 80039ac:	b2d2      	uxtb	r2, r2
 80039ae:	440b      	add	r3, r1
 80039b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039b4:	e00a      	b.n	80039cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	4908      	ldr	r1, [pc, #32]	; (80039dc <__NVIC_SetPriority+0x50>)
 80039bc:	79fb      	ldrb	r3, [r7, #7]
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	3b04      	subs	r3, #4
 80039c4:	0112      	lsls	r2, r2, #4
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	440b      	add	r3, r1
 80039ca:	761a      	strb	r2, [r3, #24]
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	e000e100 	.word	0xe000e100
 80039dc:	e000ed00 	.word	0xe000ed00

080039e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b089      	sub	sp, #36	; 0x24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	f1c3 0307 	rsb	r3, r3, #7
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	bf28      	it	cs
 80039fe:	2304      	movcs	r3, #4
 8003a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	3304      	adds	r3, #4
 8003a06:	2b06      	cmp	r3, #6
 8003a08:	d902      	bls.n	8003a10 <NVIC_EncodePriority+0x30>
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	3b03      	subs	r3, #3
 8003a0e:	e000      	b.n	8003a12 <NVIC_EncodePriority+0x32>
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a14:	f04f 32ff 	mov.w	r2, #4294967295
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	43da      	mvns	r2, r3
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	401a      	ands	r2, r3
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a28:	f04f 31ff 	mov.w	r1, #4294967295
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a32:	43d9      	mvns	r1, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a38:	4313      	orrs	r3, r2
         );
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3724      	adds	r7, #36	; 0x24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
	...

08003a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a58:	d301      	bcc.n	8003a5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e00f      	b.n	8003a7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a5e:	4a0a      	ldr	r2, [pc, #40]	; (8003a88 <SysTick_Config+0x40>)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a66:	210f      	movs	r1, #15
 8003a68:	f04f 30ff 	mov.w	r0, #4294967295
 8003a6c:	f7ff ff8e 	bl	800398c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a70:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <SysTick_Config+0x40>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a76:	4b04      	ldr	r3, [pc, #16]	; (8003a88 <SysTick_Config+0x40>)
 8003a78:	2207      	movs	r2, #7
 8003a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	e000e010 	.word	0xe000e010

08003a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7ff ff29 	bl	80038ec <__NVIC_SetPriorityGrouping>
}
 8003a9a:	bf00      	nop
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b086      	sub	sp, #24
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	60b9      	str	r1, [r7, #8]
 8003aac:	607a      	str	r2, [r7, #4]
 8003aae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ab4:	f7ff ff3e 	bl	8003934 <__NVIC_GetPriorityGrouping>
 8003ab8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	68b9      	ldr	r1, [r7, #8]
 8003abe:	6978      	ldr	r0, [r7, #20]
 8003ac0:	f7ff ff8e 	bl	80039e0 <NVIC_EncodePriority>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aca:	4611      	mov	r1, r2
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7ff ff5d 	bl	800398c <__NVIC_SetPriority>
}
 8003ad2:	bf00      	nop
 8003ad4:	3718      	adds	r7, #24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b082      	sub	sp, #8
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff ff31 	bl	8003950 <__NVIC_EnableIRQ>
}
 8003aee:	bf00      	nop
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b082      	sub	sp, #8
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7ff ffa2 	bl	8003a48 <SysTick_Config>
 8003b04:	4603      	mov	r3, r0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
	...

08003b10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b1c:	f7ff feb6 	bl	800388c <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e099      	b.n	8003c60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0201 	bic.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b4c:	e00f      	b.n	8003b6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b4e:	f7ff fe9d 	bl	800388c <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b05      	cmp	r3, #5
 8003b5a:	d908      	bls.n	8003b6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2203      	movs	r2, #3
 8003b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e078      	b.n	8003c60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1e8      	bne.n	8003b4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	4b38      	ldr	r3, [pc, #224]	; (8003c68 <HAL_DMA_Init+0x158>)
 8003b88:	4013      	ands	r3, r2
 8003b8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ba6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d107      	bne.n	8003bd8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f023 0307 	bic.w	r3, r3, #7
 8003bee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d117      	bne.n	8003c32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00e      	beq.n	8003c32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 fb01 	bl	800421c <DMA_CheckFifoParam>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d008      	beq.n	8003c32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2240      	movs	r2, #64	; 0x40
 8003c24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e016      	b.n	8003c60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 fab8 	bl	80041b0 <DMA_CalcBaseAndBitshift>
 8003c40:	4603      	mov	r3, r0
 8003c42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c48:	223f      	movs	r2, #63	; 0x3f
 8003c4a:	409a      	lsls	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	f010803f 	.word	0xf010803f

08003c6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
 8003c78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d101      	bne.n	8003c92 <HAL_DMA_Start_IT+0x26>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e040      	b.n	8003d14 <HAL_DMA_Start_IT+0xa8>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d12f      	bne.n	8003d06 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2202      	movs	r2, #2
 8003caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	68b9      	ldr	r1, [r7, #8]
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f000 fa4a 	bl	8004154 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc4:	223f      	movs	r2, #63	; 0x3f
 8003cc6:	409a      	lsls	r2, r3
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0216 	orr.w	r2, r2, #22
 8003cda:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d007      	beq.n	8003cf4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0208 	orr.w	r2, r2, #8
 8003cf2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 0201 	orr.w	r2, r2, #1
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	e005      	b.n	8003d12 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d0e:	2302      	movs	r3, #2
 8003d10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d28:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d2a:	f7ff fdaf 	bl	800388c <HAL_GetTick>
 8003d2e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d008      	beq.n	8003d4e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2280      	movs	r2, #128	; 0x80
 8003d40:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e052      	b.n	8003df4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0216 	bic.w	r2, r2, #22
 8003d5c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695a      	ldr	r2, [r3, #20]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d6c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d103      	bne.n	8003d7e <HAL_DMA_Abort+0x62>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d007      	beq.n	8003d8e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 0208 	bic.w	r2, r2, #8
 8003d8c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0201 	bic.w	r2, r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d9e:	e013      	b.n	8003dc8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003da0:	f7ff fd74 	bl	800388c <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b05      	cmp	r3, #5
 8003dac:	d90c      	bls.n	8003dc8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2220      	movs	r2, #32
 8003db2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2203      	movs	r2, #3
 8003db8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e015      	b.n	8003df4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1e4      	bne.n	8003da0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dda:	223f      	movs	r2, #63	; 0x3f
 8003ddc:	409a      	lsls	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d004      	beq.n	8003e1a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2280      	movs	r2, #128	; 0x80
 8003e14:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e00c      	b.n	8003e34 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2205      	movs	r2, #5
 8003e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0201 	bic.w	r2, r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e4c:	4b8e      	ldr	r3, [pc, #568]	; (8004088 <HAL_DMA_IRQHandler+0x248>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a8e      	ldr	r2, [pc, #568]	; (800408c <HAL_DMA_IRQHandler+0x24c>)
 8003e52:	fba2 2303 	umull	r2, r3, r2, r3
 8003e56:	0a9b      	lsrs	r3, r3, #10
 8003e58:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6a:	2208      	movs	r2, #8
 8003e6c:	409a      	lsls	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	4013      	ands	r3, r2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d01a      	beq.n	8003eac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d013      	beq.n	8003eac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0204 	bic.w	r2, r2, #4
 8003e92:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e98:	2208      	movs	r2, #8
 8003e9a:	409a      	lsls	r2, r3
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea4:	f043 0201 	orr.w	r2, r3, #1
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	409a      	lsls	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d012      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00b      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ece:	2201      	movs	r2, #1
 8003ed0:	409a      	lsls	r2, r3
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eda:	f043 0202 	orr.w	r2, r3, #2
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee6:	2204      	movs	r2, #4
 8003ee8:	409a      	lsls	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4013      	ands	r3, r2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d012      	beq.n	8003f18 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00b      	beq.n	8003f18 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f04:	2204      	movs	r2, #4
 8003f06:	409a      	lsls	r2, r3
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f10:	f043 0204 	orr.w	r2, r3, #4
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1c:	2210      	movs	r2, #16
 8003f1e:	409a      	lsls	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4013      	ands	r3, r2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d043      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d03c      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3a:	2210      	movs	r2, #16
 8003f3c:	409a      	lsls	r2, r3
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d018      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d108      	bne.n	8003f70 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d024      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	4798      	blx	r3
 8003f6e:	e01f      	b.n	8003fb0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01b      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	4798      	blx	r3
 8003f80:	e016      	b.n	8003fb0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d107      	bne.n	8003fa0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 0208 	bic.w	r2, r2, #8
 8003f9e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	409a      	lsls	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 808f 	beq.w	80040e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0310 	and.w	r3, r3, #16
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 8087 	beq.w	80040e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	409a      	lsls	r2, r3
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b05      	cmp	r3, #5
 8003fe8:	d136      	bne.n	8004058 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0216 	bic.w	r2, r2, #22
 8003ff8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695a      	ldr	r2, [r3, #20]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004008:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	2b00      	cmp	r3, #0
 8004010:	d103      	bne.n	800401a <HAL_DMA_IRQHandler+0x1da>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004016:	2b00      	cmp	r3, #0
 8004018:	d007      	beq.n	800402a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0208 	bic.w	r2, r2, #8
 8004028:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402e:	223f      	movs	r2, #63	; 0x3f
 8004030:	409a      	lsls	r2, r3
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800404a:	2b00      	cmp	r3, #0
 800404c:	d07e      	beq.n	800414c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	4798      	blx	r3
        }
        return;
 8004056:	e079      	b.n	800414c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d01d      	beq.n	80040a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10d      	bne.n	8004090 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004078:	2b00      	cmp	r3, #0
 800407a:	d031      	beq.n	80040e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	4798      	blx	r3
 8004084:	e02c      	b.n	80040e0 <HAL_DMA_IRQHandler+0x2a0>
 8004086:	bf00      	nop
 8004088:	20000004 	.word	0x20000004
 800408c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004094:	2b00      	cmp	r3, #0
 8004096:	d023      	beq.n	80040e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	4798      	blx	r3
 80040a0:	e01e      	b.n	80040e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10f      	bne.n	80040d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0210 	bic.w	r2, r2, #16
 80040be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d032      	beq.n	800414e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d022      	beq.n	800413a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2205      	movs	r2, #5
 80040f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0201 	bic.w	r2, r2, #1
 800410a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	3301      	adds	r3, #1
 8004110:	60bb      	str	r3, [r7, #8]
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	429a      	cmp	r2, r3
 8004116:	d307      	bcc.n	8004128 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f2      	bne.n	800410c <HAL_DMA_IRQHandler+0x2cc>
 8004126:	e000      	b.n	800412a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004128:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413e:	2b00      	cmp	r3, #0
 8004140:	d005      	beq.n	800414e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	4798      	blx	r3
 800414a:	e000      	b.n	800414e <HAL_DMA_IRQHandler+0x30e>
        return;
 800414c:	bf00      	nop
    }
  }
}
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
 8004160:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004170:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	2b40      	cmp	r3, #64	; 0x40
 8004180:	d108      	bne.n	8004194 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004192:	e007      	b.n	80041a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	60da      	str	r2, [r3, #12]
}
 80041a4:	bf00      	nop
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	3b10      	subs	r3, #16
 80041c0:	4a14      	ldr	r2, [pc, #80]	; (8004214 <DMA_CalcBaseAndBitshift+0x64>)
 80041c2:	fba2 2303 	umull	r2, r3, r2, r3
 80041c6:	091b      	lsrs	r3, r3, #4
 80041c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041ca:	4a13      	ldr	r2, [pc, #76]	; (8004218 <DMA_CalcBaseAndBitshift+0x68>)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4413      	add	r3, r2
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	461a      	mov	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d909      	bls.n	80041f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041e6:	f023 0303 	bic.w	r3, r3, #3
 80041ea:	1d1a      	adds	r2, r3, #4
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	659a      	str	r2, [r3, #88]	; 0x58
 80041f0:	e007      	b.n	8004202 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041fa:	f023 0303 	bic.w	r3, r3, #3
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004206:	4618      	mov	r0, r3
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	aaaaaaab 	.word	0xaaaaaaab
 8004218:	0800bef8 	.word	0x0800bef8

0800421c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004224:	2300      	movs	r3, #0
 8004226:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d11f      	bne.n	8004276 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2b03      	cmp	r3, #3
 800423a:	d856      	bhi.n	80042ea <DMA_CheckFifoParam+0xce>
 800423c:	a201      	add	r2, pc, #4	; (adr r2, 8004244 <DMA_CheckFifoParam+0x28>)
 800423e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004242:	bf00      	nop
 8004244:	08004255 	.word	0x08004255
 8004248:	08004267 	.word	0x08004267
 800424c:	08004255 	.word	0x08004255
 8004250:	080042eb 	.word	0x080042eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d046      	beq.n	80042ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004264:	e043      	b.n	80042ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800426e:	d140      	bne.n	80042f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004274:	e03d      	b.n	80042f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800427e:	d121      	bne.n	80042c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b03      	cmp	r3, #3
 8004284:	d837      	bhi.n	80042f6 <DMA_CheckFifoParam+0xda>
 8004286:	a201      	add	r2, pc, #4	; (adr r2, 800428c <DMA_CheckFifoParam+0x70>)
 8004288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428c:	0800429d 	.word	0x0800429d
 8004290:	080042a3 	.word	0x080042a3
 8004294:	0800429d 	.word	0x0800429d
 8004298:	080042b5 	.word	0x080042b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	73fb      	strb	r3, [r7, #15]
      break;
 80042a0:	e030      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d025      	beq.n	80042fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042b2:	e022      	b.n	80042fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042bc:	d11f      	bne.n	80042fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042c2:	e01c      	b.n	80042fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d903      	bls.n	80042d2 <DMA_CheckFifoParam+0xb6>
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	2b03      	cmp	r3, #3
 80042ce:	d003      	beq.n	80042d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042d0:	e018      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	73fb      	strb	r3, [r7, #15]
      break;
 80042d6:	e015      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00e      	beq.n	8004302 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	73fb      	strb	r3, [r7, #15]
      break;
 80042e8:	e00b      	b.n	8004302 <DMA_CheckFifoParam+0xe6>
      break;
 80042ea:	bf00      	nop
 80042ec:	e00a      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
      break;
 80042ee:	bf00      	nop
 80042f0:	e008      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
      break;
 80042f2:	bf00      	nop
 80042f4:	e006      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
      break;
 80042f6:	bf00      	nop
 80042f8:	e004      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
      break;
 80042fa:	bf00      	nop
 80042fc:	e002      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
      break;   
 80042fe:	bf00      	nop
 8004300:	e000      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
      break;
 8004302:	bf00      	nop
    }
  } 
  
  return status; 
 8004304:	7bfb      	ldrb	r3, [r7, #15]
}
 8004306:	4618      	mov	r0, r3
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop

08004314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004314:	b480      	push	{r7}
 8004316:	b089      	sub	sp, #36	; 0x24
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800431e:	2300      	movs	r3, #0
 8004320:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004322:	2300      	movs	r3, #0
 8004324:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004326:	2300      	movs	r3, #0
 8004328:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800432a:	2300      	movs	r3, #0
 800432c:	61fb      	str	r3, [r7, #28]
 800432e:	e159      	b.n	80045e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004330:	2201      	movs	r2, #1
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	4013      	ands	r3, r2
 8004342:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	429a      	cmp	r2, r3
 800434a:	f040 8148 	bne.w	80045de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	2b01      	cmp	r3, #1
 8004358:	d005      	beq.n	8004366 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004362:	2b02      	cmp	r3, #2
 8004364:	d130      	bne.n	80043c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	2203      	movs	r2, #3
 8004372:	fa02 f303 	lsl.w	r3, r2, r3
 8004376:	43db      	mvns	r3, r3
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	4013      	ands	r3, r2
 800437c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	68da      	ldr	r2, [r3, #12]
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	4313      	orrs	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800439c:	2201      	movs	r2, #1
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	43db      	mvns	r3, r3
 80043a6:	69ba      	ldr	r2, [r7, #24]
 80043a8:	4013      	ands	r3, r2
 80043aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	091b      	lsrs	r3, r3, #4
 80043b2:	f003 0201 	and.w	r2, r3, #1
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	4313      	orrs	r3, r2
 80043c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f003 0303 	and.w	r3, r3, #3
 80043d0:	2b03      	cmp	r3, #3
 80043d2:	d017      	beq.n	8004404 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	2203      	movs	r2, #3
 80043e0:	fa02 f303 	lsl.w	r3, r2, r3
 80043e4:	43db      	mvns	r3, r3
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	4013      	ands	r3, r2
 80043ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	fa02 f303 	lsl.w	r3, r2, r3
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f003 0303 	and.w	r3, r3, #3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d123      	bne.n	8004458 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	08da      	lsrs	r2, r3, #3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	3208      	adds	r2, #8
 8004418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800441c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	220f      	movs	r2, #15
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	43db      	mvns	r3, r3
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	4013      	ands	r3, r2
 8004432:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	691a      	ldr	r2, [r3, #16]
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	f003 0307 	and.w	r3, r3, #7
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	fa02 f303 	lsl.w	r3, r2, r3
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	4313      	orrs	r3, r2
 8004448:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	08da      	lsrs	r2, r3, #3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	3208      	adds	r2, #8
 8004452:	69b9      	ldr	r1, [r7, #24]
 8004454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	2203      	movs	r2, #3
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	43db      	mvns	r3, r3
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	4013      	ands	r3, r2
 800446e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f003 0203 	and.w	r2, r3, #3
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	fa02 f303 	lsl.w	r3, r2, r3
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	4313      	orrs	r3, r2
 8004484:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 80a2 	beq.w	80045de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800449a:	2300      	movs	r3, #0
 800449c:	60fb      	str	r3, [r7, #12]
 800449e:	4b57      	ldr	r3, [pc, #348]	; (80045fc <HAL_GPIO_Init+0x2e8>)
 80044a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a2:	4a56      	ldr	r2, [pc, #344]	; (80045fc <HAL_GPIO_Init+0x2e8>)
 80044a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044a8:	6453      	str	r3, [r2, #68]	; 0x44
 80044aa:	4b54      	ldr	r3, [pc, #336]	; (80045fc <HAL_GPIO_Init+0x2e8>)
 80044ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044b6:	4a52      	ldr	r2, [pc, #328]	; (8004600 <HAL_GPIO_Init+0x2ec>)
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	089b      	lsrs	r3, r3, #2
 80044bc:	3302      	adds	r3, #2
 80044be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	220f      	movs	r2, #15
 80044ce:	fa02 f303 	lsl.w	r3, r2, r3
 80044d2:	43db      	mvns	r3, r3
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	4013      	ands	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a49      	ldr	r2, [pc, #292]	; (8004604 <HAL_GPIO_Init+0x2f0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d019      	beq.n	8004516 <HAL_GPIO_Init+0x202>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a48      	ldr	r2, [pc, #288]	; (8004608 <HAL_GPIO_Init+0x2f4>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d013      	beq.n	8004512 <HAL_GPIO_Init+0x1fe>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a47      	ldr	r2, [pc, #284]	; (800460c <HAL_GPIO_Init+0x2f8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d00d      	beq.n	800450e <HAL_GPIO_Init+0x1fa>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a46      	ldr	r2, [pc, #280]	; (8004610 <HAL_GPIO_Init+0x2fc>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d007      	beq.n	800450a <HAL_GPIO_Init+0x1f6>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a45      	ldr	r2, [pc, #276]	; (8004614 <HAL_GPIO_Init+0x300>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d101      	bne.n	8004506 <HAL_GPIO_Init+0x1f2>
 8004502:	2304      	movs	r3, #4
 8004504:	e008      	b.n	8004518 <HAL_GPIO_Init+0x204>
 8004506:	2307      	movs	r3, #7
 8004508:	e006      	b.n	8004518 <HAL_GPIO_Init+0x204>
 800450a:	2303      	movs	r3, #3
 800450c:	e004      	b.n	8004518 <HAL_GPIO_Init+0x204>
 800450e:	2302      	movs	r3, #2
 8004510:	e002      	b.n	8004518 <HAL_GPIO_Init+0x204>
 8004512:	2301      	movs	r3, #1
 8004514:	e000      	b.n	8004518 <HAL_GPIO_Init+0x204>
 8004516:	2300      	movs	r3, #0
 8004518:	69fa      	ldr	r2, [r7, #28]
 800451a:	f002 0203 	and.w	r2, r2, #3
 800451e:	0092      	lsls	r2, r2, #2
 8004520:	4093      	lsls	r3, r2
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	4313      	orrs	r3, r2
 8004526:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004528:	4935      	ldr	r1, [pc, #212]	; (8004600 <HAL_GPIO_Init+0x2ec>)
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	089b      	lsrs	r3, r3, #2
 800452e:	3302      	adds	r3, #2
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004536:	4b38      	ldr	r3, [pc, #224]	; (8004618 <HAL_GPIO_Init+0x304>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	43db      	mvns	r3, r3
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	4013      	ands	r3, r2
 8004544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	4313      	orrs	r3, r2
 8004558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800455a:	4a2f      	ldr	r2, [pc, #188]	; (8004618 <HAL_GPIO_Init+0x304>)
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004560:	4b2d      	ldr	r3, [pc, #180]	; (8004618 <HAL_GPIO_Init+0x304>)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	43db      	mvns	r3, r3
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	4013      	ands	r3, r2
 800456e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004584:	4a24      	ldr	r2, [pc, #144]	; (8004618 <HAL_GPIO_Init+0x304>)
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800458a:	4b23      	ldr	r3, [pc, #140]	; (8004618 <HAL_GPIO_Init+0x304>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	43db      	mvns	r3, r3
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	4013      	ands	r3, r2
 8004598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045ae:	4a1a      	ldr	r2, [pc, #104]	; (8004618 <HAL_GPIO_Init+0x304>)
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045b4:	4b18      	ldr	r3, [pc, #96]	; (8004618 <HAL_GPIO_Init+0x304>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	43db      	mvns	r3, r3
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	4013      	ands	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045d8:	4a0f      	ldr	r2, [pc, #60]	; (8004618 <HAL_GPIO_Init+0x304>)
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	3301      	adds	r3, #1
 80045e2:	61fb      	str	r3, [r7, #28]
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	2b0f      	cmp	r3, #15
 80045e8:	f67f aea2 	bls.w	8004330 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045ec:	bf00      	nop
 80045ee:	bf00      	nop
 80045f0:	3724      	adds	r7, #36	; 0x24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	40023800 	.word	0x40023800
 8004600:	40013800 	.word	0x40013800
 8004604:	40020000 	.word	0x40020000
 8004608:	40020400 	.word	0x40020400
 800460c:	40020800 	.word	0x40020800
 8004610:	40020c00 	.word	0x40020c00
 8004614:	40021000 	.word	0x40021000
 8004618:	40013c00 	.word	0x40013c00

0800461c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	460b      	mov	r3, r1
 8004626:	807b      	strh	r3, [r7, #2]
 8004628:	4613      	mov	r3, r2
 800462a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800462c:	787b      	ldrb	r3, [r7, #1]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004632:	887a      	ldrh	r2, [r7, #2]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004638:	e003      	b.n	8004642 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800463a:	887b      	ldrh	r3, [r7, #2]
 800463c:	041a      	lsls	r2, r3, #16
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	619a      	str	r2, [r3, #24]
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
	...

08004650 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e12b      	b.n	80048ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d106      	bne.n	800467c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7fe fe56 	bl	8003328 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2224      	movs	r2, #36	; 0x24
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0201 	bic.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046b4:	f002 fbc4 	bl	8006e40 <HAL_RCC_GetPCLK1Freq>
 80046b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	4a81      	ldr	r2, [pc, #516]	; (80048c4 <HAL_I2C_Init+0x274>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d807      	bhi.n	80046d4 <HAL_I2C_Init+0x84>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4a80      	ldr	r2, [pc, #512]	; (80048c8 <HAL_I2C_Init+0x278>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	bf94      	ite	ls
 80046cc:	2301      	movls	r3, #1
 80046ce:	2300      	movhi	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	e006      	b.n	80046e2 <HAL_I2C_Init+0x92>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4a7d      	ldr	r2, [pc, #500]	; (80048cc <HAL_I2C_Init+0x27c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	bf94      	ite	ls
 80046dc:	2301      	movls	r3, #1
 80046de:	2300      	movhi	r3, #0
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e0e7      	b.n	80048ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4a78      	ldr	r2, [pc, #480]	; (80048d0 <HAL_I2C_Init+0x280>)
 80046ee:	fba2 2303 	umull	r2, r3, r2, r3
 80046f2:	0c9b      	lsrs	r3, r3, #18
 80046f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	430a      	orrs	r2, r1
 8004708:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	4a6a      	ldr	r2, [pc, #424]	; (80048c4 <HAL_I2C_Init+0x274>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d802      	bhi.n	8004724 <HAL_I2C_Init+0xd4>
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	3301      	adds	r3, #1
 8004722:	e009      	b.n	8004738 <HAL_I2C_Init+0xe8>
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800472a:	fb02 f303 	mul.w	r3, r2, r3
 800472e:	4a69      	ldr	r2, [pc, #420]	; (80048d4 <HAL_I2C_Init+0x284>)
 8004730:	fba2 2303 	umull	r2, r3, r2, r3
 8004734:	099b      	lsrs	r3, r3, #6
 8004736:	3301      	adds	r3, #1
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6812      	ldr	r2, [r2, #0]
 800473c:	430b      	orrs	r3, r1
 800473e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800474a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	495c      	ldr	r1, [pc, #368]	; (80048c4 <HAL_I2C_Init+0x274>)
 8004754:	428b      	cmp	r3, r1
 8004756:	d819      	bhi.n	800478c <HAL_I2C_Init+0x13c>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	1e59      	subs	r1, r3, #1
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	fbb1 f3f3 	udiv	r3, r1, r3
 8004766:	1c59      	adds	r1, r3, #1
 8004768:	f640 73fc 	movw	r3, #4092	; 0xffc
 800476c:	400b      	ands	r3, r1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <HAL_I2C_Init+0x138>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	1e59      	subs	r1, r3, #1
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004780:	3301      	adds	r3, #1
 8004782:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004786:	e051      	b.n	800482c <HAL_I2C_Init+0x1dc>
 8004788:	2304      	movs	r3, #4
 800478a:	e04f      	b.n	800482c <HAL_I2C_Init+0x1dc>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d111      	bne.n	80047b8 <HAL_I2C_Init+0x168>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	1e58      	subs	r0, r3, #1
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6859      	ldr	r1, [r3, #4]
 800479c:	460b      	mov	r3, r1
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	440b      	add	r3, r1
 80047a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80047a6:	3301      	adds	r3, #1
 80047a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	bf0c      	ite	eq
 80047b0:	2301      	moveq	r3, #1
 80047b2:	2300      	movne	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	e012      	b.n	80047de <HAL_I2C_Init+0x18e>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	1e58      	subs	r0, r3, #1
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6859      	ldr	r1, [r3, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	440b      	add	r3, r1
 80047c6:	0099      	lsls	r1, r3, #2
 80047c8:	440b      	add	r3, r1
 80047ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80047ce:	3301      	adds	r3, #1
 80047d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	bf0c      	ite	eq
 80047d8:	2301      	moveq	r3, #1
 80047da:	2300      	movne	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <HAL_I2C_Init+0x196>
 80047e2:	2301      	movs	r3, #1
 80047e4:	e022      	b.n	800482c <HAL_I2C_Init+0x1dc>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10e      	bne.n	800480c <HAL_I2C_Init+0x1bc>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	1e58      	subs	r0, r3, #1
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6859      	ldr	r1, [r3, #4]
 80047f6:	460b      	mov	r3, r1
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	440b      	add	r3, r1
 80047fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004800:	3301      	adds	r3, #1
 8004802:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800480a:	e00f      	b.n	800482c <HAL_I2C_Init+0x1dc>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	1e58      	subs	r0, r3, #1
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6859      	ldr	r1, [r3, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	0099      	lsls	r1, r3, #2
 800481c:	440b      	add	r3, r1
 800481e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004822:	3301      	adds	r3, #1
 8004824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004828:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800482c:	6879      	ldr	r1, [r7, #4]
 800482e:	6809      	ldr	r1, [r1, #0]
 8004830:	4313      	orrs	r3, r2
 8004832:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	69da      	ldr	r2, [r3, #28]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800485a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	6911      	ldr	r1, [r2, #16]
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	68d2      	ldr	r2, [r2, #12]
 8004866:	4311      	orrs	r1, r2
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6812      	ldr	r2, [r2, #0]
 800486c:	430b      	orrs	r3, r1
 800486e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	695a      	ldr	r2, [r3, #20]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0201 	orr.w	r2, r2, #1
 800489a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	000186a0 	.word	0x000186a0
 80048c8:	001e847f 	.word	0x001e847f
 80048cc:	003d08ff 	.word	0x003d08ff
 80048d0:	431bde83 	.word	0x431bde83
 80048d4:	10624dd3 	.word	0x10624dd3

080048d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af02      	add	r7, sp, #8
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	4608      	mov	r0, r1
 80048e2:	4611      	mov	r1, r2
 80048e4:	461a      	mov	r2, r3
 80048e6:	4603      	mov	r3, r0
 80048e8:	817b      	strh	r3, [r7, #10]
 80048ea:	460b      	mov	r3, r1
 80048ec:	813b      	strh	r3, [r7, #8]
 80048ee:	4613      	mov	r3, r2
 80048f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048f2:	f7fe ffcb 	bl	800388c <HAL_GetTick>
 80048f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b20      	cmp	r3, #32
 8004902:	f040 80d9 	bne.w	8004ab8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	2319      	movs	r3, #25
 800490c:	2201      	movs	r2, #1
 800490e:	496d      	ldr	r1, [pc, #436]	; (8004ac4 <HAL_I2C_Mem_Write+0x1ec>)
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 fc7f 	bl	8005214 <I2C_WaitOnFlagUntilTimeout>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800491c:	2302      	movs	r3, #2
 800491e:	e0cc      	b.n	8004aba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004926:	2b01      	cmp	r3, #1
 8004928:	d101      	bne.n	800492e <HAL_I2C_Mem_Write+0x56>
 800492a:	2302      	movs	r3, #2
 800492c:	e0c5      	b.n	8004aba <HAL_I2C_Mem_Write+0x1e2>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b01      	cmp	r3, #1
 8004942:	d007      	beq.n	8004954 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0201 	orr.w	r2, r2, #1
 8004952:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004962:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2221      	movs	r2, #33	; 0x21
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2240      	movs	r2, #64	; 0x40
 8004970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6a3a      	ldr	r2, [r7, #32]
 800497e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004984:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498a:	b29a      	uxth	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	4a4d      	ldr	r2, [pc, #308]	; (8004ac8 <HAL_I2C_Mem_Write+0x1f0>)
 8004994:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004996:	88f8      	ldrh	r0, [r7, #6]
 8004998:	893a      	ldrh	r2, [r7, #8]
 800499a:	8979      	ldrh	r1, [r7, #10]
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	9301      	str	r3, [sp, #4]
 80049a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	4603      	mov	r3, r0
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f000 fab6 	bl	8004f18 <I2C_RequestMemoryWrite>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d052      	beq.n	8004a58 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e081      	b.n	8004aba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f000 fd00 	bl	80053c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00d      	beq.n	80049e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d107      	bne.n	80049de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e06b      	b.n	8004aba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	781a      	ldrb	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	1c5a      	adds	r2, r3, #1
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049fc:	3b01      	subs	r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d11b      	bne.n	8004a58 <HAL_I2C_Mem_Write+0x180>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d017      	beq.n	8004a58 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	781a      	ldrb	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	1c5a      	adds	r2, r3, #1
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a42:	3b01      	subs	r3, #1
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1aa      	bne.n	80049b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 fcec 	bl	8005442 <I2C_WaitOnBTFFlagUntilTimeout>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00d      	beq.n	8004a8c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	d107      	bne.n	8004a88 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a86:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e016      	b.n	8004aba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	e000      	b.n	8004aba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004ab8:	2302      	movs	r3, #2
  }
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	00100002 	.word	0x00100002
 8004ac8:	ffff0000 	.word	0xffff0000

08004acc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b08c      	sub	sp, #48	; 0x30
 8004ad0:	af02      	add	r7, sp, #8
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	4608      	mov	r0, r1
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	461a      	mov	r2, r3
 8004ada:	4603      	mov	r3, r0
 8004adc:	817b      	strh	r3, [r7, #10]
 8004ade:	460b      	mov	r3, r1
 8004ae0:	813b      	strh	r3, [r7, #8]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ae6:	f7fe fed1 	bl	800388c <HAL_GetTick>
 8004aea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b20      	cmp	r3, #32
 8004af6:	f040 8208 	bne.w	8004f0a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	2319      	movs	r3, #25
 8004b00:	2201      	movs	r2, #1
 8004b02:	497b      	ldr	r1, [pc, #492]	; (8004cf0 <HAL_I2C_Mem_Read+0x224>)
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f000 fb85 	bl	8005214 <I2C_WaitOnFlagUntilTimeout>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004b10:	2302      	movs	r3, #2
 8004b12:	e1fb      	b.n	8004f0c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d101      	bne.n	8004b22 <HAL_I2C_Mem_Read+0x56>
 8004b1e:	2302      	movs	r3, #2
 8004b20:	e1f4      	b.n	8004f0c <HAL_I2C_Mem_Read+0x440>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d007      	beq.n	8004b48 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0201 	orr.w	r2, r2, #1
 8004b46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2222      	movs	r2, #34	; 0x22
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2240      	movs	r2, #64	; 0x40
 8004b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004b78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4a5b      	ldr	r2, [pc, #364]	; (8004cf4 <HAL_I2C_Mem_Read+0x228>)
 8004b88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b8a:	88f8      	ldrh	r0, [r7, #6]
 8004b8c:	893a      	ldrh	r2, [r7, #8]
 8004b8e:	8979      	ldrh	r1, [r7, #10]
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	9301      	str	r3, [sp, #4]
 8004b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	4603      	mov	r3, r0
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f000 fa52 	bl	8005044 <I2C_RequestMemoryRead>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e1b0      	b.n	8004f0c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d113      	bne.n	8004bda <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	623b      	str	r3, [r7, #32]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	623b      	str	r3, [r7, #32]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	623b      	str	r3, [r7, #32]
 8004bc6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	e184      	b.n	8004ee4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d11b      	bne.n	8004c1a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61fb      	str	r3, [r7, #28]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	61fb      	str	r3, [r7, #28]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	61fb      	str	r3, [r7, #28]
 8004c06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	e164      	b.n	8004ee4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d11b      	bne.n	8004c5a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c30:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c42:	2300      	movs	r3, #0
 8004c44:	61bb      	str	r3, [r7, #24]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	61bb      	str	r3, [r7, #24]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	61bb      	str	r3, [r7, #24]
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	e144      	b.n	8004ee4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	617b      	str	r3, [r7, #20]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	617b      	str	r3, [r7, #20]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	617b      	str	r3, [r7, #20]
 8004c6e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c70:	e138      	b.n	8004ee4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	f200 80f1 	bhi.w	8004e5e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d123      	bne.n	8004ccc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f000 fc1b 	bl	80054c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d001      	beq.n	8004c98 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e139      	b.n	8004f0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691a      	ldr	r2, [r3, #16]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	b2d2      	uxtb	r2, r2
 8004ca4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cca:	e10b      	b.n	8004ee4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d14e      	bne.n	8004d72 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cda:	2200      	movs	r2, #0
 8004cdc:	4906      	ldr	r1, [pc, #24]	; (8004cf8 <HAL_I2C_Mem_Read+0x22c>)
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f000 fa98 	bl	8005214 <I2C_WaitOnFlagUntilTimeout>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d008      	beq.n	8004cfc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e10e      	b.n	8004f0c <HAL_I2C_Mem_Read+0x440>
 8004cee:	bf00      	nop
 8004cf0:	00100002 	.word	0x00100002
 8004cf4:	ffff0000 	.word	0xffff0000
 8004cf8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	691a      	ldr	r2, [r3, #16]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	b2d2      	uxtb	r2, r2
 8004d18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	1c5a      	adds	r2, r3, #1
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	691a      	ldr	r2, [r3, #16]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d70:	e0b8      	b.n	8004ee4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d78:	2200      	movs	r2, #0
 8004d7a:	4966      	ldr	r1, [pc, #408]	; (8004f14 <HAL_I2C_Mem_Read+0x448>)
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 fa49 	bl	8005214 <I2C_WaitOnFlagUntilTimeout>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e0bf      	b.n	8004f0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	691a      	ldr	r2, [r3, #16]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	1c5a      	adds	r2, r3, #1
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db8:	3b01      	subs	r3, #1
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	494f      	ldr	r1, [pc, #316]	; (8004f14 <HAL_I2C_Mem_Read+0x448>)
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f000 fa1b 	bl	8005214 <I2C_WaitOnFlagUntilTimeout>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e091      	b.n	8004f0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004df6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	691a      	ldr	r2, [r3, #16]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0a:	1c5a      	adds	r2, r3, #1
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	b2d2      	uxtb	r2, r2
 8004e36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	3b01      	subs	r3, #1
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e5c:	e042      	b.n	8004ee4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 fb2e 	bl	80054c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e04c      	b.n	8004f0c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	691a      	ldr	r2, [r3, #16]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	b2d2      	uxtb	r2, r2
 8004e7e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	1c5a      	adds	r2, r3, #1
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	f003 0304 	and.w	r3, r3, #4
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d118      	bne.n	8004ee4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	691a      	ldr	r2, [r3, #16]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	b2d2      	uxtb	r2, r2
 8004ebe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	1c5a      	adds	r2, r3, #1
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f47f aec2 	bne.w	8004c72 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f06:	2300      	movs	r3, #0
 8004f08:	e000      	b.n	8004f0c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004f0a:	2302      	movs	r3, #2
  }
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3728      	adds	r7, #40	; 0x28
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	00010004 	.word	0x00010004

08004f18 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af02      	add	r7, sp, #8
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	4608      	mov	r0, r1
 8004f22:	4611      	mov	r1, r2
 8004f24:	461a      	mov	r2, r3
 8004f26:	4603      	mov	r3, r0
 8004f28:	817b      	strh	r3, [r7, #10]
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	813b      	strh	r3, [r7, #8]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 f960 	bl	8005214 <I2C_WaitOnFlagUntilTimeout>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00d      	beq.n	8004f76 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f68:	d103      	bne.n	8004f72 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e05f      	b.n	8005036 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f76:	897b      	ldrh	r3, [r7, #10]
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	6a3a      	ldr	r2, [r7, #32]
 8004f8a:	492d      	ldr	r1, [pc, #180]	; (8005040 <I2C_RequestMemoryWrite+0x128>)
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 f998 	bl	80052c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e04c      	b.n	8005036 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	617b      	str	r3, [r7, #20]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	617b      	str	r3, [r7, #20]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	617b      	str	r3, [r7, #20]
 8004fb0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb4:	6a39      	ldr	r1, [r7, #32]
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 fa02 	bl	80053c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00d      	beq.n	8004fde <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	d107      	bne.n	8004fda <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fd8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e02b      	b.n	8005036 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fde:	88fb      	ldrh	r3, [r7, #6]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d105      	bne.n	8004ff0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fe4:	893b      	ldrh	r3, [r7, #8]
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	611a      	str	r2, [r3, #16]
 8004fee:	e021      	b.n	8005034 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ff0:	893b      	ldrh	r3, [r7, #8]
 8004ff2:	0a1b      	lsrs	r3, r3, #8
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	b2da      	uxtb	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005000:	6a39      	ldr	r1, [r7, #32]
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f000 f9dc 	bl	80053c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00d      	beq.n	800502a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	2b04      	cmp	r3, #4
 8005014:	d107      	bne.n	8005026 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005024:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e005      	b.n	8005036 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800502a:	893b      	ldrh	r3, [r7, #8]
 800502c:	b2da      	uxtb	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3718      	adds	r7, #24
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	00010002 	.word	0x00010002

08005044 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b088      	sub	sp, #32
 8005048:	af02      	add	r7, sp, #8
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	4608      	mov	r0, r1
 800504e:	4611      	mov	r1, r2
 8005050:	461a      	mov	r2, r3
 8005052:	4603      	mov	r3, r0
 8005054:	817b      	strh	r3, [r7, #10]
 8005056:	460b      	mov	r3, r1
 8005058:	813b      	strh	r3, [r7, #8]
 800505a:	4613      	mov	r3, r2
 800505c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800506c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800507c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	2200      	movs	r2, #0
 8005086:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f000 f8c2 	bl	8005214 <I2C_WaitOnFlagUntilTimeout>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00d      	beq.n	80050b2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050a4:	d103      	bne.n	80050ae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e0aa      	b.n	8005208 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050b2:	897b      	ldrh	r3, [r7, #10]
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	461a      	mov	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	6a3a      	ldr	r2, [r7, #32]
 80050c6:	4952      	ldr	r1, [pc, #328]	; (8005210 <I2C_RequestMemoryRead+0x1cc>)
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f000 f8fa 	bl	80052c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e097      	b.n	8005208 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050d8:	2300      	movs	r3, #0
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	617b      	str	r3, [r7, #20]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	617b      	str	r3, [r7, #20]
 80050ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f0:	6a39      	ldr	r1, [r7, #32]
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 f964 	bl	80053c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00d      	beq.n	800511a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	2b04      	cmp	r3, #4
 8005104:	d107      	bne.n	8005116 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005114:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e076      	b.n	8005208 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800511a:	88fb      	ldrh	r3, [r7, #6]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d105      	bne.n	800512c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005120:	893b      	ldrh	r3, [r7, #8]
 8005122:	b2da      	uxtb	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	611a      	str	r2, [r3, #16]
 800512a:	e021      	b.n	8005170 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800512c:	893b      	ldrh	r3, [r7, #8]
 800512e:	0a1b      	lsrs	r3, r3, #8
 8005130:	b29b      	uxth	r3, r3
 8005132:	b2da      	uxtb	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800513a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800513c:	6a39      	ldr	r1, [r7, #32]
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f000 f93e 	bl	80053c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00d      	beq.n	8005166 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514e:	2b04      	cmp	r3, #4
 8005150:	d107      	bne.n	8005162 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005160:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e050      	b.n	8005208 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005166:	893b      	ldrh	r3, [r7, #8]
 8005168:	b2da      	uxtb	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005172:	6a39      	ldr	r1, [r7, #32]
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f000 f923 	bl	80053c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00d      	beq.n	800519c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005184:	2b04      	cmp	r3, #4
 8005186:	d107      	bne.n	8005198 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005196:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e035      	b.n	8005208 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051aa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	6a3b      	ldr	r3, [r7, #32]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f000 f82b 	bl	8005214 <I2C_WaitOnFlagUntilTimeout>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00d      	beq.n	80051e0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051d2:	d103      	bne.n	80051dc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e013      	b.n	8005208 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80051e0:	897b      	ldrh	r3, [r7, #10]
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	f043 0301 	orr.w	r3, r3, #1
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	6a3a      	ldr	r2, [r7, #32]
 80051f4:	4906      	ldr	r1, [pc, #24]	; (8005210 <I2C_RequestMemoryRead+0x1cc>)
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 f863 	bl	80052c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e000      	b.n	8005208 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	00010002 	.word	0x00010002

08005214 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	603b      	str	r3, [r7, #0]
 8005220:	4613      	mov	r3, r2
 8005222:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005224:	e025      	b.n	8005272 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522c:	d021      	beq.n	8005272 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800522e:	f7fe fb2d 	bl	800388c <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	683a      	ldr	r2, [r7, #0]
 800523a:	429a      	cmp	r2, r3
 800523c:	d302      	bcc.n	8005244 <I2C_WaitOnFlagUntilTimeout+0x30>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d116      	bne.n	8005272 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2220      	movs	r2, #32
 800524e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	f043 0220 	orr.w	r2, r3, #32
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e023      	b.n	80052ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	0c1b      	lsrs	r3, r3, #16
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b01      	cmp	r3, #1
 800527a:	d10d      	bne.n	8005298 <I2C_WaitOnFlagUntilTimeout+0x84>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	43da      	mvns	r2, r3
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	4013      	ands	r3, r2
 8005288:	b29b      	uxth	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	bf0c      	ite	eq
 800528e:	2301      	moveq	r3, #1
 8005290:	2300      	movne	r3, #0
 8005292:	b2db      	uxtb	r3, r3
 8005294:	461a      	mov	r2, r3
 8005296:	e00c      	b.n	80052b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	43da      	mvns	r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	4013      	ands	r3, r2
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	bf0c      	ite	eq
 80052aa:	2301      	moveq	r3, #1
 80052ac:	2300      	movne	r3, #0
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	461a      	mov	r2, r3
 80052b2:	79fb      	ldrb	r3, [r7, #7]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d0b6      	beq.n	8005226 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b084      	sub	sp, #16
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	60f8      	str	r0, [r7, #12]
 80052ca:	60b9      	str	r1, [r7, #8]
 80052cc:	607a      	str	r2, [r7, #4]
 80052ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052d0:	e051      	b.n	8005376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e0:	d123      	bne.n	800532a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2220      	movs	r2, #32
 8005306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005316:	f043 0204 	orr.w	r2, r3, #4
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e046      	b.n	80053b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005330:	d021      	beq.n	8005376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005332:	f7fe faab 	bl	800388c <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	429a      	cmp	r2, r3
 8005340:	d302      	bcc.n	8005348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d116      	bne.n	8005376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2220      	movs	r2, #32
 8005352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	f043 0220 	orr.w	r2, r3, #32
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e020      	b.n	80053b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	0c1b      	lsrs	r3, r3, #16
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b01      	cmp	r3, #1
 800537e:	d10c      	bne.n	800539a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	43da      	mvns	r2, r3
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	4013      	ands	r3, r2
 800538c:	b29b      	uxth	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	bf14      	ite	ne
 8005392:	2301      	movne	r3, #1
 8005394:	2300      	moveq	r3, #0
 8005396:	b2db      	uxtb	r3, r3
 8005398:	e00b      	b.n	80053b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	43da      	mvns	r2, r3
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	4013      	ands	r3, r2
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	bf14      	ite	ne
 80053ac:	2301      	movne	r3, #1
 80053ae:	2300      	moveq	r3, #0
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d18d      	bne.n	80052d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053cc:	e02d      	b.n	800542a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f000 f8ce 	bl	8005570 <I2C_IsAcknowledgeFailed>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e02d      	b.n	800543a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e4:	d021      	beq.n	800542a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053e6:	f7fe fa51 	bl	800388c <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d302      	bcc.n	80053fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d116      	bne.n	800542a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2220      	movs	r2, #32
 8005406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	f043 0220 	orr.w	r2, r3, #32
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e007      	b.n	800543a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005434:	2b80      	cmp	r3, #128	; 0x80
 8005436:	d1ca      	bne.n	80053ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b084      	sub	sp, #16
 8005446:	af00      	add	r7, sp, #0
 8005448:	60f8      	str	r0, [r7, #12]
 800544a:	60b9      	str	r1, [r7, #8]
 800544c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800544e:	e02d      	b.n	80054ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f000 f88d 	bl	8005570 <I2C_IsAcknowledgeFailed>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d001      	beq.n	8005460 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e02d      	b.n	80054bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005466:	d021      	beq.n	80054ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005468:	f7fe fa10 	bl	800388c <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	429a      	cmp	r2, r3
 8005476:	d302      	bcc.n	800547e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d116      	bne.n	80054ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2220      	movs	r2, #32
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005498:	f043 0220 	orr.w	r2, r3, #32
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e007      	b.n	80054bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	f003 0304 	and.w	r3, r3, #4
 80054b6:	2b04      	cmp	r3, #4
 80054b8:	d1ca      	bne.n	8005450 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054d0:	e042      	b.n	8005558 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	f003 0310 	and.w	r3, r3, #16
 80054dc:	2b10      	cmp	r3, #16
 80054de:	d119      	bne.n	8005514 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f06f 0210 	mvn.w	r2, #16
 80054e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e029      	b.n	8005568 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005514:	f7fe f9ba 	bl	800388c <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	429a      	cmp	r2, r3
 8005522:	d302      	bcc.n	800552a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d116      	bne.n	8005558 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2220      	movs	r2, #32
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005544:	f043 0220 	orr.w	r2, r3, #32
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e007      	b.n	8005568 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005562:	2b40      	cmp	r3, #64	; 0x40
 8005564:	d1b5      	bne.n	80054d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005586:	d11b      	bne.n	80055c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005590:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2220      	movs	r2, #32
 800559c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ac:	f043 0204 	orr.w	r2, r3, #4
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e000      	b.n	80055c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
	...

080055d0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b088      	sub	sp, #32
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e128      	b.n	8005834 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d109      	bne.n	8005602 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a90      	ldr	r2, [pc, #576]	; (800583c <HAL_I2S_Init+0x26c>)
 80055fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f7fd fedb 	bl	80033b8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2202      	movs	r2, #2
 8005606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	6812      	ldr	r2, [r2, #0]
 8005614:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005618:	f023 030f 	bic.w	r3, r3, #15
 800561c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2202      	movs	r2, #2
 8005624:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	2b02      	cmp	r3, #2
 800562c:	d060      	beq.n	80056f0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d102      	bne.n	800563c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005636:	2310      	movs	r3, #16
 8005638:	617b      	str	r3, [r7, #20]
 800563a:	e001      	b.n	8005640 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800563c:	2320      	movs	r3, #32
 800563e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	2b20      	cmp	r3, #32
 8005646:	d802      	bhi.n	800564e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	005b      	lsls	r3, r3, #1
 800564c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800564e:	2001      	movs	r0, #1
 8005650:	f001 fd0e 	bl	8007070 <HAL_RCCEx_GetPeriphCLKFreq>
 8005654:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800565e:	d125      	bne.n	80056ac <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d010      	beq.n	800568a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005672:	4613      	mov	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4413      	add	r3, r2
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	461a      	mov	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	fbb2 f3f3 	udiv	r3, r2, r3
 8005684:	3305      	adds	r3, #5
 8005686:	613b      	str	r3, [r7, #16]
 8005688:	e01f      	b.n	80056ca <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	fbb2 f2f3 	udiv	r2, r2, r3
 8005694:	4613      	mov	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	005b      	lsls	r3, r3, #1
 800569c:	461a      	mov	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a6:	3305      	adds	r3, #5
 80056a8:	613b      	str	r3, [r7, #16]
 80056aa:	e00e      	b.n	80056ca <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80056b4:	4613      	mov	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4413      	add	r3, r2
 80056ba:	005b      	lsls	r3, r3, #1
 80056bc:	461a      	mov	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c6:	3305      	adds	r3, #5
 80056c8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	4a5c      	ldr	r2, [pc, #368]	; (8005840 <HAL_I2S_Init+0x270>)
 80056ce:	fba2 2303 	umull	r2, r3, r2, r3
 80056d2:	08db      	lsrs	r3, r3, #3
 80056d4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	085b      	lsrs	r3, r3, #1
 80056e6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	021b      	lsls	r3, r3, #8
 80056ec:	61bb      	str	r3, [r7, #24]
 80056ee:	e003      	b.n	80056f8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80056f0:	2302      	movs	r3, #2
 80056f2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d902      	bls.n	8005704 <HAL_I2S_Init+0x134>
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	2bff      	cmp	r3, #255	; 0xff
 8005702:	d907      	bls.n	8005714 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005708:	f043 0210 	orr.w	r2, r3, #16
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e08f      	b.n	8005834 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	691a      	ldr	r2, [r3, #16]
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	ea42 0103 	orr.w	r1, r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	69fa      	ldr	r2, [r7, #28]
 8005724:	430a      	orrs	r2, r1
 8005726:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005732:	f023 030f 	bic.w	r3, r3, #15
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6851      	ldr	r1, [r2, #4]
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	6892      	ldr	r2, [r2, #8]
 800573e:	4311      	orrs	r1, r2
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	68d2      	ldr	r2, [r2, #12]
 8005744:	4311      	orrs	r1, r2
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	6992      	ldr	r2, [r2, #24]
 800574a:	430a      	orrs	r2, r1
 800574c:	431a      	orrs	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005756:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d161      	bne.n	8005824 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a38      	ldr	r2, [pc, #224]	; (8005844 <HAL_I2S_Init+0x274>)
 8005764:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a37      	ldr	r2, [pc, #220]	; (8005848 <HAL_I2S_Init+0x278>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d101      	bne.n	8005774 <HAL_I2S_Init+0x1a4>
 8005770:	4b36      	ldr	r3, [pc, #216]	; (800584c <HAL_I2S_Init+0x27c>)
 8005772:	e001      	b.n	8005778 <HAL_I2S_Init+0x1a8>
 8005774:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	6812      	ldr	r2, [r2, #0]
 800577e:	4932      	ldr	r1, [pc, #200]	; (8005848 <HAL_I2S_Init+0x278>)
 8005780:	428a      	cmp	r2, r1
 8005782:	d101      	bne.n	8005788 <HAL_I2S_Init+0x1b8>
 8005784:	4a31      	ldr	r2, [pc, #196]	; (800584c <HAL_I2S_Init+0x27c>)
 8005786:	e001      	b.n	800578c <HAL_I2S_Init+0x1bc>
 8005788:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800578c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005790:	f023 030f 	bic.w	r3, r3, #15
 8005794:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a2b      	ldr	r2, [pc, #172]	; (8005848 <HAL_I2S_Init+0x278>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d101      	bne.n	80057a4 <HAL_I2S_Init+0x1d4>
 80057a0:	4b2a      	ldr	r3, [pc, #168]	; (800584c <HAL_I2S_Init+0x27c>)
 80057a2:	e001      	b.n	80057a8 <HAL_I2S_Init+0x1d8>
 80057a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057a8:	2202      	movs	r2, #2
 80057aa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a25      	ldr	r2, [pc, #148]	; (8005848 <HAL_I2S_Init+0x278>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d101      	bne.n	80057ba <HAL_I2S_Init+0x1ea>
 80057b6:	4b25      	ldr	r3, [pc, #148]	; (800584c <HAL_I2S_Init+0x27c>)
 80057b8:	e001      	b.n	80057be <HAL_I2S_Init+0x1ee>
 80057ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057be:	69db      	ldr	r3, [r3, #28]
 80057c0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057ca:	d003      	beq.n	80057d4 <HAL_I2S_Init+0x204>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d103      	bne.n	80057dc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80057d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057d8:	613b      	str	r3, [r7, #16]
 80057da:	e001      	b.n	80057e0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80057dc:	2300      	movs	r3, #0
 80057de:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80057ea:	4313      	orrs	r3, r2
 80057ec:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80057f4:	4313      	orrs	r3, r2
 80057f6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80057fe:	4313      	orrs	r3, r2
 8005800:	b29a      	uxth	r2, r3
 8005802:	897b      	ldrh	r3, [r7, #10]
 8005804:	4313      	orrs	r3, r2
 8005806:	b29b      	uxth	r3, r3
 8005808:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800580c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a0d      	ldr	r2, [pc, #52]	; (8005848 <HAL_I2S_Init+0x278>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d101      	bne.n	800581c <HAL_I2S_Init+0x24c>
 8005818:	4b0c      	ldr	r3, [pc, #48]	; (800584c <HAL_I2S_Init+0x27c>)
 800581a:	e001      	b.n	8005820 <HAL_I2S_Init+0x250>
 800581c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005820:	897a      	ldrh	r2, [r7, #10]
 8005822:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3720      	adds	r7, #32
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	08005f25 	.word	0x08005f25
 8005840:	cccccccd 	.word	0xcccccccd
 8005844:	080060ad 	.word	0x080060ad
 8005848:	40003800 	.word	0x40003800
 800584c:	40003400 	.word	0x40003400

08005850 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	4613      	mov	r3, r2
 800585c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d002      	beq.n	800586a <HAL_I2S_Receive_DMA+0x1a>
 8005864:	88fb      	ldrh	r3, [r7, #6]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e0a1      	b.n	80059b2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b01      	cmp	r3, #1
 8005878:	d101      	bne.n	800587e <HAL_I2S_Receive_DMA+0x2e>
 800587a:	2302      	movs	r3, #2
 800587c:	e099      	b.n	80059b2 <HAL_I2S_Receive_DMA+0x162>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b01      	cmp	r3, #1
 8005890:	d005      	beq.n	800589e <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800589a:	2302      	movs	r3, #2
 800589c:	e089      	b.n	80059b2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2204      	movs	r2, #4
 80058a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	69db      	ldr	r3, [r3, #28]
 80058b8:	f003 0307 	and.w	r3, r3, #7
 80058bc:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	2b03      	cmp	r3, #3
 80058c2:	d002      	beq.n	80058ca <HAL_I2S_Receive_DMA+0x7a>
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	2b05      	cmp	r3, #5
 80058c8:	d10a      	bne.n	80058e0 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 80058ca:	88fb      	ldrh	r3, [r7, #6]
 80058cc:	005b      	lsls	r3, r3, #1
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80058d4:	88fb      	ldrh	r3, [r7, #6]
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	b29a      	uxth	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	865a      	strh	r2, [r3, #50]	; 0x32
 80058de:	e005      	b.n	80058ec <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	88fa      	ldrh	r2, [r7, #6]
 80058e4:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	88fa      	ldrh	r2, [r7, #6]
 80058ea:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f0:	4a32      	ldr	r2, [pc, #200]	; (80059bc <HAL_I2S_Receive_DMA+0x16c>)
 80058f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f8:	4a31      	ldr	r2, [pc, #196]	; (80059c0 <HAL_I2S_Receive_DMA+0x170>)
 80058fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005900:	4a30      	ldr	r2, [pc, #192]	; (80059c4 <HAL_I2S_Receive_DMA+0x174>)
 8005902:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800590e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005912:	d10a      	bne.n	800592a <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005914:	2300      	movs	r3, #0
 8005916:	613b      	str	r3, [r7, #16]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	613b      	str	r3, [r7, #16]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	613b      	str	r3, [r7, #16]
 8005928:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	330c      	adds	r3, #12
 8005934:	4619      	mov	r1, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593a:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8005940:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8005942:	f7fe f993 	bl	8003c6c <HAL_DMA_Start_IT>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00f      	beq.n	800596c <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005950:	f043 0208 	orr.w	r2, r3, #8
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e022      	b.n	80059b2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	69db      	ldr	r3, [r3, #28]
 8005972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005976:	2b00      	cmp	r3, #0
 8005978:	d107      	bne.n	800598a <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69da      	ldr	r2, [r3, #28]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005988:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d107      	bne.n	80059a8 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f042 0201 	orr.w	r2, r2, #1
 80059a6:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	08005e03 	.word	0x08005e03
 80059c0:	08005dc1 	.word	0x08005dc1
 80059c4:	08005e1f 	.word	0x08005e1f

080059c8 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b088      	sub	sp, #32
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059d0:	2300      	movs	r3, #0
 80059d2:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059dc:	d004      	beq.n	80059e8 <HAL_I2S_DMAStop+0x20>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f040 80d1 	bne.w	8005b8a <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00f      	beq.n	8005a10 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7fe f991 	bl	8003d1c <HAL_DMA_Abort>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d007      	beq.n	8005a10 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a04:	f043 0208 	orr.w	r2, r3, #8
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005a10:	2364      	movs	r3, #100	; 0x64
 8005a12:	2201      	movs	r2, #1
 8005a14:	2102      	movs	r1, #2
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fb0e 	bl	8006038 <I2S_WaitFlagStateUntilTimeout>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00b      	beq.n	8005a3a <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a26:	f043 0201 	orr.w	r2, r3, #1
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005a3a:	2364      	movs	r3, #100	; 0x64
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	2180      	movs	r1, #128	; 0x80
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 faf9 	bl	8006038 <I2S_WaitFlagStateUntilTimeout>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00b      	beq.n	8005a64 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a50:	f043 0201 	orr.w	r2, r3, #1
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	69da      	ldr	r2, [r3, #28]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a72:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005a74:	2300      	movs	r3, #0
 8005a76:	617b      	str	r3, [r7, #20]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	617b      	str	r3, [r7, #20]
 8005a80:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0202 	bic.w	r2, r2, #2
 8005a90:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b05      	cmp	r3, #5
 8005a9c:	f040 8165 	bne.w	8005d6a <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00f      	beq.n	8005ac8 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7fe f935 	bl	8003d1c <HAL_DMA_Abort>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d007      	beq.n	8005ac8 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005abc:	f043 0208 	orr.w	r2, r3, #8
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a8a      	ldr	r2, [pc, #552]	; (8005cf8 <HAL_I2S_DMAStop+0x330>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d101      	bne.n	8005ad6 <HAL_I2S_DMAStop+0x10e>
 8005ad2:	4b8a      	ldr	r3, [pc, #552]	; (8005cfc <HAL_I2S_DMAStop+0x334>)
 8005ad4:	e001      	b.n	8005ada <HAL_I2S_DMAStop+0x112>
 8005ad6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ada:	69da      	ldr	r2, [r3, #28]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4985      	ldr	r1, [pc, #532]	; (8005cf8 <HAL_I2S_DMAStop+0x330>)
 8005ae2:	428b      	cmp	r3, r1
 8005ae4:	d101      	bne.n	8005aea <HAL_I2S_DMAStop+0x122>
 8005ae6:	4b85      	ldr	r3, [pc, #532]	; (8005cfc <HAL_I2S_DMAStop+0x334>)
 8005ae8:	e001      	b.n	8005aee <HAL_I2S_DMAStop+0x126>
 8005aea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005aee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005af2:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8005af4:	2300      	movs	r3, #0
 8005af6:	613b      	str	r3, [r7, #16]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a7e      	ldr	r2, [pc, #504]	; (8005cf8 <HAL_I2S_DMAStop+0x330>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d101      	bne.n	8005b06 <HAL_I2S_DMAStop+0x13e>
 8005b02:	4b7e      	ldr	r3, [pc, #504]	; (8005cfc <HAL_I2S_DMAStop+0x334>)
 8005b04:	e001      	b.n	8005b0a <HAL_I2S_DMAStop+0x142>
 8005b06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	613b      	str	r3, [r7, #16]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a79      	ldr	r2, [pc, #484]	; (8005cf8 <HAL_I2S_DMAStop+0x330>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d101      	bne.n	8005b1c <HAL_I2S_DMAStop+0x154>
 8005b18:	4b78      	ldr	r3, [pc, #480]	; (8005cfc <HAL_I2S_DMAStop+0x334>)
 8005b1a:	e001      	b.n	8005b20 <HAL_I2S_DMAStop+0x158>
 8005b1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	613b      	str	r3, [r7, #16]
 8005b24:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a73      	ldr	r2, [pc, #460]	; (8005cf8 <HAL_I2S_DMAStop+0x330>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d101      	bne.n	8005b34 <HAL_I2S_DMAStop+0x16c>
 8005b30:	4b72      	ldr	r3, [pc, #456]	; (8005cfc <HAL_I2S_DMAStop+0x334>)
 8005b32:	e001      	b.n	8005b38 <HAL_I2S_DMAStop+0x170>
 8005b34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b38:	685a      	ldr	r2, [r3, #4]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	496e      	ldr	r1, [pc, #440]	; (8005cf8 <HAL_I2S_DMAStop+0x330>)
 8005b40:	428b      	cmp	r3, r1
 8005b42:	d101      	bne.n	8005b48 <HAL_I2S_DMAStop+0x180>
 8005b44:	4b6d      	ldr	r3, [pc, #436]	; (8005cfc <HAL_I2S_DMAStop+0x334>)
 8005b46:	e001      	b.n	8005b4c <HAL_I2S_DMAStop+0x184>
 8005b48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b4c:	f022 0201 	bic.w	r2, r2, #1
 8005b50:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d10c      	bne.n	8005b74 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005b72:	e0fa      	b.n	8005d6a <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a5f      	ldr	r2, [pc, #380]	; (8005cf8 <HAL_I2S_DMAStop+0x330>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d101      	bne.n	8005b82 <HAL_I2S_DMAStop+0x1ba>
 8005b7e:	4b5f      	ldr	r3, [pc, #380]	; (8005cfc <HAL_I2S_DMAStop+0x334>)
 8005b80:	e001      	b.n	8005b86 <HAL_I2S_DMAStop+0x1be>
 8005b82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b86:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005b88:	e0ef      	b.n	8005d6a <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b92:	d005      	beq.n	8005ba0 <HAL_I2S_DMAStop+0x1d8>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b9c:	f040 80e5 	bne.w	8005d6a <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00f      	beq.n	8005bc8 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7fe f8b5 	bl	8003d1c <HAL_DMA_Abort>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d007      	beq.n	8005bc8 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bbc:	f043 0208 	orr.w	r2, r3, #8
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b05      	cmp	r3, #5
 8005bd2:	f040 809a 	bne.w	8005d0a <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00f      	beq.n	8005bfe <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7fe f89a 	bl	8003d1c <HAL_DMA_Abort>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d007      	beq.n	8005bfe <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf2:	f043 0208 	orr.w	r2, r3, #8
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8005bfe:	f7fd fe45 	bl	800388c <HAL_GetTick>
 8005c02:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8005c04:	e012      	b.n	8005c2c <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8005c06:	f7fd fe41 	bl	800388c <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	2b64      	cmp	r3, #100	; 0x64
 8005c12:	d90b      	bls.n	8005c2c <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c18:	f043 0201 	orr.w	r2, r3, #1
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a31      	ldr	r2, [pc, #196]	; (8005cf8 <HAL_I2S_DMAStop+0x330>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d101      	bne.n	8005c3a <HAL_I2S_DMAStop+0x272>
 8005c36:	4b31      	ldr	r3, [pc, #196]	; (8005cfc <HAL_I2S_DMAStop+0x334>)
 8005c38:	e001      	b.n	8005c3e <HAL_I2S_DMAStop+0x276>
 8005c3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d1de      	bne.n	8005c06 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005c48:	e012      	b.n	8005c70 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8005c4a:	f7fd fe1f 	bl	800388c <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	2b64      	cmp	r3, #100	; 0x64
 8005c56:	d90b      	bls.n	8005c70 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c5c:	f043 0201 	orr.w	r2, r3, #1
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a20      	ldr	r2, [pc, #128]	; (8005cf8 <HAL_I2S_DMAStop+0x330>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d101      	bne.n	8005c7e <HAL_I2S_DMAStop+0x2b6>
 8005c7a:	4b20      	ldr	r3, [pc, #128]	; (8005cfc <HAL_I2S_DMAStop+0x334>)
 8005c7c:	e001      	b.n	8005c82 <HAL_I2S_DMAStop+0x2ba>
 8005c7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c88:	2b80      	cmp	r3, #128	; 0x80
 8005c8a:	d0de      	beq.n	8005c4a <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a19      	ldr	r2, [pc, #100]	; (8005cf8 <HAL_I2S_DMAStop+0x330>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d101      	bne.n	8005c9a <HAL_I2S_DMAStop+0x2d2>
 8005c96:	4b19      	ldr	r3, [pc, #100]	; (8005cfc <HAL_I2S_DMAStop+0x334>)
 8005c98:	e001      	b.n	8005c9e <HAL_I2S_DMAStop+0x2d6>
 8005c9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c9e:	69da      	ldr	r2, [r3, #28]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4914      	ldr	r1, [pc, #80]	; (8005cf8 <HAL_I2S_DMAStop+0x330>)
 8005ca6:	428b      	cmp	r3, r1
 8005ca8:	d101      	bne.n	8005cae <HAL_I2S_DMAStop+0x2e6>
 8005caa:	4b14      	ldr	r3, [pc, #80]	; (8005cfc <HAL_I2S_DMAStop+0x334>)
 8005cac:	e001      	b.n	8005cb2 <HAL_I2S_DMAStop+0x2ea>
 8005cae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cb6:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8005cb8:	2300      	movs	r3, #0
 8005cba:	60fb      	str	r3, [r7, #12]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a0d      	ldr	r2, [pc, #52]	; (8005cf8 <HAL_I2S_DMAStop+0x330>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d101      	bne.n	8005cca <HAL_I2S_DMAStop+0x302>
 8005cc6:	4b0d      	ldr	r3, [pc, #52]	; (8005cfc <HAL_I2S_DMAStop+0x334>)
 8005cc8:	e001      	b.n	8005cce <HAL_I2S_DMAStop+0x306>
 8005cca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a07      	ldr	r2, [pc, #28]	; (8005cf8 <HAL_I2S_DMAStop+0x330>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d101      	bne.n	8005ce2 <HAL_I2S_DMAStop+0x31a>
 8005cde:	4b07      	ldr	r3, [pc, #28]	; (8005cfc <HAL_I2S_DMAStop+0x334>)
 8005ce0:	e001      	b.n	8005ce6 <HAL_I2S_DMAStop+0x31e>
 8005ce2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4902      	ldr	r1, [pc, #8]	; (8005cf8 <HAL_I2S_DMAStop+0x330>)
 8005cee:	428b      	cmp	r3, r1
 8005cf0:	d106      	bne.n	8005d00 <HAL_I2S_DMAStop+0x338>
 8005cf2:	4b02      	ldr	r3, [pc, #8]	; (8005cfc <HAL_I2S_DMAStop+0x334>)
 8005cf4:	e006      	b.n	8005d04 <HAL_I2S_DMAStop+0x33c>
 8005cf6:	bf00      	nop
 8005cf8:	40003800 	.word	0x40003800
 8005cfc:	40003400 	.word	0x40003400
 8005d00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d04:	f022 0202 	bic.w	r2, r2, #2
 8005d08:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	69da      	ldr	r2, [r3, #28]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d18:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60bb      	str	r3, [r7, #8]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	60bb      	str	r3, [r7, #8]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	60bb      	str	r3, [r7, #8]
 8005d2e:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685a      	ldr	r2, [r3, #4]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 0201 	bic.w	r2, r2, #1
 8005d3e:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d48:	d10c      	bne.n	8005d64 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	77fb      	strb	r3, [r7, #31]
 8005d62:	e002      	b.n	8005d6a <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8005d72:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3720      	adds	r7, #32
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005db2:	b2db      	uxtb	r3, r3
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dcc:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d10e      	bne.n	8005df4 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f022 0201 	bic.w	r2, r2, #1
 8005de4:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	f7fb fe33 	bl	8001a60 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005dfa:	bf00      	nop
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b084      	sub	sp, #16
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f7fb fe0f 	bl	8001a34 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005e16:	bf00      	nop
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b084      	sub	sp, #16
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f022 0203 	bic.w	r2, r2, #3
 8005e3a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e54:	f043 0208 	orr.w	r2, r3, #8
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f7ff ff97 	bl	8005d90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005e62:	bf00      	nop
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b082      	sub	sp, #8
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e76:	881a      	ldrh	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e82:	1c9a      	adds	r2, r3, #2
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10e      	bne.n	8005ebe <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	685a      	ldr	r2, [r3, #4]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005eae:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f7ff ff5f 	bl	8005d7c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005ebe:	bf00      	nop
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b082      	sub	sp, #8
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68da      	ldr	r2, [r3, #12]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed8:	b292      	uxth	r2, r2
 8005eda:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee0:	1c9a      	adds	r2, r3, #2
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	3b01      	subs	r3, #1
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10e      	bne.n	8005f1c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f0c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7fb fda2 	bl	8001a60 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005f1c:	bf00      	nop
 8005f1e:	3708      	adds	r7, #8
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	2b04      	cmp	r3, #4
 8005f3e:	d13a      	bne.n	8005fb6 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d109      	bne.n	8005f5e <I2S_IRQHandler+0x3a>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f54:	2b40      	cmp	r3, #64	; 0x40
 8005f56:	d102      	bne.n	8005f5e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f7ff ffb4 	bl	8005ec6 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f64:	2b40      	cmp	r3, #64	; 0x40
 8005f66:	d126      	bne.n	8005fb6 <I2S_IRQHandler+0x92>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f003 0320 	and.w	r3, r3, #32
 8005f72:	2b20      	cmp	r3, #32
 8005f74:	d11f      	bne.n	8005fb6 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f84:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005f86:	2300      	movs	r3, #0
 8005f88:	613b      	str	r3, [r7, #16]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	613b      	str	r3, [r7, #16]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	613b      	str	r3, [r7, #16]
 8005f9a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa8:	f043 0202 	orr.w	r2, r3, #2
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f7ff feed 	bl	8005d90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b03      	cmp	r3, #3
 8005fc0:	d136      	bne.n	8006030 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d109      	bne.n	8005fe0 <I2S_IRQHandler+0xbc>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd6:	2b80      	cmp	r3, #128	; 0x80
 8005fd8:	d102      	bne.n	8005fe0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7ff ff45 	bl	8005e6a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	f003 0308 	and.w	r3, r3, #8
 8005fe6:	2b08      	cmp	r3, #8
 8005fe8:	d122      	bne.n	8006030 <I2S_IRQHandler+0x10c>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f003 0320 	and.w	r3, r3, #32
 8005ff4:	2b20      	cmp	r3, #32
 8005ff6:	d11b      	bne.n	8006030 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006006:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006008:	2300      	movs	r3, #0
 800600a:	60fb      	str	r3, [r7, #12]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006022:	f043 0204 	orr.w	r2, r3, #4
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7ff feb0 	bl	8005d90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006030:	bf00      	nop
 8006032:	3718      	adds	r7, #24
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	603b      	str	r3, [r7, #0]
 8006044:	4613      	mov	r3, r2
 8006046:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006048:	f7fd fc20 	bl	800388c <HAL_GetTick>
 800604c:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800604e:	e018      	b.n	8006082 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006056:	d014      	beq.n	8006082 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8006058:	f7fd fc18 	bl	800388c <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	683a      	ldr	r2, [r7, #0]
 8006064:	429a      	cmp	r2, r3
 8006066:	d902      	bls.n	800606e <I2S_WaitFlagStateUntilTimeout+0x36>
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d109      	bne.n	8006082 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e00f      	b.n	80060a2 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689a      	ldr	r2, [r3, #8]
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	4013      	ands	r3, r2
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	429a      	cmp	r2, r3
 8006090:	bf0c      	ite	eq
 8006092:	2301      	moveq	r3, #1
 8006094:	2300      	movne	r3, #0
 8006096:	b2db      	uxtb	r3, r3
 8006098:	461a      	mov	r2, r3
 800609a:	79fb      	ldrb	r3, [r7, #7]
 800609c:	429a      	cmp	r2, r3
 800609e:	d1d7      	bne.n	8006050 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3718      	adds	r7, #24
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b088      	sub	sp, #32
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a92      	ldr	r2, [pc, #584]	; (800630c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d101      	bne.n	80060ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80060c6:	4b92      	ldr	r3, [pc, #584]	; (8006310 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80060c8:	e001      	b.n	80060ce <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80060ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a8b      	ldr	r2, [pc, #556]	; (800630c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d101      	bne.n	80060e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80060e4:	4b8a      	ldr	r3, [pc, #552]	; (8006310 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80060e6:	e001      	b.n	80060ec <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80060e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060f8:	d004      	beq.n	8006104 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f040 8099 	bne.w	8006236 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	2b02      	cmp	r3, #2
 800610c:	d107      	bne.n	800611e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006114:	2b00      	cmp	r3, #0
 8006116:	d002      	beq.n	800611e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 f925 	bl	8006368 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b01      	cmp	r3, #1
 8006126:	d107      	bne.n	8006138 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612e:	2b00      	cmp	r3, #0
 8006130:	d002      	beq.n	8006138 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f9c8 	bl	80064c8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613e:	2b40      	cmp	r3, #64	; 0x40
 8006140:	d13a      	bne.n	80061b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	f003 0320 	and.w	r3, r3, #32
 8006148:	2b00      	cmp	r3, #0
 800614a:	d035      	beq.n	80061b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a6e      	ldr	r2, [pc, #440]	; (800630c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d101      	bne.n	800615a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006156:	4b6e      	ldr	r3, [pc, #440]	; (8006310 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006158:	e001      	b.n	800615e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800615a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800615e:	685a      	ldr	r2, [r3, #4]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4969      	ldr	r1, [pc, #420]	; (800630c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006166:	428b      	cmp	r3, r1
 8006168:	d101      	bne.n	800616e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800616a:	4b69      	ldr	r3, [pc, #420]	; (8006310 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800616c:	e001      	b.n	8006172 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800616e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006172:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006176:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006186:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006188:	2300      	movs	r3, #0
 800618a:	60fb      	str	r3, [r7, #12]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	60fb      	str	r3, [r7, #12]
 800619c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061aa:	f043 0202 	orr.w	r2, r3, #2
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7ff fdec 	bl	8005d90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	f003 0308 	and.w	r3, r3, #8
 80061be:	2b08      	cmp	r3, #8
 80061c0:	f040 80c3 	bne.w	800634a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	f003 0320 	and.w	r3, r3, #32
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f000 80bd 	beq.w	800634a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	685a      	ldr	r2, [r3, #4]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061de:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a49      	ldr	r2, [pc, #292]	; (800630c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d101      	bne.n	80061ee <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80061ea:	4b49      	ldr	r3, [pc, #292]	; (8006310 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80061ec:	e001      	b.n	80061f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80061ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4944      	ldr	r1, [pc, #272]	; (800630c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80061fa:	428b      	cmp	r3, r1
 80061fc:	d101      	bne.n	8006202 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80061fe:	4b44      	ldr	r3, [pc, #272]	; (8006310 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006200:	e001      	b.n	8006206 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006202:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006206:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800620a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800620c:	2300      	movs	r3, #0
 800620e:	60bb      	str	r3, [r7, #8]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	60bb      	str	r3, [r7, #8]
 8006218:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2201      	movs	r2, #1
 800621e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006226:	f043 0204 	orr.w	r2, r3, #4
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7ff fdae 	bl	8005d90 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006234:	e089      	b.n	800634a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	f003 0302 	and.w	r3, r3, #2
 800623c:	2b02      	cmp	r3, #2
 800623e:	d107      	bne.n	8006250 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006246:	2b00      	cmp	r3, #0
 8006248:	d002      	beq.n	8006250 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 f8be 	bl	80063cc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b01      	cmp	r3, #1
 8006258:	d107      	bne.n	800626a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006260:	2b00      	cmp	r3, #0
 8006262:	d002      	beq.n	800626a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 f8fd 	bl	8006464 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006270:	2b40      	cmp	r3, #64	; 0x40
 8006272:	d12f      	bne.n	80062d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f003 0320 	and.w	r3, r3, #32
 800627a:	2b00      	cmp	r3, #0
 800627c:	d02a      	beq.n	80062d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800628c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a1e      	ldr	r2, [pc, #120]	; (800630c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d101      	bne.n	800629c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006298:	4b1d      	ldr	r3, [pc, #116]	; (8006310 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800629a:	e001      	b.n	80062a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800629c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4919      	ldr	r1, [pc, #100]	; (800630c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80062a8:	428b      	cmp	r3, r1
 80062aa:	d101      	bne.n	80062b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80062ac:	4b18      	ldr	r3, [pc, #96]	; (8006310 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80062ae:	e001      	b.n	80062b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80062b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80062b8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c6:	f043 0202 	orr.w	r2, r3, #2
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7ff fd5e 	bl	8005d90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	f003 0308 	and.w	r3, r3, #8
 80062da:	2b08      	cmp	r3, #8
 80062dc:	d136      	bne.n	800634c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	f003 0320 	and.w	r3, r3, #32
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d031      	beq.n	800634c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a07      	ldr	r2, [pc, #28]	; (800630c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d101      	bne.n	80062f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80062f2:	4b07      	ldr	r3, [pc, #28]	; (8006310 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80062f4:	e001      	b.n	80062fa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80062f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062fa:	685a      	ldr	r2, [r3, #4]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4902      	ldr	r1, [pc, #8]	; (800630c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006302:	428b      	cmp	r3, r1
 8006304:	d106      	bne.n	8006314 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006306:	4b02      	ldr	r3, [pc, #8]	; (8006310 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006308:	e006      	b.n	8006318 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800630a:	bf00      	nop
 800630c:	40003800 	.word	0x40003800
 8006310:	40003400 	.word	0x40003400
 8006314:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006318:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800631c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	685a      	ldr	r2, [r3, #4]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800632c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800633a:	f043 0204 	orr.w	r2, r3, #4
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7ff fd24 	bl	8005d90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006348:	e000      	b.n	800634c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800634a:	bf00      	nop
}
 800634c:	bf00      	nop
 800634e:	3720      	adds	r7, #32
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006374:	1c99      	adds	r1, r3, #2
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	6251      	str	r1, [r2, #36]	; 0x24
 800637a:	881a      	ldrh	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006386:	b29b      	uxth	r3, r3
 8006388:	3b01      	subs	r3, #1
 800638a:	b29a      	uxth	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006394:	b29b      	uxth	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d113      	bne.n	80063c2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80063a8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d106      	bne.n	80063c2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f7ff ffc9 	bl	8006354 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80063c2:	bf00      	nop
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
	...

080063cc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d8:	1c99      	adds	r1, r3, #2
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	6251      	str	r1, [r2, #36]	; 0x24
 80063de:	8819      	ldrh	r1, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a1d      	ldr	r2, [pc, #116]	; (800645c <I2SEx_TxISR_I2SExt+0x90>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d101      	bne.n	80063ee <I2SEx_TxISR_I2SExt+0x22>
 80063ea:	4b1d      	ldr	r3, [pc, #116]	; (8006460 <I2SEx_TxISR_I2SExt+0x94>)
 80063ec:	e001      	b.n	80063f2 <I2SEx_TxISR_I2SExt+0x26>
 80063ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063f2:	460a      	mov	r2, r1
 80063f4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	3b01      	subs	r3, #1
 80063fe:	b29a      	uxth	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006408:	b29b      	uxth	r3, r3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d121      	bne.n	8006452 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a12      	ldr	r2, [pc, #72]	; (800645c <I2SEx_TxISR_I2SExt+0x90>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d101      	bne.n	800641c <I2SEx_TxISR_I2SExt+0x50>
 8006418:	4b11      	ldr	r3, [pc, #68]	; (8006460 <I2SEx_TxISR_I2SExt+0x94>)
 800641a:	e001      	b.n	8006420 <I2SEx_TxISR_I2SExt+0x54>
 800641c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006420:	685a      	ldr	r2, [r3, #4]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	490d      	ldr	r1, [pc, #52]	; (800645c <I2SEx_TxISR_I2SExt+0x90>)
 8006428:	428b      	cmp	r3, r1
 800642a:	d101      	bne.n	8006430 <I2SEx_TxISR_I2SExt+0x64>
 800642c:	4b0c      	ldr	r3, [pc, #48]	; (8006460 <I2SEx_TxISR_I2SExt+0x94>)
 800642e:	e001      	b.n	8006434 <I2SEx_TxISR_I2SExt+0x68>
 8006430:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006434:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006438:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800643e:	b29b      	uxth	r3, r3
 8006440:	2b00      	cmp	r3, #0
 8006442:	d106      	bne.n	8006452 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f7ff ff81 	bl	8006354 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006452:	bf00      	nop
 8006454:	3708      	adds	r7, #8
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	40003800 	.word	0x40003800
 8006460:	40003400 	.word	0x40003400

08006464 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68d8      	ldr	r0, [r3, #12]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006476:	1c99      	adds	r1, r3, #2
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800647c:	b282      	uxth	r2, r0
 800647e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006484:	b29b      	uxth	r3, r3
 8006486:	3b01      	subs	r3, #1
 8006488:	b29a      	uxth	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006492:	b29b      	uxth	r3, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	d113      	bne.n	80064c0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685a      	ldr	r2, [r3, #4]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80064a6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d106      	bne.n	80064c0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7ff ff4a 	bl	8006354 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80064c0:	bf00      	nop
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a20      	ldr	r2, [pc, #128]	; (8006558 <I2SEx_RxISR_I2SExt+0x90>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d101      	bne.n	80064de <I2SEx_RxISR_I2SExt+0x16>
 80064da:	4b20      	ldr	r3, [pc, #128]	; (800655c <I2SEx_RxISR_I2SExt+0x94>)
 80064dc:	e001      	b.n	80064e2 <I2SEx_RxISR_I2SExt+0x1a>
 80064de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064e2:	68d8      	ldr	r0, [r3, #12]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e8:	1c99      	adds	r1, r3, #2
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	62d1      	str	r1, [r2, #44]	; 0x2c
 80064ee:	b282      	uxth	r2, r0
 80064f0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	3b01      	subs	r3, #1
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006504:	b29b      	uxth	r3, r3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d121      	bne.n	800654e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a12      	ldr	r2, [pc, #72]	; (8006558 <I2SEx_RxISR_I2SExt+0x90>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d101      	bne.n	8006518 <I2SEx_RxISR_I2SExt+0x50>
 8006514:	4b11      	ldr	r3, [pc, #68]	; (800655c <I2SEx_RxISR_I2SExt+0x94>)
 8006516:	e001      	b.n	800651c <I2SEx_RxISR_I2SExt+0x54>
 8006518:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	490d      	ldr	r1, [pc, #52]	; (8006558 <I2SEx_RxISR_I2SExt+0x90>)
 8006524:	428b      	cmp	r3, r1
 8006526:	d101      	bne.n	800652c <I2SEx_RxISR_I2SExt+0x64>
 8006528:	4b0c      	ldr	r3, [pc, #48]	; (800655c <I2SEx_RxISR_I2SExt+0x94>)
 800652a:	e001      	b.n	8006530 <I2SEx_RxISR_I2SExt+0x68>
 800652c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006530:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006534:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800653a:	b29b      	uxth	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d106      	bne.n	800654e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7ff ff03 	bl	8006354 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800654e:	bf00      	nop
 8006550:	3708      	adds	r7, #8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	40003800 	.word	0x40003800
 800655c:	40003400 	.word	0x40003400

08006560 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d101      	bne.n	8006572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e267      	b.n	8006a42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	2b00      	cmp	r3, #0
 800657c:	d075      	beq.n	800666a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800657e:	4b88      	ldr	r3, [pc, #544]	; (80067a0 <HAL_RCC_OscConfig+0x240>)
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f003 030c 	and.w	r3, r3, #12
 8006586:	2b04      	cmp	r3, #4
 8006588:	d00c      	beq.n	80065a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800658a:	4b85      	ldr	r3, [pc, #532]	; (80067a0 <HAL_RCC_OscConfig+0x240>)
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006592:	2b08      	cmp	r3, #8
 8006594:	d112      	bne.n	80065bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006596:	4b82      	ldr	r3, [pc, #520]	; (80067a0 <HAL_RCC_OscConfig+0x240>)
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800659e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065a2:	d10b      	bne.n	80065bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065a4:	4b7e      	ldr	r3, [pc, #504]	; (80067a0 <HAL_RCC_OscConfig+0x240>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d05b      	beq.n	8006668 <HAL_RCC_OscConfig+0x108>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d157      	bne.n	8006668 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e242      	b.n	8006a42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065c4:	d106      	bne.n	80065d4 <HAL_RCC_OscConfig+0x74>
 80065c6:	4b76      	ldr	r3, [pc, #472]	; (80067a0 <HAL_RCC_OscConfig+0x240>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a75      	ldr	r2, [pc, #468]	; (80067a0 <HAL_RCC_OscConfig+0x240>)
 80065cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065d0:	6013      	str	r3, [r2, #0]
 80065d2:	e01d      	b.n	8006610 <HAL_RCC_OscConfig+0xb0>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065dc:	d10c      	bne.n	80065f8 <HAL_RCC_OscConfig+0x98>
 80065de:	4b70      	ldr	r3, [pc, #448]	; (80067a0 <HAL_RCC_OscConfig+0x240>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a6f      	ldr	r2, [pc, #444]	; (80067a0 <HAL_RCC_OscConfig+0x240>)
 80065e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065e8:	6013      	str	r3, [r2, #0]
 80065ea:	4b6d      	ldr	r3, [pc, #436]	; (80067a0 <HAL_RCC_OscConfig+0x240>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a6c      	ldr	r2, [pc, #432]	; (80067a0 <HAL_RCC_OscConfig+0x240>)
 80065f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065f4:	6013      	str	r3, [r2, #0]
 80065f6:	e00b      	b.n	8006610 <HAL_RCC_OscConfig+0xb0>
 80065f8:	4b69      	ldr	r3, [pc, #420]	; (80067a0 <HAL_RCC_OscConfig+0x240>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a68      	ldr	r2, [pc, #416]	; (80067a0 <HAL_RCC_OscConfig+0x240>)
 80065fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006602:	6013      	str	r3, [r2, #0]
 8006604:	4b66      	ldr	r3, [pc, #408]	; (80067a0 <HAL_RCC_OscConfig+0x240>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a65      	ldr	r2, [pc, #404]	; (80067a0 <HAL_RCC_OscConfig+0x240>)
 800660a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800660e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d013      	beq.n	8006640 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006618:	f7fd f938 	bl	800388c <HAL_GetTick>
 800661c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800661e:	e008      	b.n	8006632 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006620:	f7fd f934 	bl	800388c <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	2b64      	cmp	r3, #100	; 0x64
 800662c:	d901      	bls.n	8006632 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e207      	b.n	8006a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006632:	4b5b      	ldr	r3, [pc, #364]	; (80067a0 <HAL_RCC_OscConfig+0x240>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d0f0      	beq.n	8006620 <HAL_RCC_OscConfig+0xc0>
 800663e:	e014      	b.n	800666a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006640:	f7fd f924 	bl	800388c <HAL_GetTick>
 8006644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006646:	e008      	b.n	800665a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006648:	f7fd f920 	bl	800388c <HAL_GetTick>
 800664c:	4602      	mov	r2, r0
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	2b64      	cmp	r3, #100	; 0x64
 8006654:	d901      	bls.n	800665a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e1f3      	b.n	8006a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800665a:	4b51      	ldr	r3, [pc, #324]	; (80067a0 <HAL_RCC_OscConfig+0x240>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1f0      	bne.n	8006648 <HAL_RCC_OscConfig+0xe8>
 8006666:	e000      	b.n	800666a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 0302 	and.w	r3, r3, #2
 8006672:	2b00      	cmp	r3, #0
 8006674:	d063      	beq.n	800673e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006676:	4b4a      	ldr	r3, [pc, #296]	; (80067a0 <HAL_RCC_OscConfig+0x240>)
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	f003 030c 	and.w	r3, r3, #12
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00b      	beq.n	800669a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006682:	4b47      	ldr	r3, [pc, #284]	; (80067a0 <HAL_RCC_OscConfig+0x240>)
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800668a:	2b08      	cmp	r3, #8
 800668c:	d11c      	bne.n	80066c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800668e:	4b44      	ldr	r3, [pc, #272]	; (80067a0 <HAL_RCC_OscConfig+0x240>)
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d116      	bne.n	80066c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800669a:	4b41      	ldr	r3, [pc, #260]	; (80067a0 <HAL_RCC_OscConfig+0x240>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d005      	beq.n	80066b2 <HAL_RCC_OscConfig+0x152>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d001      	beq.n	80066b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e1c7      	b.n	8006a42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066b2:	4b3b      	ldr	r3, [pc, #236]	; (80067a0 <HAL_RCC_OscConfig+0x240>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	00db      	lsls	r3, r3, #3
 80066c0:	4937      	ldr	r1, [pc, #220]	; (80067a0 <HAL_RCC_OscConfig+0x240>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066c6:	e03a      	b.n	800673e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d020      	beq.n	8006712 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066d0:	4b34      	ldr	r3, [pc, #208]	; (80067a4 <HAL_RCC_OscConfig+0x244>)
 80066d2:	2201      	movs	r2, #1
 80066d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d6:	f7fd f8d9 	bl	800388c <HAL_GetTick>
 80066da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066dc:	e008      	b.n	80066f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066de:	f7fd f8d5 	bl	800388c <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d901      	bls.n	80066f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e1a8      	b.n	8006a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066f0:	4b2b      	ldr	r3, [pc, #172]	; (80067a0 <HAL_RCC_OscConfig+0x240>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0302 	and.w	r3, r3, #2
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d0f0      	beq.n	80066de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066fc:	4b28      	ldr	r3, [pc, #160]	; (80067a0 <HAL_RCC_OscConfig+0x240>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	00db      	lsls	r3, r3, #3
 800670a:	4925      	ldr	r1, [pc, #148]	; (80067a0 <HAL_RCC_OscConfig+0x240>)
 800670c:	4313      	orrs	r3, r2
 800670e:	600b      	str	r3, [r1, #0]
 8006710:	e015      	b.n	800673e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006712:	4b24      	ldr	r3, [pc, #144]	; (80067a4 <HAL_RCC_OscConfig+0x244>)
 8006714:	2200      	movs	r2, #0
 8006716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006718:	f7fd f8b8 	bl	800388c <HAL_GetTick>
 800671c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800671e:	e008      	b.n	8006732 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006720:	f7fd f8b4 	bl	800388c <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	2b02      	cmp	r3, #2
 800672c:	d901      	bls.n	8006732 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e187      	b.n	8006a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006732:	4b1b      	ldr	r3, [pc, #108]	; (80067a0 <HAL_RCC_OscConfig+0x240>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0302 	and.w	r3, r3, #2
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1f0      	bne.n	8006720 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0308 	and.w	r3, r3, #8
 8006746:	2b00      	cmp	r3, #0
 8006748:	d036      	beq.n	80067b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d016      	beq.n	8006780 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006752:	4b15      	ldr	r3, [pc, #84]	; (80067a8 <HAL_RCC_OscConfig+0x248>)
 8006754:	2201      	movs	r2, #1
 8006756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006758:	f7fd f898 	bl	800388c <HAL_GetTick>
 800675c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800675e:	e008      	b.n	8006772 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006760:	f7fd f894 	bl	800388c <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	2b02      	cmp	r3, #2
 800676c:	d901      	bls.n	8006772 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e167      	b.n	8006a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006772:	4b0b      	ldr	r3, [pc, #44]	; (80067a0 <HAL_RCC_OscConfig+0x240>)
 8006774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b00      	cmp	r3, #0
 800677c:	d0f0      	beq.n	8006760 <HAL_RCC_OscConfig+0x200>
 800677e:	e01b      	b.n	80067b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006780:	4b09      	ldr	r3, [pc, #36]	; (80067a8 <HAL_RCC_OscConfig+0x248>)
 8006782:	2200      	movs	r2, #0
 8006784:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006786:	f7fd f881 	bl	800388c <HAL_GetTick>
 800678a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800678c:	e00e      	b.n	80067ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800678e:	f7fd f87d 	bl	800388c <HAL_GetTick>
 8006792:	4602      	mov	r2, r0
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	2b02      	cmp	r3, #2
 800679a:	d907      	bls.n	80067ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800679c:	2303      	movs	r3, #3
 800679e:	e150      	b.n	8006a42 <HAL_RCC_OscConfig+0x4e2>
 80067a0:	40023800 	.word	0x40023800
 80067a4:	42470000 	.word	0x42470000
 80067a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067ac:	4b88      	ldr	r3, [pc, #544]	; (80069d0 <HAL_RCC_OscConfig+0x470>)
 80067ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067b0:	f003 0302 	and.w	r3, r3, #2
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1ea      	bne.n	800678e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0304 	and.w	r3, r3, #4
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f000 8097 	beq.w	80068f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067c6:	2300      	movs	r3, #0
 80067c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067ca:	4b81      	ldr	r3, [pc, #516]	; (80069d0 <HAL_RCC_OscConfig+0x470>)
 80067cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10f      	bne.n	80067f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067d6:	2300      	movs	r3, #0
 80067d8:	60bb      	str	r3, [r7, #8]
 80067da:	4b7d      	ldr	r3, [pc, #500]	; (80069d0 <HAL_RCC_OscConfig+0x470>)
 80067dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067de:	4a7c      	ldr	r2, [pc, #496]	; (80069d0 <HAL_RCC_OscConfig+0x470>)
 80067e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067e4:	6413      	str	r3, [r2, #64]	; 0x40
 80067e6:	4b7a      	ldr	r3, [pc, #488]	; (80069d0 <HAL_RCC_OscConfig+0x470>)
 80067e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067ee:	60bb      	str	r3, [r7, #8]
 80067f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067f2:	2301      	movs	r3, #1
 80067f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067f6:	4b77      	ldr	r3, [pc, #476]	; (80069d4 <HAL_RCC_OscConfig+0x474>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d118      	bne.n	8006834 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006802:	4b74      	ldr	r3, [pc, #464]	; (80069d4 <HAL_RCC_OscConfig+0x474>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a73      	ldr	r2, [pc, #460]	; (80069d4 <HAL_RCC_OscConfig+0x474>)
 8006808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800680c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800680e:	f7fd f83d 	bl	800388c <HAL_GetTick>
 8006812:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006814:	e008      	b.n	8006828 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006816:	f7fd f839 	bl	800388c <HAL_GetTick>
 800681a:	4602      	mov	r2, r0
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	2b02      	cmp	r3, #2
 8006822:	d901      	bls.n	8006828 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e10c      	b.n	8006a42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006828:	4b6a      	ldr	r3, [pc, #424]	; (80069d4 <HAL_RCC_OscConfig+0x474>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006830:	2b00      	cmp	r3, #0
 8006832:	d0f0      	beq.n	8006816 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d106      	bne.n	800684a <HAL_RCC_OscConfig+0x2ea>
 800683c:	4b64      	ldr	r3, [pc, #400]	; (80069d0 <HAL_RCC_OscConfig+0x470>)
 800683e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006840:	4a63      	ldr	r2, [pc, #396]	; (80069d0 <HAL_RCC_OscConfig+0x470>)
 8006842:	f043 0301 	orr.w	r3, r3, #1
 8006846:	6713      	str	r3, [r2, #112]	; 0x70
 8006848:	e01c      	b.n	8006884 <HAL_RCC_OscConfig+0x324>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	2b05      	cmp	r3, #5
 8006850:	d10c      	bne.n	800686c <HAL_RCC_OscConfig+0x30c>
 8006852:	4b5f      	ldr	r3, [pc, #380]	; (80069d0 <HAL_RCC_OscConfig+0x470>)
 8006854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006856:	4a5e      	ldr	r2, [pc, #376]	; (80069d0 <HAL_RCC_OscConfig+0x470>)
 8006858:	f043 0304 	orr.w	r3, r3, #4
 800685c:	6713      	str	r3, [r2, #112]	; 0x70
 800685e:	4b5c      	ldr	r3, [pc, #368]	; (80069d0 <HAL_RCC_OscConfig+0x470>)
 8006860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006862:	4a5b      	ldr	r2, [pc, #364]	; (80069d0 <HAL_RCC_OscConfig+0x470>)
 8006864:	f043 0301 	orr.w	r3, r3, #1
 8006868:	6713      	str	r3, [r2, #112]	; 0x70
 800686a:	e00b      	b.n	8006884 <HAL_RCC_OscConfig+0x324>
 800686c:	4b58      	ldr	r3, [pc, #352]	; (80069d0 <HAL_RCC_OscConfig+0x470>)
 800686e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006870:	4a57      	ldr	r2, [pc, #348]	; (80069d0 <HAL_RCC_OscConfig+0x470>)
 8006872:	f023 0301 	bic.w	r3, r3, #1
 8006876:	6713      	str	r3, [r2, #112]	; 0x70
 8006878:	4b55      	ldr	r3, [pc, #340]	; (80069d0 <HAL_RCC_OscConfig+0x470>)
 800687a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800687c:	4a54      	ldr	r2, [pc, #336]	; (80069d0 <HAL_RCC_OscConfig+0x470>)
 800687e:	f023 0304 	bic.w	r3, r3, #4
 8006882:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d015      	beq.n	80068b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800688c:	f7fc fffe 	bl	800388c <HAL_GetTick>
 8006890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006892:	e00a      	b.n	80068aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006894:	f7fc fffa 	bl	800388c <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	f241 3288 	movw	r2, #5000	; 0x1388
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d901      	bls.n	80068aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e0cb      	b.n	8006a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068aa:	4b49      	ldr	r3, [pc, #292]	; (80069d0 <HAL_RCC_OscConfig+0x470>)
 80068ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d0ee      	beq.n	8006894 <HAL_RCC_OscConfig+0x334>
 80068b6:	e014      	b.n	80068e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068b8:	f7fc ffe8 	bl	800388c <HAL_GetTick>
 80068bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068be:	e00a      	b.n	80068d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068c0:	f7fc ffe4 	bl	800388c <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d901      	bls.n	80068d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e0b5      	b.n	8006a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068d6:	4b3e      	ldr	r3, [pc, #248]	; (80069d0 <HAL_RCC_OscConfig+0x470>)
 80068d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068da:	f003 0302 	and.w	r3, r3, #2
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1ee      	bne.n	80068c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068e2:	7dfb      	ldrb	r3, [r7, #23]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d105      	bne.n	80068f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068e8:	4b39      	ldr	r3, [pc, #228]	; (80069d0 <HAL_RCC_OscConfig+0x470>)
 80068ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ec:	4a38      	ldr	r2, [pc, #224]	; (80069d0 <HAL_RCC_OscConfig+0x470>)
 80068ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f000 80a1 	beq.w	8006a40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80068fe:	4b34      	ldr	r3, [pc, #208]	; (80069d0 <HAL_RCC_OscConfig+0x470>)
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f003 030c 	and.w	r3, r3, #12
 8006906:	2b08      	cmp	r3, #8
 8006908:	d05c      	beq.n	80069c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	2b02      	cmp	r3, #2
 8006910:	d141      	bne.n	8006996 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006912:	4b31      	ldr	r3, [pc, #196]	; (80069d8 <HAL_RCC_OscConfig+0x478>)
 8006914:	2200      	movs	r2, #0
 8006916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006918:	f7fc ffb8 	bl	800388c <HAL_GetTick>
 800691c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800691e:	e008      	b.n	8006932 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006920:	f7fc ffb4 	bl	800388c <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	2b02      	cmp	r3, #2
 800692c:	d901      	bls.n	8006932 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e087      	b.n	8006a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006932:	4b27      	ldr	r3, [pc, #156]	; (80069d0 <HAL_RCC_OscConfig+0x470>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1f0      	bne.n	8006920 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	69da      	ldr	r2, [r3, #28]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	431a      	orrs	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694c:	019b      	lsls	r3, r3, #6
 800694e:	431a      	orrs	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006954:	085b      	lsrs	r3, r3, #1
 8006956:	3b01      	subs	r3, #1
 8006958:	041b      	lsls	r3, r3, #16
 800695a:	431a      	orrs	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006960:	061b      	lsls	r3, r3, #24
 8006962:	491b      	ldr	r1, [pc, #108]	; (80069d0 <HAL_RCC_OscConfig+0x470>)
 8006964:	4313      	orrs	r3, r2
 8006966:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006968:	4b1b      	ldr	r3, [pc, #108]	; (80069d8 <HAL_RCC_OscConfig+0x478>)
 800696a:	2201      	movs	r2, #1
 800696c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800696e:	f7fc ff8d 	bl	800388c <HAL_GetTick>
 8006972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006974:	e008      	b.n	8006988 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006976:	f7fc ff89 	bl	800388c <HAL_GetTick>
 800697a:	4602      	mov	r2, r0
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	2b02      	cmp	r3, #2
 8006982:	d901      	bls.n	8006988 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e05c      	b.n	8006a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006988:	4b11      	ldr	r3, [pc, #68]	; (80069d0 <HAL_RCC_OscConfig+0x470>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d0f0      	beq.n	8006976 <HAL_RCC_OscConfig+0x416>
 8006994:	e054      	b.n	8006a40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006996:	4b10      	ldr	r3, [pc, #64]	; (80069d8 <HAL_RCC_OscConfig+0x478>)
 8006998:	2200      	movs	r2, #0
 800699a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800699c:	f7fc ff76 	bl	800388c <HAL_GetTick>
 80069a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069a2:	e008      	b.n	80069b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069a4:	f7fc ff72 	bl	800388c <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e045      	b.n	8006a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069b6:	4b06      	ldr	r3, [pc, #24]	; (80069d0 <HAL_RCC_OscConfig+0x470>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1f0      	bne.n	80069a4 <HAL_RCC_OscConfig+0x444>
 80069c2:	e03d      	b.n	8006a40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d107      	bne.n	80069dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e038      	b.n	8006a42 <HAL_RCC_OscConfig+0x4e2>
 80069d0:	40023800 	.word	0x40023800
 80069d4:	40007000 	.word	0x40007000
 80069d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80069dc:	4b1b      	ldr	r3, [pc, #108]	; (8006a4c <HAL_RCC_OscConfig+0x4ec>)
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d028      	beq.n	8006a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d121      	bne.n	8006a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d11a      	bne.n	8006a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006a12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d111      	bne.n	8006a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a22:	085b      	lsrs	r3, r3, #1
 8006a24:	3b01      	subs	r3, #1
 8006a26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d107      	bne.n	8006a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d001      	beq.n	8006a40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e000      	b.n	8006a42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3718      	adds	r7, #24
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	40023800 	.word	0x40023800

08006a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d101      	bne.n	8006a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e0cc      	b.n	8006bfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a64:	4b68      	ldr	r3, [pc, #416]	; (8006c08 <HAL_RCC_ClockConfig+0x1b8>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0307 	and.w	r3, r3, #7
 8006a6c:	683a      	ldr	r2, [r7, #0]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d90c      	bls.n	8006a8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a72:	4b65      	ldr	r3, [pc, #404]	; (8006c08 <HAL_RCC_ClockConfig+0x1b8>)
 8006a74:	683a      	ldr	r2, [r7, #0]
 8006a76:	b2d2      	uxtb	r2, r2
 8006a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a7a:	4b63      	ldr	r3, [pc, #396]	; (8006c08 <HAL_RCC_ClockConfig+0x1b8>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0307 	and.w	r3, r3, #7
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d001      	beq.n	8006a8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e0b8      	b.n	8006bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0302 	and.w	r3, r3, #2
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d020      	beq.n	8006ada <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0304 	and.w	r3, r3, #4
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d005      	beq.n	8006ab0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006aa4:	4b59      	ldr	r3, [pc, #356]	; (8006c0c <HAL_RCC_ClockConfig+0x1bc>)
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	4a58      	ldr	r2, [pc, #352]	; (8006c0c <HAL_RCC_ClockConfig+0x1bc>)
 8006aaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006aae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0308 	and.w	r3, r3, #8
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d005      	beq.n	8006ac8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006abc:	4b53      	ldr	r3, [pc, #332]	; (8006c0c <HAL_RCC_ClockConfig+0x1bc>)
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	4a52      	ldr	r2, [pc, #328]	; (8006c0c <HAL_RCC_ClockConfig+0x1bc>)
 8006ac2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006ac6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ac8:	4b50      	ldr	r3, [pc, #320]	; (8006c0c <HAL_RCC_ClockConfig+0x1bc>)
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	494d      	ldr	r1, [pc, #308]	; (8006c0c <HAL_RCC_ClockConfig+0x1bc>)
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0301 	and.w	r3, r3, #1
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d044      	beq.n	8006b70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d107      	bne.n	8006afe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006aee:	4b47      	ldr	r3, [pc, #284]	; (8006c0c <HAL_RCC_ClockConfig+0x1bc>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d119      	bne.n	8006b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e07f      	b.n	8006bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d003      	beq.n	8006b0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b0a:	2b03      	cmp	r3, #3
 8006b0c:	d107      	bne.n	8006b1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b0e:	4b3f      	ldr	r3, [pc, #252]	; (8006c0c <HAL_RCC_ClockConfig+0x1bc>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d109      	bne.n	8006b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e06f      	b.n	8006bfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b1e:	4b3b      	ldr	r3, [pc, #236]	; (8006c0c <HAL_RCC_ClockConfig+0x1bc>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0302 	and.w	r3, r3, #2
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d101      	bne.n	8006b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e067      	b.n	8006bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b2e:	4b37      	ldr	r3, [pc, #220]	; (8006c0c <HAL_RCC_ClockConfig+0x1bc>)
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	f023 0203 	bic.w	r2, r3, #3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	4934      	ldr	r1, [pc, #208]	; (8006c0c <HAL_RCC_ClockConfig+0x1bc>)
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b40:	f7fc fea4 	bl	800388c <HAL_GetTick>
 8006b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b46:	e00a      	b.n	8006b5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b48:	f7fc fea0 	bl	800388c <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d901      	bls.n	8006b5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e04f      	b.n	8006bfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b5e:	4b2b      	ldr	r3, [pc, #172]	; (8006c0c <HAL_RCC_ClockConfig+0x1bc>)
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f003 020c 	and.w	r2, r3, #12
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d1eb      	bne.n	8006b48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b70:	4b25      	ldr	r3, [pc, #148]	; (8006c08 <HAL_RCC_ClockConfig+0x1b8>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0307 	and.w	r3, r3, #7
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d20c      	bcs.n	8006b98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b7e:	4b22      	ldr	r3, [pc, #136]	; (8006c08 <HAL_RCC_ClockConfig+0x1b8>)
 8006b80:	683a      	ldr	r2, [r7, #0]
 8006b82:	b2d2      	uxtb	r2, r2
 8006b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b86:	4b20      	ldr	r3, [pc, #128]	; (8006c08 <HAL_RCC_ClockConfig+0x1b8>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0307 	and.w	r3, r3, #7
 8006b8e:	683a      	ldr	r2, [r7, #0]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d001      	beq.n	8006b98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e032      	b.n	8006bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0304 	and.w	r3, r3, #4
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d008      	beq.n	8006bb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ba4:	4b19      	ldr	r3, [pc, #100]	; (8006c0c <HAL_RCC_ClockConfig+0x1bc>)
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	4916      	ldr	r1, [pc, #88]	; (8006c0c <HAL_RCC_ClockConfig+0x1bc>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0308 	and.w	r3, r3, #8
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d009      	beq.n	8006bd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006bc2:	4b12      	ldr	r3, [pc, #72]	; (8006c0c <HAL_RCC_ClockConfig+0x1bc>)
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	00db      	lsls	r3, r3, #3
 8006bd0:	490e      	ldr	r1, [pc, #56]	; (8006c0c <HAL_RCC_ClockConfig+0x1bc>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006bd6:	f000 f821 	bl	8006c1c <HAL_RCC_GetSysClockFreq>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	4b0b      	ldr	r3, [pc, #44]	; (8006c0c <HAL_RCC_ClockConfig+0x1bc>)
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	091b      	lsrs	r3, r3, #4
 8006be2:	f003 030f 	and.w	r3, r3, #15
 8006be6:	490a      	ldr	r1, [pc, #40]	; (8006c10 <HAL_RCC_ClockConfig+0x1c0>)
 8006be8:	5ccb      	ldrb	r3, [r1, r3]
 8006bea:	fa22 f303 	lsr.w	r3, r2, r3
 8006bee:	4a09      	ldr	r2, [pc, #36]	; (8006c14 <HAL_RCC_ClockConfig+0x1c4>)
 8006bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006bf2:	4b09      	ldr	r3, [pc, #36]	; (8006c18 <HAL_RCC_ClockConfig+0x1c8>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7fc fe04 	bl	8003804 <HAL_InitTick>

  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	40023c00 	.word	0x40023c00
 8006c0c:	40023800 	.word	0x40023800
 8006c10:	0800bee0 	.word	0x0800bee0
 8006c14:	20000004 	.word	0x20000004
 8006c18:	20000008 	.word	0x20000008

08006c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c20:	b094      	sub	sp, #80	; 0x50
 8006c22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	647b      	str	r3, [r7, #68]	; 0x44
 8006c28:	2300      	movs	r3, #0
 8006c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006c30:	2300      	movs	r3, #0
 8006c32:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c34:	4b79      	ldr	r3, [pc, #484]	; (8006e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f003 030c 	and.w	r3, r3, #12
 8006c3c:	2b08      	cmp	r3, #8
 8006c3e:	d00d      	beq.n	8006c5c <HAL_RCC_GetSysClockFreq+0x40>
 8006c40:	2b08      	cmp	r3, #8
 8006c42:	f200 80e1 	bhi.w	8006e08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d002      	beq.n	8006c50 <HAL_RCC_GetSysClockFreq+0x34>
 8006c4a:	2b04      	cmp	r3, #4
 8006c4c:	d003      	beq.n	8006c56 <HAL_RCC_GetSysClockFreq+0x3a>
 8006c4e:	e0db      	b.n	8006e08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c50:	4b73      	ldr	r3, [pc, #460]	; (8006e20 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c52:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006c54:	e0db      	b.n	8006e0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c56:	4b73      	ldr	r3, [pc, #460]	; (8006e24 <HAL_RCC_GetSysClockFreq+0x208>)
 8006c58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c5a:	e0d8      	b.n	8006e0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c5c:	4b6f      	ldr	r3, [pc, #444]	; (8006e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c64:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c66:	4b6d      	ldr	r3, [pc, #436]	; (8006e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d063      	beq.n	8006d3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c72:	4b6a      	ldr	r3, [pc, #424]	; (8006e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	099b      	lsrs	r3, r3, #6
 8006c78:	2200      	movs	r2, #0
 8006c7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c84:	633b      	str	r3, [r7, #48]	; 0x30
 8006c86:	2300      	movs	r3, #0
 8006c88:	637b      	str	r3, [r7, #52]	; 0x34
 8006c8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006c8e:	4622      	mov	r2, r4
 8006c90:	462b      	mov	r3, r5
 8006c92:	f04f 0000 	mov.w	r0, #0
 8006c96:	f04f 0100 	mov.w	r1, #0
 8006c9a:	0159      	lsls	r1, r3, #5
 8006c9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ca0:	0150      	lsls	r0, r2, #5
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	1a51      	subs	r1, r2, r1
 8006caa:	6139      	str	r1, [r7, #16]
 8006cac:	4629      	mov	r1, r5
 8006cae:	eb63 0301 	sbc.w	r3, r3, r1
 8006cb2:	617b      	str	r3, [r7, #20]
 8006cb4:	f04f 0200 	mov.w	r2, #0
 8006cb8:	f04f 0300 	mov.w	r3, #0
 8006cbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006cc0:	4659      	mov	r1, fp
 8006cc2:	018b      	lsls	r3, r1, #6
 8006cc4:	4651      	mov	r1, sl
 8006cc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006cca:	4651      	mov	r1, sl
 8006ccc:	018a      	lsls	r2, r1, #6
 8006cce:	4651      	mov	r1, sl
 8006cd0:	ebb2 0801 	subs.w	r8, r2, r1
 8006cd4:	4659      	mov	r1, fp
 8006cd6:	eb63 0901 	sbc.w	r9, r3, r1
 8006cda:	f04f 0200 	mov.w	r2, #0
 8006cde:	f04f 0300 	mov.w	r3, #0
 8006ce2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ce6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cee:	4690      	mov	r8, r2
 8006cf0:	4699      	mov	r9, r3
 8006cf2:	4623      	mov	r3, r4
 8006cf4:	eb18 0303 	adds.w	r3, r8, r3
 8006cf8:	60bb      	str	r3, [r7, #8]
 8006cfa:	462b      	mov	r3, r5
 8006cfc:	eb49 0303 	adc.w	r3, r9, r3
 8006d00:	60fb      	str	r3, [r7, #12]
 8006d02:	f04f 0200 	mov.w	r2, #0
 8006d06:	f04f 0300 	mov.w	r3, #0
 8006d0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d0e:	4629      	mov	r1, r5
 8006d10:	024b      	lsls	r3, r1, #9
 8006d12:	4621      	mov	r1, r4
 8006d14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d18:	4621      	mov	r1, r4
 8006d1a:	024a      	lsls	r2, r1, #9
 8006d1c:	4610      	mov	r0, r2
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d22:	2200      	movs	r2, #0
 8006d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d2c:	f7f9 ff58 	bl	8000be0 <__aeabi_uldivmod>
 8006d30:	4602      	mov	r2, r0
 8006d32:	460b      	mov	r3, r1
 8006d34:	4613      	mov	r3, r2
 8006d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d38:	e058      	b.n	8006dec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d3a:	4b38      	ldr	r3, [pc, #224]	; (8006e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	099b      	lsrs	r3, r3, #6
 8006d40:	2200      	movs	r2, #0
 8006d42:	4618      	mov	r0, r3
 8006d44:	4611      	mov	r1, r2
 8006d46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d4a:	623b      	str	r3, [r7, #32]
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8006d50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006d54:	4642      	mov	r2, r8
 8006d56:	464b      	mov	r3, r9
 8006d58:	f04f 0000 	mov.w	r0, #0
 8006d5c:	f04f 0100 	mov.w	r1, #0
 8006d60:	0159      	lsls	r1, r3, #5
 8006d62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d66:	0150      	lsls	r0, r2, #5
 8006d68:	4602      	mov	r2, r0
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	4641      	mov	r1, r8
 8006d6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006d72:	4649      	mov	r1, r9
 8006d74:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d78:	f04f 0200 	mov.w	r2, #0
 8006d7c:	f04f 0300 	mov.w	r3, #0
 8006d80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006d84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006d88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006d8c:	ebb2 040a 	subs.w	r4, r2, sl
 8006d90:	eb63 050b 	sbc.w	r5, r3, fp
 8006d94:	f04f 0200 	mov.w	r2, #0
 8006d98:	f04f 0300 	mov.w	r3, #0
 8006d9c:	00eb      	lsls	r3, r5, #3
 8006d9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006da2:	00e2      	lsls	r2, r4, #3
 8006da4:	4614      	mov	r4, r2
 8006da6:	461d      	mov	r5, r3
 8006da8:	4643      	mov	r3, r8
 8006daa:	18e3      	adds	r3, r4, r3
 8006dac:	603b      	str	r3, [r7, #0]
 8006dae:	464b      	mov	r3, r9
 8006db0:	eb45 0303 	adc.w	r3, r5, r3
 8006db4:	607b      	str	r3, [r7, #4]
 8006db6:	f04f 0200 	mov.w	r2, #0
 8006dba:	f04f 0300 	mov.w	r3, #0
 8006dbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006dc2:	4629      	mov	r1, r5
 8006dc4:	028b      	lsls	r3, r1, #10
 8006dc6:	4621      	mov	r1, r4
 8006dc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006dcc:	4621      	mov	r1, r4
 8006dce:	028a      	lsls	r2, r1, #10
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	61bb      	str	r3, [r7, #24]
 8006dda:	61fa      	str	r2, [r7, #28]
 8006ddc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006de0:	f7f9 fefe 	bl	8000be0 <__aeabi_uldivmod>
 8006de4:	4602      	mov	r2, r0
 8006de6:	460b      	mov	r3, r1
 8006de8:	4613      	mov	r3, r2
 8006dea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006dec:	4b0b      	ldr	r3, [pc, #44]	; (8006e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	0c1b      	lsrs	r3, r3, #16
 8006df2:	f003 0303 	and.w	r3, r3, #3
 8006df6:	3301      	adds	r3, #1
 8006df8:	005b      	lsls	r3, r3, #1
 8006dfa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006dfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e06:	e002      	b.n	8006e0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e08:	4b05      	ldr	r3, [pc, #20]	; (8006e20 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e0a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3750      	adds	r7, #80	; 0x50
 8006e14:	46bd      	mov	sp, r7
 8006e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e1a:	bf00      	nop
 8006e1c:	40023800 	.word	0x40023800
 8006e20:	00f42400 	.word	0x00f42400
 8006e24:	007a1200 	.word	0x007a1200

08006e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e2c:	4b03      	ldr	r3, [pc, #12]	; (8006e3c <HAL_RCC_GetHCLKFreq+0x14>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	20000004 	.word	0x20000004

08006e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006e44:	f7ff fff0 	bl	8006e28 <HAL_RCC_GetHCLKFreq>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	4b05      	ldr	r3, [pc, #20]	; (8006e60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	0a9b      	lsrs	r3, r3, #10
 8006e50:	f003 0307 	and.w	r3, r3, #7
 8006e54:	4903      	ldr	r1, [pc, #12]	; (8006e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e56:	5ccb      	ldrb	r3, [r1, r3]
 8006e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	40023800 	.word	0x40023800
 8006e64:	0800bef0 	.word	0x0800bef0

08006e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006e6c:	f7ff ffdc 	bl	8006e28 <HAL_RCC_GetHCLKFreq>
 8006e70:	4602      	mov	r2, r0
 8006e72:	4b05      	ldr	r3, [pc, #20]	; (8006e88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	0b5b      	lsrs	r3, r3, #13
 8006e78:	f003 0307 	and.w	r3, r3, #7
 8006e7c:	4903      	ldr	r1, [pc, #12]	; (8006e8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e7e:	5ccb      	ldrb	r3, [r1, r3]
 8006e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	40023800 	.word	0x40023800
 8006e8c:	0800bef0 	.word	0x0800bef0

08006e90 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0301 	and.w	r3, r3, #1
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d105      	bne.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d038      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006eb8:	4b68      	ldr	r3, [pc, #416]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006eba:	2200      	movs	r2, #0
 8006ebc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ebe:	f7fc fce5 	bl	800388c <HAL_GetTick>
 8006ec2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ec4:	e008      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006ec6:	f7fc fce1 	bl	800388c <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d901      	bls.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e0bd      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ed8:	4b61      	ldr	r3, [pc, #388]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1f0      	bne.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685a      	ldr	r2, [r3, #4]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	019b      	lsls	r3, r3, #6
 8006eee:	431a      	orrs	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	071b      	lsls	r3, r3, #28
 8006ef6:	495a      	ldr	r1, [pc, #360]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006efe:	4b57      	ldr	r3, [pc, #348]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006f00:	2201      	movs	r2, #1
 8006f02:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f04:	f7fc fcc2 	bl	800388c <HAL_GetTick>
 8006f08:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f0a:	e008      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006f0c:	f7fc fcbe 	bl	800388c <HAL_GetTick>
 8006f10:	4602      	mov	r2, r0
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d901      	bls.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e09a      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f1e:	4b50      	ldr	r3, [pc, #320]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d0f0      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 0302 	and.w	r3, r3, #2
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f000 8083 	beq.w	800703e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f38:	2300      	movs	r3, #0
 8006f3a:	60fb      	str	r3, [r7, #12]
 8006f3c:	4b48      	ldr	r3, [pc, #288]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f40:	4a47      	ldr	r2, [pc, #284]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f46:	6413      	str	r3, [r2, #64]	; 0x40
 8006f48:	4b45      	ldr	r3, [pc, #276]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f50:	60fb      	str	r3, [r7, #12]
 8006f52:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006f54:	4b43      	ldr	r3, [pc, #268]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a42      	ldr	r2, [pc, #264]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f5e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006f60:	f7fc fc94 	bl	800388c <HAL_GetTick>
 8006f64:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006f66:	e008      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006f68:	f7fc fc90 	bl	800388c <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d901      	bls.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e06c      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006f7a:	4b3a      	ldr	r3, [pc, #232]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d0f0      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006f86:	4b36      	ldr	r3, [pc, #216]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f8e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d02f      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d028      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006fa4:	4b2e      	ldr	r3, [pc, #184]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fac:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006fae:	4b2e      	ldr	r3, [pc, #184]	; (8007068 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006fb4:	4b2c      	ldr	r3, [pc, #176]	; (8007068 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006fba:	4a29      	ldr	r2, [pc, #164]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006fc0:	4b27      	ldr	r3, [pc, #156]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc4:	f003 0301 	and.w	r3, r3, #1
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d114      	bne.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006fcc:	f7fc fc5e 	bl	800388c <HAL_GetTick>
 8006fd0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fd2:	e00a      	b.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fd4:	f7fc fc5a 	bl	800388c <HAL_GetTick>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d901      	bls.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e034      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fea:	4b1d      	ldr	r3, [pc, #116]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fee:	f003 0302 	and.w	r3, r3, #2
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d0ee      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ffe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007002:	d10d      	bne.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8007004:	4b16      	ldr	r3, [pc, #88]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007018:	4911      	ldr	r1, [pc, #68]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800701a:	4313      	orrs	r3, r2
 800701c:	608b      	str	r3, [r1, #8]
 800701e:	e005      	b.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8007020:	4b0f      	ldr	r3, [pc, #60]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	4a0e      	ldr	r2, [pc, #56]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007026:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800702a:	6093      	str	r3, [r2, #8]
 800702c:	4b0c      	ldr	r3, [pc, #48]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800702e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007038:	4909      	ldr	r1, [pc, #36]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800703a:	4313      	orrs	r3, r2
 800703c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0308 	and.w	r3, r3, #8
 8007046:	2b00      	cmp	r3, #0
 8007048:	d003      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	7d1a      	ldrb	r2, [r3, #20]
 800704e:	4b07      	ldr	r3, [pc, #28]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007050:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3718      	adds	r7, #24
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	42470068 	.word	0x42470068
 8007060:	40023800 	.word	0x40023800
 8007064:	40007000 	.word	0x40007000
 8007068:	42470e40 	.word	0x42470e40
 800706c:	424711e0 	.word	0x424711e0

08007070 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007070:	b480      	push	{r7}
 8007072:	b087      	sub	sp, #28
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007078:	2300      	movs	r3, #0
 800707a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800707c:	2300      	movs	r3, #0
 800707e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007080:	2300      	movs	r3, #0
 8007082:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007084:	2300      	movs	r3, #0
 8007086:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d140      	bne.n	8007110 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800708e:	4b24      	ldr	r3, [pc, #144]	; (8007120 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007096:	60fb      	str	r3, [r7, #12]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d005      	beq.n	80070aa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d131      	bne.n	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80070a4:	4b1f      	ldr	r3, [pc, #124]	; (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80070a6:	617b      	str	r3, [r7, #20]
          break;
 80070a8:	e031      	b.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80070aa:	4b1d      	ldr	r3, [pc, #116]	; (8007120 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070b6:	d109      	bne.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80070b8:	4b19      	ldr	r3, [pc, #100]	; (8007120 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80070ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070c2:	4a19      	ldr	r2, [pc, #100]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80070c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c8:	613b      	str	r3, [r7, #16]
 80070ca:	e008      	b.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80070cc:	4b14      	ldr	r3, [pc, #80]	; (8007120 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80070ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070d6:	4a15      	ldr	r2, [pc, #84]	; (800712c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80070d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070dc:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80070de:	4b10      	ldr	r3, [pc, #64]	; (8007120 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80070e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070e4:	099b      	lsrs	r3, r3, #6
 80070e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	fb02 f303 	mul.w	r3, r2, r3
 80070f0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80070f2:	4b0b      	ldr	r3, [pc, #44]	; (8007120 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80070f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070f8:	0f1b      	lsrs	r3, r3, #28
 80070fa:	f003 0307 	and.w	r3, r3, #7
 80070fe:	68ba      	ldr	r2, [r7, #8]
 8007100:	fbb2 f3f3 	udiv	r3, r2, r3
 8007104:	617b      	str	r3, [r7, #20]
          break;
 8007106:	e002      	b.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007108:	2300      	movs	r3, #0
 800710a:	617b      	str	r3, [r7, #20]
          break;
 800710c:	bf00      	nop
        }
      }
      break;
 800710e:	bf00      	nop
    }
  }
  return frequency;
 8007110:	697b      	ldr	r3, [r7, #20]
}
 8007112:	4618      	mov	r0, r3
 8007114:	371c      	adds	r7, #28
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	40023800 	.word	0x40023800
 8007124:	00bb8000 	.word	0x00bb8000
 8007128:	007a1200 	.word	0x007a1200
 800712c:	00f42400 	.word	0x00f42400

08007130 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e041      	b.n	80071c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d106      	bne.n	800715c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7fc f9c6 	bl	80034e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2202      	movs	r2, #2
 8007160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	3304      	adds	r3, #4
 800716c:	4619      	mov	r1, r3
 800716e:	4610      	mov	r0, r2
 8007170:	f000 fc82 	bl	8007a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
	...

080071d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d001      	beq.n	80071e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e044      	b.n	8007272 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2202      	movs	r2, #2
 80071ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68da      	ldr	r2, [r3, #12]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f042 0201 	orr.w	r2, r2, #1
 80071fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a1e      	ldr	r2, [pc, #120]	; (8007280 <HAL_TIM_Base_Start_IT+0xb0>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d018      	beq.n	800723c <HAL_TIM_Base_Start_IT+0x6c>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007212:	d013      	beq.n	800723c <HAL_TIM_Base_Start_IT+0x6c>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a1a      	ldr	r2, [pc, #104]	; (8007284 <HAL_TIM_Base_Start_IT+0xb4>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d00e      	beq.n	800723c <HAL_TIM_Base_Start_IT+0x6c>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a19      	ldr	r2, [pc, #100]	; (8007288 <HAL_TIM_Base_Start_IT+0xb8>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d009      	beq.n	800723c <HAL_TIM_Base_Start_IT+0x6c>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a17      	ldr	r2, [pc, #92]	; (800728c <HAL_TIM_Base_Start_IT+0xbc>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d004      	beq.n	800723c <HAL_TIM_Base_Start_IT+0x6c>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a16      	ldr	r2, [pc, #88]	; (8007290 <HAL_TIM_Base_Start_IT+0xc0>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d111      	bne.n	8007260 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f003 0307 	and.w	r3, r3, #7
 8007246:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2b06      	cmp	r3, #6
 800724c:	d010      	beq.n	8007270 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f042 0201 	orr.w	r2, r2, #1
 800725c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800725e:	e007      	b.n	8007270 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f042 0201 	orr.w	r2, r2, #1
 800726e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3714      	adds	r7, #20
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	40010000 	.word	0x40010000
 8007284:	40000400 	.word	0x40000400
 8007288:	40000800 	.word	0x40000800
 800728c:	40000c00 	.word	0x40000c00
 8007290:	40014000 	.word	0x40014000

08007294 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68da      	ldr	r2, [r3, #12]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 0201 	bic.w	r2, r2, #1
 80072aa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	6a1a      	ldr	r2, [r3, #32]
 80072b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80072b6:	4013      	ands	r3, r2
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10f      	bne.n	80072dc <HAL_TIM_Base_Stop_IT+0x48>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6a1a      	ldr	r2, [r3, #32]
 80072c2:	f240 4344 	movw	r3, #1092	; 0x444
 80072c6:	4013      	ands	r3, r2
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d107      	bne.n	80072dc <HAL_TIM_Base_Stop_IT+0x48>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f022 0201 	bic.w	r2, r2, #1
 80072da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b082      	sub	sp, #8
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d101      	bne.n	8007304 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e041      	b.n	8007388 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800730a:	b2db      	uxtb	r3, r3
 800730c:	2b00      	cmp	r3, #0
 800730e:	d106      	bne.n	800731e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 f839 	bl	8007390 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2202      	movs	r2, #2
 8007322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	3304      	adds	r3, #4
 800732e:	4619      	mov	r1, r3
 8007330:	4610      	mov	r0, r2
 8007332:	f000 fba1 	bl	8007a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2201      	movs	r2, #1
 800733a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2201      	movs	r2, #1
 800734a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2201      	movs	r2, #1
 800735a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2201      	movs	r2, #1
 800736a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2201      	movs	r2, #1
 8007372:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2201      	movs	r2, #1
 800737a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2201      	movs	r2, #1
 8007382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3708      	adds	r7, #8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007398:	bf00      	nop
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d109      	bne.n	80073c8 <HAL_TIM_PWM_Start+0x24>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	2b01      	cmp	r3, #1
 80073be:	bf14      	ite	ne
 80073c0:	2301      	movne	r3, #1
 80073c2:	2300      	moveq	r3, #0
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	e022      	b.n	800740e <HAL_TIM_PWM_Start+0x6a>
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	2b04      	cmp	r3, #4
 80073cc:	d109      	bne.n	80073e2 <HAL_TIM_PWM_Start+0x3e>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	bf14      	ite	ne
 80073da:	2301      	movne	r3, #1
 80073dc:	2300      	moveq	r3, #0
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	e015      	b.n	800740e <HAL_TIM_PWM_Start+0x6a>
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	2b08      	cmp	r3, #8
 80073e6:	d109      	bne.n	80073fc <HAL_TIM_PWM_Start+0x58>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	bf14      	ite	ne
 80073f4:	2301      	movne	r3, #1
 80073f6:	2300      	moveq	r3, #0
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	e008      	b.n	800740e <HAL_TIM_PWM_Start+0x6a>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007402:	b2db      	uxtb	r3, r3
 8007404:	2b01      	cmp	r3, #1
 8007406:	bf14      	ite	ne
 8007408:	2301      	movne	r3, #1
 800740a:	2300      	moveq	r3, #0
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b00      	cmp	r3, #0
 8007410:	d001      	beq.n	8007416 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e068      	b.n	80074e8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d104      	bne.n	8007426 <HAL_TIM_PWM_Start+0x82>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2202      	movs	r2, #2
 8007420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007424:	e013      	b.n	800744e <HAL_TIM_PWM_Start+0xaa>
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2b04      	cmp	r3, #4
 800742a:	d104      	bne.n	8007436 <HAL_TIM_PWM_Start+0x92>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2202      	movs	r2, #2
 8007430:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007434:	e00b      	b.n	800744e <HAL_TIM_PWM_Start+0xaa>
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	2b08      	cmp	r3, #8
 800743a:	d104      	bne.n	8007446 <HAL_TIM_PWM_Start+0xa2>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2202      	movs	r2, #2
 8007440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007444:	e003      	b.n	800744e <HAL_TIM_PWM_Start+0xaa>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2202      	movs	r2, #2
 800744a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2201      	movs	r2, #1
 8007454:	6839      	ldr	r1, [r7, #0]
 8007456:	4618      	mov	r0, r3
 8007458:	f000 fdb4 	bl	8007fc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a23      	ldr	r2, [pc, #140]	; (80074f0 <HAL_TIM_PWM_Start+0x14c>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d107      	bne.n	8007476 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007474:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a1d      	ldr	r2, [pc, #116]	; (80074f0 <HAL_TIM_PWM_Start+0x14c>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d018      	beq.n	80074b2 <HAL_TIM_PWM_Start+0x10e>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007488:	d013      	beq.n	80074b2 <HAL_TIM_PWM_Start+0x10e>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a19      	ldr	r2, [pc, #100]	; (80074f4 <HAL_TIM_PWM_Start+0x150>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d00e      	beq.n	80074b2 <HAL_TIM_PWM_Start+0x10e>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a17      	ldr	r2, [pc, #92]	; (80074f8 <HAL_TIM_PWM_Start+0x154>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d009      	beq.n	80074b2 <HAL_TIM_PWM_Start+0x10e>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a16      	ldr	r2, [pc, #88]	; (80074fc <HAL_TIM_PWM_Start+0x158>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d004      	beq.n	80074b2 <HAL_TIM_PWM_Start+0x10e>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a14      	ldr	r2, [pc, #80]	; (8007500 <HAL_TIM_PWM_Start+0x15c>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d111      	bne.n	80074d6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	f003 0307 	and.w	r3, r3, #7
 80074bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2b06      	cmp	r3, #6
 80074c2:	d010      	beq.n	80074e6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f042 0201 	orr.w	r2, r2, #1
 80074d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074d4:	e007      	b.n	80074e6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f042 0201 	orr.w	r2, r2, #1
 80074e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	40010000 	.word	0x40010000
 80074f4:	40000400 	.word	0x40000400
 80074f8:	40000800 	.word	0x40000800
 80074fc:	40000c00 	.word	0x40000c00
 8007500:	40014000 	.word	0x40014000

08007504 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	f003 0302 	and.w	r3, r3, #2
 8007516:	2b02      	cmp	r3, #2
 8007518:	d122      	bne.n	8007560 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	f003 0302 	and.w	r3, r3, #2
 8007524:	2b02      	cmp	r3, #2
 8007526:	d11b      	bne.n	8007560 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f06f 0202 	mvn.w	r2, #2
 8007530:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	699b      	ldr	r3, [r3, #24]
 800753e:	f003 0303 	and.w	r3, r3, #3
 8007542:	2b00      	cmp	r3, #0
 8007544:	d003      	beq.n	800754e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 fa77 	bl	8007a3a <HAL_TIM_IC_CaptureCallback>
 800754c:	e005      	b.n	800755a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 fa69 	bl	8007a26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 fa7a 	bl	8007a4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	f003 0304 	and.w	r3, r3, #4
 800756a:	2b04      	cmp	r3, #4
 800756c:	d122      	bne.n	80075b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	f003 0304 	and.w	r3, r3, #4
 8007578:	2b04      	cmp	r3, #4
 800757a:	d11b      	bne.n	80075b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f06f 0204 	mvn.w	r2, #4
 8007584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2202      	movs	r2, #2
 800758a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	699b      	ldr	r3, [r3, #24]
 8007592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007596:	2b00      	cmp	r3, #0
 8007598:	d003      	beq.n	80075a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 fa4d 	bl	8007a3a <HAL_TIM_IC_CaptureCallback>
 80075a0:	e005      	b.n	80075ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fa3f 	bl	8007a26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fa50 	bl	8007a4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	f003 0308 	and.w	r3, r3, #8
 80075be:	2b08      	cmp	r3, #8
 80075c0:	d122      	bne.n	8007608 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	f003 0308 	and.w	r3, r3, #8
 80075cc:	2b08      	cmp	r3, #8
 80075ce:	d11b      	bne.n	8007608 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f06f 0208 	mvn.w	r2, #8
 80075d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2204      	movs	r2, #4
 80075de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	69db      	ldr	r3, [r3, #28]
 80075e6:	f003 0303 	and.w	r3, r3, #3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d003      	beq.n	80075f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 fa23 	bl	8007a3a <HAL_TIM_IC_CaptureCallback>
 80075f4:	e005      	b.n	8007602 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fa15 	bl	8007a26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 fa26 	bl	8007a4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	f003 0310 	and.w	r3, r3, #16
 8007612:	2b10      	cmp	r3, #16
 8007614:	d122      	bne.n	800765c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	f003 0310 	and.w	r3, r3, #16
 8007620:	2b10      	cmp	r3, #16
 8007622:	d11b      	bne.n	800765c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f06f 0210 	mvn.w	r2, #16
 800762c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2208      	movs	r2, #8
 8007632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	69db      	ldr	r3, [r3, #28]
 800763a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800763e:	2b00      	cmp	r3, #0
 8007640:	d003      	beq.n	800764a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f9f9 	bl	8007a3a <HAL_TIM_IC_CaptureCallback>
 8007648:	e005      	b.n	8007656 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f9eb 	bl	8007a26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f9fc 	bl	8007a4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	f003 0301 	and.w	r3, r3, #1
 8007666:	2b01      	cmp	r3, #1
 8007668:	d10e      	bne.n	8007688 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	f003 0301 	and.w	r3, r3, #1
 8007674:	2b01      	cmp	r3, #1
 8007676:	d107      	bne.n	8007688 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f06f 0201 	mvn.w	r2, #1
 8007680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f7fa fa02 	bl	8001a8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007692:	2b80      	cmp	r3, #128	; 0x80
 8007694:	d10e      	bne.n	80076b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076a0:	2b80      	cmp	r3, #128	; 0x80
 80076a2:	d107      	bne.n	80076b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80076ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 fd26 	bl	8008100 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076be:	2b40      	cmp	r3, #64	; 0x40
 80076c0:	d10e      	bne.n	80076e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076cc:	2b40      	cmp	r3, #64	; 0x40
 80076ce:	d107      	bne.n	80076e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80076d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 f9c1 	bl	8007a62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	f003 0320 	and.w	r3, r3, #32
 80076ea:	2b20      	cmp	r3, #32
 80076ec:	d10e      	bne.n	800770c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	f003 0320 	and.w	r3, r3, #32
 80076f8:	2b20      	cmp	r3, #32
 80076fa:	d107      	bne.n	800770c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f06f 0220 	mvn.w	r2, #32
 8007704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fcf0 	bl	80080ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800770c:	bf00      	nop
 800770e:	3708      	adds	r7, #8
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007720:	2300      	movs	r3, #0
 8007722:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800772a:	2b01      	cmp	r3, #1
 800772c:	d101      	bne.n	8007732 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800772e:	2302      	movs	r3, #2
 8007730:	e0ae      	b.n	8007890 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2201      	movs	r2, #1
 8007736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2b0c      	cmp	r3, #12
 800773e:	f200 809f 	bhi.w	8007880 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007742:	a201      	add	r2, pc, #4	; (adr r2, 8007748 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007748:	0800777d 	.word	0x0800777d
 800774c:	08007881 	.word	0x08007881
 8007750:	08007881 	.word	0x08007881
 8007754:	08007881 	.word	0x08007881
 8007758:	080077bd 	.word	0x080077bd
 800775c:	08007881 	.word	0x08007881
 8007760:	08007881 	.word	0x08007881
 8007764:	08007881 	.word	0x08007881
 8007768:	080077ff 	.word	0x080077ff
 800776c:	08007881 	.word	0x08007881
 8007770:	08007881 	.word	0x08007881
 8007774:	08007881 	.word	0x08007881
 8007778:	0800783f 	.word	0x0800783f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68b9      	ldr	r1, [r7, #8]
 8007782:	4618      	mov	r0, r3
 8007784:	f000 f9f8 	bl	8007b78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	699a      	ldr	r2, [r3, #24]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f042 0208 	orr.w	r2, r2, #8
 8007796:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	699a      	ldr	r2, [r3, #24]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f022 0204 	bic.w	r2, r2, #4
 80077a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6999      	ldr	r1, [r3, #24]
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	691a      	ldr	r2, [r3, #16]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	430a      	orrs	r2, r1
 80077b8:	619a      	str	r2, [r3, #24]
      break;
 80077ba:	e064      	b.n	8007886 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68b9      	ldr	r1, [r7, #8]
 80077c2:	4618      	mov	r0, r3
 80077c4:	f000 fa3e 	bl	8007c44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	699a      	ldr	r2, [r3, #24]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	699a      	ldr	r2, [r3, #24]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6999      	ldr	r1, [r3, #24]
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	021a      	lsls	r2, r3, #8
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	430a      	orrs	r2, r1
 80077fa:	619a      	str	r2, [r3, #24]
      break;
 80077fc:	e043      	b.n	8007886 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68b9      	ldr	r1, [r7, #8]
 8007804:	4618      	mov	r0, r3
 8007806:	f000 fa89 	bl	8007d1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	69da      	ldr	r2, [r3, #28]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f042 0208 	orr.w	r2, r2, #8
 8007818:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	69da      	ldr	r2, [r3, #28]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f022 0204 	bic.w	r2, r2, #4
 8007828:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	69d9      	ldr	r1, [r3, #28]
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	691a      	ldr	r2, [r3, #16]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	430a      	orrs	r2, r1
 800783a:	61da      	str	r2, [r3, #28]
      break;
 800783c:	e023      	b.n	8007886 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68b9      	ldr	r1, [r7, #8]
 8007844:	4618      	mov	r0, r3
 8007846:	f000 fad3 	bl	8007df0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	69da      	ldr	r2, [r3, #28]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007858:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	69da      	ldr	r2, [r3, #28]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007868:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	69d9      	ldr	r1, [r3, #28]
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	021a      	lsls	r2, r3, #8
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	430a      	orrs	r2, r1
 800787c:	61da      	str	r2, [r3, #28]
      break;
 800787e:	e002      	b.n	8007886 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	75fb      	strb	r3, [r7, #23]
      break;
 8007884:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800788e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007890:	4618      	mov	r0, r3
 8007892:	3718      	adds	r7, #24
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078a2:	2300      	movs	r3, #0
 80078a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d101      	bne.n	80078b4 <HAL_TIM_ConfigClockSource+0x1c>
 80078b0:	2302      	movs	r3, #2
 80078b2:	e0b4      	b.n	8007a1e <HAL_TIM_ConfigClockSource+0x186>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2202      	movs	r2, #2
 80078c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80078d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68ba      	ldr	r2, [r7, #8]
 80078e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078ec:	d03e      	beq.n	800796c <HAL_TIM_ConfigClockSource+0xd4>
 80078ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078f2:	f200 8087 	bhi.w	8007a04 <HAL_TIM_ConfigClockSource+0x16c>
 80078f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078fa:	f000 8086 	beq.w	8007a0a <HAL_TIM_ConfigClockSource+0x172>
 80078fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007902:	d87f      	bhi.n	8007a04 <HAL_TIM_ConfigClockSource+0x16c>
 8007904:	2b70      	cmp	r3, #112	; 0x70
 8007906:	d01a      	beq.n	800793e <HAL_TIM_ConfigClockSource+0xa6>
 8007908:	2b70      	cmp	r3, #112	; 0x70
 800790a:	d87b      	bhi.n	8007a04 <HAL_TIM_ConfigClockSource+0x16c>
 800790c:	2b60      	cmp	r3, #96	; 0x60
 800790e:	d050      	beq.n	80079b2 <HAL_TIM_ConfigClockSource+0x11a>
 8007910:	2b60      	cmp	r3, #96	; 0x60
 8007912:	d877      	bhi.n	8007a04 <HAL_TIM_ConfigClockSource+0x16c>
 8007914:	2b50      	cmp	r3, #80	; 0x50
 8007916:	d03c      	beq.n	8007992 <HAL_TIM_ConfigClockSource+0xfa>
 8007918:	2b50      	cmp	r3, #80	; 0x50
 800791a:	d873      	bhi.n	8007a04 <HAL_TIM_ConfigClockSource+0x16c>
 800791c:	2b40      	cmp	r3, #64	; 0x40
 800791e:	d058      	beq.n	80079d2 <HAL_TIM_ConfigClockSource+0x13a>
 8007920:	2b40      	cmp	r3, #64	; 0x40
 8007922:	d86f      	bhi.n	8007a04 <HAL_TIM_ConfigClockSource+0x16c>
 8007924:	2b30      	cmp	r3, #48	; 0x30
 8007926:	d064      	beq.n	80079f2 <HAL_TIM_ConfigClockSource+0x15a>
 8007928:	2b30      	cmp	r3, #48	; 0x30
 800792a:	d86b      	bhi.n	8007a04 <HAL_TIM_ConfigClockSource+0x16c>
 800792c:	2b20      	cmp	r3, #32
 800792e:	d060      	beq.n	80079f2 <HAL_TIM_ConfigClockSource+0x15a>
 8007930:	2b20      	cmp	r3, #32
 8007932:	d867      	bhi.n	8007a04 <HAL_TIM_ConfigClockSource+0x16c>
 8007934:	2b00      	cmp	r3, #0
 8007936:	d05c      	beq.n	80079f2 <HAL_TIM_ConfigClockSource+0x15a>
 8007938:	2b10      	cmp	r3, #16
 800793a:	d05a      	beq.n	80079f2 <HAL_TIM_ConfigClockSource+0x15a>
 800793c:	e062      	b.n	8007a04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6818      	ldr	r0, [r3, #0]
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	6899      	ldr	r1, [r3, #8]
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	685a      	ldr	r2, [r3, #4]
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	f000 fb19 	bl	8007f84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007960:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68ba      	ldr	r2, [r7, #8]
 8007968:	609a      	str	r2, [r3, #8]
      break;
 800796a:	e04f      	b.n	8007a0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6818      	ldr	r0, [r3, #0]
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	6899      	ldr	r1, [r3, #8]
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	685a      	ldr	r2, [r3, #4]
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	f000 fb02 	bl	8007f84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	689a      	ldr	r2, [r3, #8]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800798e:	609a      	str	r2, [r3, #8]
      break;
 8007990:	e03c      	b.n	8007a0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6818      	ldr	r0, [r3, #0]
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	6859      	ldr	r1, [r3, #4]
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	461a      	mov	r2, r3
 80079a0:	f000 fa76 	bl	8007e90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2150      	movs	r1, #80	; 0x50
 80079aa:	4618      	mov	r0, r3
 80079ac:	f000 facf 	bl	8007f4e <TIM_ITRx_SetConfig>
      break;
 80079b0:	e02c      	b.n	8007a0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6818      	ldr	r0, [r3, #0]
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	6859      	ldr	r1, [r3, #4]
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	461a      	mov	r2, r3
 80079c0:	f000 fa95 	bl	8007eee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2160      	movs	r1, #96	; 0x60
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 fabf 	bl	8007f4e <TIM_ITRx_SetConfig>
      break;
 80079d0:	e01c      	b.n	8007a0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6818      	ldr	r0, [r3, #0]
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	6859      	ldr	r1, [r3, #4]
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	461a      	mov	r2, r3
 80079e0:	f000 fa56 	bl	8007e90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2140      	movs	r1, #64	; 0x40
 80079ea:	4618      	mov	r0, r3
 80079ec:	f000 faaf 	bl	8007f4e <TIM_ITRx_SetConfig>
      break;
 80079f0:	e00c      	b.n	8007a0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4619      	mov	r1, r3
 80079fc:	4610      	mov	r0, r2
 80079fe:	f000 faa6 	bl	8007f4e <TIM_ITRx_SetConfig>
      break;
 8007a02:	e003      	b.n	8007a0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	73fb      	strb	r3, [r7, #15]
      break;
 8007a08:	e000      	b.n	8007a0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007a0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a26:	b480      	push	{r7}
 8007a28:	b083      	sub	sp, #12
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a2e:	bf00      	nop
 8007a30:	370c      	adds	r7, #12
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	b083      	sub	sp, #12
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a42:	bf00      	nop
 8007a44:	370c      	adds	r7, #12
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr

08007a4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a4e:	b480      	push	{r7}
 8007a50:	b083      	sub	sp, #12
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a56:	bf00      	nop
 8007a58:	370c      	adds	r7, #12
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr

08007a62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b083      	sub	sp, #12
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a6a:	bf00      	nop
 8007a6c:	370c      	adds	r7, #12
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
	...

08007a78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4a34      	ldr	r2, [pc, #208]	; (8007b5c <TIM_Base_SetConfig+0xe4>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d00f      	beq.n	8007ab0 <TIM_Base_SetConfig+0x38>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a96:	d00b      	beq.n	8007ab0 <TIM_Base_SetConfig+0x38>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a31      	ldr	r2, [pc, #196]	; (8007b60 <TIM_Base_SetConfig+0xe8>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d007      	beq.n	8007ab0 <TIM_Base_SetConfig+0x38>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a30      	ldr	r2, [pc, #192]	; (8007b64 <TIM_Base_SetConfig+0xec>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d003      	beq.n	8007ab0 <TIM_Base_SetConfig+0x38>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a2f      	ldr	r2, [pc, #188]	; (8007b68 <TIM_Base_SetConfig+0xf0>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d108      	bne.n	8007ac2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ab6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a25      	ldr	r2, [pc, #148]	; (8007b5c <TIM_Base_SetConfig+0xe4>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d01b      	beq.n	8007b02 <TIM_Base_SetConfig+0x8a>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ad0:	d017      	beq.n	8007b02 <TIM_Base_SetConfig+0x8a>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4a22      	ldr	r2, [pc, #136]	; (8007b60 <TIM_Base_SetConfig+0xe8>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d013      	beq.n	8007b02 <TIM_Base_SetConfig+0x8a>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a21      	ldr	r2, [pc, #132]	; (8007b64 <TIM_Base_SetConfig+0xec>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d00f      	beq.n	8007b02 <TIM_Base_SetConfig+0x8a>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a20      	ldr	r2, [pc, #128]	; (8007b68 <TIM_Base_SetConfig+0xf0>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d00b      	beq.n	8007b02 <TIM_Base_SetConfig+0x8a>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a1f      	ldr	r2, [pc, #124]	; (8007b6c <TIM_Base_SetConfig+0xf4>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d007      	beq.n	8007b02 <TIM_Base_SetConfig+0x8a>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a1e      	ldr	r2, [pc, #120]	; (8007b70 <TIM_Base_SetConfig+0xf8>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d003      	beq.n	8007b02 <TIM_Base_SetConfig+0x8a>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a1d      	ldr	r2, [pc, #116]	; (8007b74 <TIM_Base_SetConfig+0xfc>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d108      	bne.n	8007b14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	689a      	ldr	r2, [r3, #8]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a08      	ldr	r2, [pc, #32]	; (8007b5c <TIM_Base_SetConfig+0xe4>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d103      	bne.n	8007b48 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	691a      	ldr	r2, [r3, #16]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	615a      	str	r2, [r3, #20]
}
 8007b4e:	bf00      	nop
 8007b50:	3714      	adds	r7, #20
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	40010000 	.word	0x40010000
 8007b60:	40000400 	.word	0x40000400
 8007b64:	40000800 	.word	0x40000800
 8007b68:	40000c00 	.word	0x40000c00
 8007b6c:	40014000 	.word	0x40014000
 8007b70:	40014400 	.word	0x40014400
 8007b74:	40014800 	.word	0x40014800

08007b78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b087      	sub	sp, #28
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	f023 0201 	bic.w	r2, r3, #1
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a1b      	ldr	r3, [r3, #32]
 8007b92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f023 0303 	bic.w	r3, r3, #3
 8007bae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	f023 0302 	bic.w	r3, r3, #2
 8007bc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a1c      	ldr	r2, [pc, #112]	; (8007c40 <TIM_OC1_SetConfig+0xc8>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d10c      	bne.n	8007bee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	f023 0308 	bic.w	r3, r3, #8
 8007bda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	697a      	ldr	r2, [r7, #20]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	f023 0304 	bic.w	r3, r3, #4
 8007bec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a13      	ldr	r2, [pc, #76]	; (8007c40 <TIM_OC1_SetConfig+0xc8>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d111      	bne.n	8007c1a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	693a      	ldr	r2, [r7, #16]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	699b      	ldr	r3, [r3, #24]
 8007c14:	693a      	ldr	r2, [r7, #16]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	697a      	ldr	r2, [r7, #20]
 8007c32:	621a      	str	r2, [r3, #32]
}
 8007c34:	bf00      	nop
 8007c36:	371c      	adds	r7, #28
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr
 8007c40:	40010000 	.word	0x40010000

08007c44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b087      	sub	sp, #28
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	f023 0210 	bic.w	r2, r3, #16
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a1b      	ldr	r3, [r3, #32]
 8007c5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	021b      	lsls	r3, r3, #8
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	f023 0320 	bic.w	r3, r3, #32
 8007c8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	011b      	lsls	r3, r3, #4
 8007c96:	697a      	ldr	r2, [r7, #20]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a1e      	ldr	r2, [pc, #120]	; (8007d18 <TIM_OC2_SetConfig+0xd4>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d10d      	bne.n	8007cc0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007caa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	011b      	lsls	r3, r3, #4
 8007cb2:	697a      	ldr	r2, [r7, #20]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cbe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a15      	ldr	r2, [pc, #84]	; (8007d18 <TIM_OC2_SetConfig+0xd4>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d113      	bne.n	8007cf0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	695b      	ldr	r3, [r3, #20]
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	693a      	ldr	r2, [r7, #16]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	699b      	ldr	r3, [r3, #24]
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	693a      	ldr	r2, [r7, #16]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	693a      	ldr	r2, [r7, #16]
 8007cf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	68fa      	ldr	r2, [r7, #12]
 8007cfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	685a      	ldr	r2, [r3, #4]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	697a      	ldr	r2, [r7, #20]
 8007d08:	621a      	str	r2, [r3, #32]
}
 8007d0a:	bf00      	nop
 8007d0c:	371c      	adds	r7, #28
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr
 8007d16:	bf00      	nop
 8007d18:	40010000 	.word	0x40010000

08007d1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b087      	sub	sp, #28
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a1b      	ldr	r3, [r3, #32]
 8007d2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a1b      	ldr	r3, [r3, #32]
 8007d36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	69db      	ldr	r3, [r3, #28]
 8007d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f023 0303 	bic.w	r3, r3, #3
 8007d52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	021b      	lsls	r3, r3, #8
 8007d6c:	697a      	ldr	r2, [r7, #20]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a1d      	ldr	r2, [pc, #116]	; (8007dec <TIM_OC3_SetConfig+0xd0>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d10d      	bne.n	8007d96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	021b      	lsls	r3, r3, #8
 8007d88:	697a      	ldr	r2, [r7, #20]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a14      	ldr	r2, [pc, #80]	; (8007dec <TIM_OC3_SetConfig+0xd0>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d113      	bne.n	8007dc6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007da4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007dac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	695b      	ldr	r3, [r3, #20]
 8007db2:	011b      	lsls	r3, r3, #4
 8007db4:	693a      	ldr	r2, [r7, #16]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	011b      	lsls	r3, r3, #4
 8007dc0:	693a      	ldr	r2, [r7, #16]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	693a      	ldr	r2, [r7, #16]
 8007dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	685a      	ldr	r2, [r3, #4]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	697a      	ldr	r2, [r7, #20]
 8007dde:	621a      	str	r2, [r3, #32]
}
 8007de0:	bf00      	nop
 8007de2:	371c      	adds	r7, #28
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr
 8007dec:	40010000 	.word	0x40010000

08007df0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b087      	sub	sp, #28
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a1b      	ldr	r3, [r3, #32]
 8007e0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	69db      	ldr	r3, [r3, #28]
 8007e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	021b      	lsls	r3, r3, #8
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	031b      	lsls	r3, r3, #12
 8007e42:	693a      	ldr	r2, [r7, #16]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a10      	ldr	r2, [pc, #64]	; (8007e8c <TIM_OC4_SetConfig+0x9c>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d109      	bne.n	8007e64 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	695b      	ldr	r3, [r3, #20]
 8007e5c:	019b      	lsls	r3, r3, #6
 8007e5e:	697a      	ldr	r2, [r7, #20]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	697a      	ldr	r2, [r7, #20]
 8007e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	621a      	str	r2, [r3, #32]
}
 8007e7e:	bf00      	nop
 8007e80:	371c      	adds	r7, #28
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	40010000 	.word	0x40010000

08007e90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b087      	sub	sp, #28
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6a1b      	ldr	r3, [r3, #32]
 8007ea0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	f023 0201 	bic.w	r2, r3, #1
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	699b      	ldr	r3, [r3, #24]
 8007eb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007eba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	011b      	lsls	r3, r3, #4
 8007ec0:	693a      	ldr	r2, [r7, #16]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	f023 030a 	bic.w	r3, r3, #10
 8007ecc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ece:	697a      	ldr	r2, [r7, #20]
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	621a      	str	r2, [r3, #32]
}
 8007ee2:	bf00      	nop
 8007ee4:	371c      	adds	r7, #28
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr

08007eee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b087      	sub	sp, #28
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	60f8      	str	r0, [r7, #12]
 8007ef6:	60b9      	str	r1, [r7, #8]
 8007ef8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6a1b      	ldr	r3, [r3, #32]
 8007efe:	f023 0210 	bic.w	r2, r3, #16
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	699b      	ldr	r3, [r3, #24]
 8007f0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6a1b      	ldr	r3, [r3, #32]
 8007f10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	031b      	lsls	r3, r3, #12
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	011b      	lsls	r3, r3, #4
 8007f30:	693a      	ldr	r2, [r7, #16]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	697a      	ldr	r2, [r7, #20]
 8007f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	693a      	ldr	r2, [r7, #16]
 8007f40:	621a      	str	r2, [r3, #32]
}
 8007f42:	bf00      	nop
 8007f44:	371c      	adds	r7, #28
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr

08007f4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f4e:	b480      	push	{r7}
 8007f50:	b085      	sub	sp, #20
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f66:	683a      	ldr	r2, [r7, #0]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	f043 0307 	orr.w	r3, r3, #7
 8007f70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	68fa      	ldr	r2, [r7, #12]
 8007f76:	609a      	str	r2, [r3, #8]
}
 8007f78:	bf00      	nop
 8007f7a:	3714      	adds	r7, #20
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b087      	sub	sp, #28
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	607a      	str	r2, [r7, #4]
 8007f90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	021a      	lsls	r2, r3, #8
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	431a      	orrs	r2, r3
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	697a      	ldr	r2, [r7, #20]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	697a      	ldr	r2, [r7, #20]
 8007fb6:	609a      	str	r2, [r3, #8]
}
 8007fb8:	bf00      	nop
 8007fba:	371c      	adds	r7, #28
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b087      	sub	sp, #28
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	f003 031f 	and.w	r3, r3, #31
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6a1a      	ldr	r2, [r3, #32]
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	43db      	mvns	r3, r3
 8007fe6:	401a      	ands	r2, r3
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6a1a      	ldr	r2, [r3, #32]
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	f003 031f 	and.w	r3, r3, #31
 8007ff6:	6879      	ldr	r1, [r7, #4]
 8007ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8007ffc:	431a      	orrs	r2, r3
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	621a      	str	r2, [r3, #32]
}
 8008002:	bf00      	nop
 8008004:	371c      	adds	r7, #28
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
	...

08008010 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008010:	b480      	push	{r7}
 8008012:	b085      	sub	sp, #20
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008020:	2b01      	cmp	r3, #1
 8008022:	d101      	bne.n	8008028 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008024:	2302      	movs	r3, #2
 8008026:	e050      	b.n	80080ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2202      	movs	r2, #2
 8008034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800804e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	4313      	orrs	r3, r2
 8008058:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a1c      	ldr	r2, [pc, #112]	; (80080d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d018      	beq.n	800809e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008074:	d013      	beq.n	800809e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a18      	ldr	r2, [pc, #96]	; (80080dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d00e      	beq.n	800809e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a16      	ldr	r2, [pc, #88]	; (80080e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d009      	beq.n	800809e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a15      	ldr	r2, [pc, #84]	; (80080e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d004      	beq.n	800809e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a13      	ldr	r2, [pc, #76]	; (80080e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d10c      	bne.n	80080b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	68ba      	ldr	r2, [r7, #8]
 80080ac:	4313      	orrs	r3, r2
 80080ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68ba      	ldr	r2, [r7, #8]
 80080b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3714      	adds	r7, #20
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	40010000 	.word	0x40010000
 80080dc:	40000400 	.word	0x40000400
 80080e0:	40000800 	.word	0x40000800
 80080e4:	40000c00 	.word	0x40000c00
 80080e8:	40014000 	.word	0x40014000

080080ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008108:	bf00      	nop
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d101      	bne.n	8008126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e03f      	b.n	80081a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800812c:	b2db      	uxtb	r3, r3
 800812e:	2b00      	cmp	r3, #0
 8008130:	d106      	bne.n	8008140 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f7fb fa6c 	bl	8003618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2224      	movs	r2, #36	; 0x24
 8008144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68da      	ldr	r2, [r3, #12]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008156:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 fddf 	bl	8008d1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	691a      	ldr	r2, [r3, #16]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800816c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	695a      	ldr	r2, [r3, #20]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800817c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68da      	ldr	r2, [r3, #12]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800818c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2220      	movs	r2, #32
 8008198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2220      	movs	r2, #32
 80081a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b08a      	sub	sp, #40	; 0x28
 80081b2:	af02      	add	r7, sp, #8
 80081b4:	60f8      	str	r0, [r7, #12]
 80081b6:	60b9      	str	r1, [r7, #8]
 80081b8:	603b      	str	r3, [r7, #0]
 80081ba:	4613      	mov	r3, r2
 80081bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80081be:	2300      	movs	r3, #0
 80081c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b20      	cmp	r3, #32
 80081cc:	d17c      	bne.n	80082c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d002      	beq.n	80081da <HAL_UART_Transmit+0x2c>
 80081d4:	88fb      	ldrh	r3, [r7, #6]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d101      	bne.n	80081de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	e075      	b.n	80082ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d101      	bne.n	80081ec <HAL_UART_Transmit+0x3e>
 80081e8:	2302      	movs	r3, #2
 80081ea:	e06e      	b.n	80082ca <HAL_UART_Transmit+0x11c>
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2200      	movs	r2, #0
 80081f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2221      	movs	r2, #33	; 0x21
 80081fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008202:	f7fb fb43 	bl	800388c <HAL_GetTick>
 8008206:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	88fa      	ldrh	r2, [r7, #6]
 800820c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	88fa      	ldrh	r2, [r7, #6]
 8008212:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800821c:	d108      	bne.n	8008230 <HAL_UART_Transmit+0x82>
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d104      	bne.n	8008230 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008226:	2300      	movs	r3, #0
 8008228:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	61bb      	str	r3, [r7, #24]
 800822e:	e003      	b.n	8008238 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008234:	2300      	movs	r3, #0
 8008236:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2200      	movs	r2, #0
 800823c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008240:	e02a      	b.n	8008298 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	2200      	movs	r2, #0
 800824a:	2180      	movs	r1, #128	; 0x80
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	f000 fb1f 	bl	8008890 <UART_WaitOnFlagUntilTimeout>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d001      	beq.n	800825c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008258:	2303      	movs	r3, #3
 800825a:	e036      	b.n	80082ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d10b      	bne.n	800827a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	881b      	ldrh	r3, [r3, #0]
 8008266:	461a      	mov	r2, r3
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008270:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	3302      	adds	r3, #2
 8008276:	61bb      	str	r3, [r7, #24]
 8008278:	e007      	b.n	800828a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	781a      	ldrb	r2, [r3, #0]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	3301      	adds	r3, #1
 8008288:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800828e:	b29b      	uxth	r3, r3
 8008290:	3b01      	subs	r3, #1
 8008292:	b29a      	uxth	r2, r3
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800829c:	b29b      	uxth	r3, r3
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d1cf      	bne.n	8008242 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	9300      	str	r3, [sp, #0]
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	2200      	movs	r2, #0
 80082aa:	2140      	movs	r1, #64	; 0x40
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f000 faef 	bl	8008890 <UART_WaitOnFlagUntilTimeout>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d001      	beq.n	80082bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80082b8:	2303      	movs	r3, #3
 80082ba:	e006      	b.n	80082ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2220      	movs	r2, #32
 80082c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80082c4:	2300      	movs	r3, #0
 80082c6:	e000      	b.n	80082ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80082c8:	2302      	movs	r3, #2
  }
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3720      	adds	r7, #32
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b084      	sub	sp, #16
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	60f8      	str	r0, [r7, #12]
 80082da:	60b9      	str	r1, [r7, #8]
 80082dc:	4613      	mov	r3, r2
 80082de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	2b20      	cmp	r3, #32
 80082ea:	d11d      	bne.n	8008328 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d002      	beq.n	80082f8 <HAL_UART_Receive_IT+0x26>
 80082f2:	88fb      	ldrh	r3, [r7, #6]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d101      	bne.n	80082fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	e016      	b.n	800832a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008302:	2b01      	cmp	r3, #1
 8008304:	d101      	bne.n	800830a <HAL_UART_Receive_IT+0x38>
 8008306:	2302      	movs	r3, #2
 8008308:	e00f      	b.n	800832a <HAL_UART_Receive_IT+0x58>
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2201      	movs	r2, #1
 800830e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008318:	88fb      	ldrh	r3, [r7, #6]
 800831a:	461a      	mov	r2, r3
 800831c:	68b9      	ldr	r1, [r7, #8]
 800831e:	68f8      	ldr	r0, [r7, #12]
 8008320:	f000 fb24 	bl	800896c <UART_Start_Receive_IT>
 8008324:	4603      	mov	r3, r0
 8008326:	e000      	b.n	800832a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008328:	2302      	movs	r3, #2
  }
}
 800832a:	4618      	mov	r0, r3
 800832c:	3710      	adds	r7, #16
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
	...

08008334 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b0ba      	sub	sp, #232	; 0xe8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	695b      	ldr	r3, [r3, #20]
 8008356:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800835a:	2300      	movs	r3, #0
 800835c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008360:	2300      	movs	r3, #0
 8008362:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800836a:	f003 030f 	and.w	r3, r3, #15
 800836e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008372:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10f      	bne.n	800839a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800837a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800837e:	f003 0320 	and.w	r3, r3, #32
 8008382:	2b00      	cmp	r3, #0
 8008384:	d009      	beq.n	800839a <HAL_UART_IRQHandler+0x66>
 8008386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800838a:	f003 0320 	and.w	r3, r3, #32
 800838e:	2b00      	cmp	r3, #0
 8008390:	d003      	beq.n	800839a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fc07 	bl	8008ba6 <UART_Receive_IT>
      return;
 8008398:	e256      	b.n	8008848 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800839a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f000 80de 	beq.w	8008560 <HAL_UART_IRQHandler+0x22c>
 80083a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083a8:	f003 0301 	and.w	r3, r3, #1
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d106      	bne.n	80083be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80083b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f000 80d1 	beq.w	8008560 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80083be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083c2:	f003 0301 	and.w	r3, r3, #1
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00b      	beq.n	80083e2 <HAL_UART_IRQHandler+0xae>
 80083ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d005      	beq.n	80083e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083da:	f043 0201 	orr.w	r2, r3, #1
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80083e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083e6:	f003 0304 	and.w	r3, r3, #4
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d00b      	beq.n	8008406 <HAL_UART_IRQHandler+0xd2>
 80083ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083f2:	f003 0301 	and.w	r3, r3, #1
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d005      	beq.n	8008406 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fe:	f043 0202 	orr.w	r2, r3, #2
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800840a:	f003 0302 	and.w	r3, r3, #2
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00b      	beq.n	800842a <HAL_UART_IRQHandler+0xf6>
 8008412:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	2b00      	cmp	r3, #0
 800841c:	d005      	beq.n	800842a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008422:	f043 0204 	orr.w	r2, r3, #4
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800842a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800842e:	f003 0308 	and.w	r3, r3, #8
 8008432:	2b00      	cmp	r3, #0
 8008434:	d011      	beq.n	800845a <HAL_UART_IRQHandler+0x126>
 8008436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800843a:	f003 0320 	and.w	r3, r3, #32
 800843e:	2b00      	cmp	r3, #0
 8008440:	d105      	bne.n	800844e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008442:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008446:	f003 0301 	and.w	r3, r3, #1
 800844a:	2b00      	cmp	r3, #0
 800844c:	d005      	beq.n	800845a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008452:	f043 0208 	orr.w	r2, r3, #8
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845e:	2b00      	cmp	r3, #0
 8008460:	f000 81ed 	beq.w	800883e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008468:	f003 0320 	and.w	r3, r3, #32
 800846c:	2b00      	cmp	r3, #0
 800846e:	d008      	beq.n	8008482 <HAL_UART_IRQHandler+0x14e>
 8008470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008474:	f003 0320 	and.w	r3, r3, #32
 8008478:	2b00      	cmp	r3, #0
 800847a:	d002      	beq.n	8008482 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 fb92 	bl	8008ba6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	695b      	ldr	r3, [r3, #20]
 8008488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800848c:	2b40      	cmp	r3, #64	; 0x40
 800848e:	bf0c      	ite	eq
 8008490:	2301      	moveq	r3, #1
 8008492:	2300      	movne	r3, #0
 8008494:	b2db      	uxtb	r3, r3
 8008496:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800849e:	f003 0308 	and.w	r3, r3, #8
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d103      	bne.n	80084ae <HAL_UART_IRQHandler+0x17a>
 80084a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d04f      	beq.n	800854e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 fa9a 	bl	80089e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	695b      	ldr	r3, [r3, #20]
 80084ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084be:	2b40      	cmp	r3, #64	; 0x40
 80084c0:	d141      	bne.n	8008546 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	3314      	adds	r3, #20
 80084c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80084d0:	e853 3f00 	ldrex	r3, [r3]
 80084d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80084d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80084dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	3314      	adds	r3, #20
 80084ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80084ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80084f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80084fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80084fe:	e841 2300 	strex	r3, r2, [r1]
 8008502:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008506:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1d9      	bne.n	80084c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008512:	2b00      	cmp	r3, #0
 8008514:	d013      	beq.n	800853e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851a:	4a7d      	ldr	r2, [pc, #500]	; (8008710 <HAL_UART_IRQHandler+0x3dc>)
 800851c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008522:	4618      	mov	r0, r3
 8008524:	f7fb fc6a 	bl	8003dfc <HAL_DMA_Abort_IT>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d016      	beq.n	800855c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008538:	4610      	mov	r0, r2
 800853a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800853c:	e00e      	b.n	800855c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f990 	bl	8008864 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008544:	e00a      	b.n	800855c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 f98c 	bl	8008864 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800854c:	e006      	b.n	800855c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 f988 	bl	8008864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800855a:	e170      	b.n	800883e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800855c:	bf00      	nop
    return;
 800855e:	e16e      	b.n	800883e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008564:	2b01      	cmp	r3, #1
 8008566:	f040 814a 	bne.w	80087fe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800856a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800856e:	f003 0310 	and.w	r3, r3, #16
 8008572:	2b00      	cmp	r3, #0
 8008574:	f000 8143 	beq.w	80087fe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800857c:	f003 0310 	and.w	r3, r3, #16
 8008580:	2b00      	cmp	r3, #0
 8008582:	f000 813c 	beq.w	80087fe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008586:	2300      	movs	r3, #0
 8008588:	60bb      	str	r3, [r7, #8]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	60bb      	str	r3, [r7, #8]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	60bb      	str	r3, [r7, #8]
 800859a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	695b      	ldr	r3, [r3, #20]
 80085a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085a6:	2b40      	cmp	r3, #64	; 0x40
 80085a8:	f040 80b4 	bne.w	8008714 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80085b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f000 8140 	beq.w	8008842 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80085c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80085ca:	429a      	cmp	r2, r3
 80085cc:	f080 8139 	bcs.w	8008842 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80085d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085dc:	69db      	ldr	r3, [r3, #28]
 80085de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085e2:	f000 8088 	beq.w	80086f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	330c      	adds	r3, #12
 80085ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80085f4:	e853 3f00 	ldrex	r3, [r3]
 80085f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80085fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008600:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008604:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	330c      	adds	r3, #12
 800860e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008612:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008616:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800861e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008622:	e841 2300 	strex	r3, r2, [r1]
 8008626:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800862a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1d9      	bne.n	80085e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	3314      	adds	r3, #20
 8008638:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800863c:	e853 3f00 	ldrex	r3, [r3]
 8008640:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008642:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008644:	f023 0301 	bic.w	r3, r3, #1
 8008648:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	3314      	adds	r3, #20
 8008652:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008656:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800865a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800865c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800865e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008662:	e841 2300 	strex	r3, r2, [r1]
 8008666:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008668:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1e1      	bne.n	8008632 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	3314      	adds	r3, #20
 8008674:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008676:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008678:	e853 3f00 	ldrex	r3, [r3]
 800867c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800867e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008684:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	3314      	adds	r3, #20
 800868e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008692:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008694:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008696:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008698:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800869a:	e841 2300 	strex	r3, r2, [r1]
 800869e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80086a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d1e3      	bne.n	800866e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2220      	movs	r2, #32
 80086aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	330c      	adds	r3, #12
 80086ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086be:	e853 3f00 	ldrex	r3, [r3]
 80086c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80086c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086c6:	f023 0310 	bic.w	r3, r3, #16
 80086ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	330c      	adds	r3, #12
 80086d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80086d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80086da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80086de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80086e0:	e841 2300 	strex	r3, r2, [r1]
 80086e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80086e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d1e3      	bne.n	80086b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7fb fb13 	bl	8003d1c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086fe:	b29b      	uxth	r3, r3
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	b29b      	uxth	r3, r3
 8008704:	4619      	mov	r1, r3
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 f8b6 	bl	8008878 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800870c:	e099      	b.n	8008842 <HAL_UART_IRQHandler+0x50e>
 800870e:	bf00      	nop
 8008710:	08008aaf 	.word	0x08008aaf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800871c:	b29b      	uxth	r3, r3
 800871e:	1ad3      	subs	r3, r2, r3
 8008720:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008728:	b29b      	uxth	r3, r3
 800872a:	2b00      	cmp	r3, #0
 800872c:	f000 808b 	beq.w	8008846 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008730:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008734:	2b00      	cmp	r3, #0
 8008736:	f000 8086 	beq.w	8008846 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	330c      	adds	r3, #12
 8008740:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008744:	e853 3f00 	ldrex	r3, [r3]
 8008748:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800874a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800874c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008750:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	330c      	adds	r3, #12
 800875a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800875e:	647a      	str	r2, [r7, #68]	; 0x44
 8008760:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008762:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008764:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008766:	e841 2300 	strex	r3, r2, [r1]
 800876a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800876c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1e3      	bne.n	800873a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3314      	adds	r3, #20
 8008778:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877c:	e853 3f00 	ldrex	r3, [r3]
 8008780:	623b      	str	r3, [r7, #32]
   return(result);
 8008782:	6a3b      	ldr	r3, [r7, #32]
 8008784:	f023 0301 	bic.w	r3, r3, #1
 8008788:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	3314      	adds	r3, #20
 8008792:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008796:	633a      	str	r2, [r7, #48]	; 0x30
 8008798:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800879c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800879e:	e841 2300 	strex	r3, r2, [r1]
 80087a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1e3      	bne.n	8008772 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2220      	movs	r2, #32
 80087ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	330c      	adds	r3, #12
 80087be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	e853 3f00 	ldrex	r3, [r3]
 80087c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f023 0310 	bic.w	r3, r3, #16
 80087ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	330c      	adds	r3, #12
 80087d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80087dc:	61fa      	str	r2, [r7, #28]
 80087de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e0:	69b9      	ldr	r1, [r7, #24]
 80087e2:	69fa      	ldr	r2, [r7, #28]
 80087e4:	e841 2300 	strex	r3, r2, [r1]
 80087e8:	617b      	str	r3, [r7, #20]
   return(result);
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d1e3      	bne.n	80087b8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80087f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80087f4:	4619      	mov	r1, r3
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 f83e 	bl	8008878 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80087fc:	e023      	b.n	8008846 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80087fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008806:	2b00      	cmp	r3, #0
 8008808:	d009      	beq.n	800881e <HAL_UART_IRQHandler+0x4ea>
 800880a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800880e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008812:	2b00      	cmp	r3, #0
 8008814:	d003      	beq.n	800881e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f95d 	bl	8008ad6 <UART_Transmit_IT>
    return;
 800881c:	e014      	b.n	8008848 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800881e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00e      	beq.n	8008848 <HAL_UART_IRQHandler+0x514>
 800882a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800882e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008832:	2b00      	cmp	r3, #0
 8008834:	d008      	beq.n	8008848 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 f99d 	bl	8008b76 <UART_EndTransmit_IT>
    return;
 800883c:	e004      	b.n	8008848 <HAL_UART_IRQHandler+0x514>
    return;
 800883e:	bf00      	nop
 8008840:	e002      	b.n	8008848 <HAL_UART_IRQHandler+0x514>
      return;
 8008842:	bf00      	nop
 8008844:	e000      	b.n	8008848 <HAL_UART_IRQHandler+0x514>
      return;
 8008846:	bf00      	nop
  }
}
 8008848:	37e8      	adds	r7, #232	; 0xe8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop

08008850 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008858:	bf00      	nop
 800885a:	370c      	adds	r7, #12
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800886c:	bf00      	nop
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	460b      	mov	r3, r1
 8008882:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008884:	bf00      	nop
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b090      	sub	sp, #64	; 0x40
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	603b      	str	r3, [r7, #0]
 800889c:	4613      	mov	r3, r2
 800889e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088a0:	e050      	b.n	8008944 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a8:	d04c      	beq.n	8008944 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80088aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d007      	beq.n	80088c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80088b0:	f7fa ffec 	bl	800388c <HAL_GetTick>
 80088b4:	4602      	mov	r2, r0
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	1ad3      	subs	r3, r2, r3
 80088ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088bc:	429a      	cmp	r2, r3
 80088be:	d241      	bcs.n	8008944 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	330c      	adds	r3, #12
 80088c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ca:	e853 3f00 	ldrex	r3, [r3]
 80088ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80088d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	330c      	adds	r3, #12
 80088de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80088e0:	637a      	str	r2, [r7, #52]	; 0x34
 80088e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80088e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088e8:	e841 2300 	strex	r3, r2, [r1]
 80088ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80088ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1e5      	bne.n	80088c0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	3314      	adds	r3, #20
 80088fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	e853 3f00 	ldrex	r3, [r3]
 8008902:	613b      	str	r3, [r7, #16]
   return(result);
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	f023 0301 	bic.w	r3, r3, #1
 800890a:	63bb      	str	r3, [r7, #56]	; 0x38
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	3314      	adds	r3, #20
 8008912:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008914:	623a      	str	r2, [r7, #32]
 8008916:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008918:	69f9      	ldr	r1, [r7, #28]
 800891a:	6a3a      	ldr	r2, [r7, #32]
 800891c:	e841 2300 	strex	r3, r2, [r1]
 8008920:	61bb      	str	r3, [r7, #24]
   return(result);
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d1e5      	bne.n	80088f4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2220      	movs	r2, #32
 800892c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2220      	movs	r2, #32
 8008934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008940:	2303      	movs	r3, #3
 8008942:	e00f      	b.n	8008964 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	4013      	ands	r3, r2
 800894e:	68ba      	ldr	r2, [r7, #8]
 8008950:	429a      	cmp	r2, r3
 8008952:	bf0c      	ite	eq
 8008954:	2301      	moveq	r3, #1
 8008956:	2300      	movne	r3, #0
 8008958:	b2db      	uxtb	r3, r3
 800895a:	461a      	mov	r2, r3
 800895c:	79fb      	ldrb	r3, [r7, #7]
 800895e:	429a      	cmp	r2, r3
 8008960:	d09f      	beq.n	80088a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3740      	adds	r7, #64	; 0x40
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	4613      	mov	r3, r2
 8008978:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	68ba      	ldr	r2, [r7, #8]
 800897e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	88fa      	ldrh	r2, [r7, #6]
 8008984:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	88fa      	ldrh	r2, [r7, #6]
 800898a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2200      	movs	r2, #0
 8008990:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2222      	movs	r2, #34	; 0x22
 8008996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2200      	movs	r2, #0
 800899e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	691b      	ldr	r3, [r3, #16]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d007      	beq.n	80089ba <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	68da      	ldr	r2, [r3, #12]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80089b8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	695a      	ldr	r2, [r3, #20]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f042 0201 	orr.w	r2, r2, #1
 80089c8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	68da      	ldr	r2, [r3, #12]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f042 0220 	orr.w	r2, r2, #32
 80089d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3714      	adds	r7, #20
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b095      	sub	sp, #84	; 0x54
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	330c      	adds	r3, #12
 80089f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089fa:	e853 3f00 	ldrex	r3, [r3]
 80089fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	330c      	adds	r3, #12
 8008a0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a10:	643a      	str	r2, [r7, #64]	; 0x40
 8008a12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a18:	e841 2300 	strex	r3, r2, [r1]
 8008a1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d1e5      	bne.n	80089f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	3314      	adds	r3, #20
 8008a2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2c:	6a3b      	ldr	r3, [r7, #32]
 8008a2e:	e853 3f00 	ldrex	r3, [r3]
 8008a32:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	f023 0301 	bic.w	r3, r3, #1
 8008a3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	3314      	adds	r3, #20
 8008a42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a4c:	e841 2300 	strex	r3, r2, [r1]
 8008a50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d1e5      	bne.n	8008a24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d119      	bne.n	8008a94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	330c      	adds	r3, #12
 8008a66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	e853 3f00 	ldrex	r3, [r3]
 8008a6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	f023 0310 	bic.w	r3, r3, #16
 8008a76:	647b      	str	r3, [r7, #68]	; 0x44
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	330c      	adds	r3, #12
 8008a7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a80:	61ba      	str	r2, [r7, #24]
 8008a82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a84:	6979      	ldr	r1, [r7, #20]
 8008a86:	69ba      	ldr	r2, [r7, #24]
 8008a88:	e841 2300 	strex	r3, r2, [r1]
 8008a8c:	613b      	str	r3, [r7, #16]
   return(result);
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d1e5      	bne.n	8008a60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2220      	movs	r2, #32
 8008a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008aa2:	bf00      	nop
 8008aa4:	3754      	adds	r7, #84	; 0x54
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr

08008aae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b084      	sub	sp, #16
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ac8:	68f8      	ldr	r0, [r7, #12]
 8008aca:	f7ff fecb 	bl	8008864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ace:	bf00      	nop
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008ad6:	b480      	push	{r7}
 8008ad8:	b085      	sub	sp, #20
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	2b21      	cmp	r3, #33	; 0x21
 8008ae8:	d13e      	bne.n	8008b68 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008af2:	d114      	bne.n	8008b1e <UART_Transmit_IT+0x48>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	691b      	ldr	r3, [r3, #16]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d110      	bne.n	8008b1e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a1b      	ldr	r3, [r3, #32]
 8008b00:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	881b      	ldrh	r3, [r3, #0]
 8008b06:	461a      	mov	r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b10:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6a1b      	ldr	r3, [r3, #32]
 8008b16:	1c9a      	adds	r2, r3, #2
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	621a      	str	r2, [r3, #32]
 8008b1c:	e008      	b.n	8008b30 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	1c59      	adds	r1, r3, #1
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	6211      	str	r1, [r2, #32]
 8008b28:	781a      	ldrb	r2, [r3, #0]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	3b01      	subs	r3, #1
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d10f      	bne.n	8008b64 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	68da      	ldr	r2, [r3, #12]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b52:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	68da      	ldr	r2, [r3, #12]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b62:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	e000      	b.n	8008b6a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008b68:	2302      	movs	r3, #2
  }
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3714      	adds	r7, #20
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr

08008b76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b082      	sub	sp, #8
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	68da      	ldr	r2, [r3, #12]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2220      	movs	r2, #32
 8008b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f7ff fe5a 	bl	8008850 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3708      	adds	r7, #8
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b08c      	sub	sp, #48	; 0x30
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	2b22      	cmp	r3, #34	; 0x22
 8008bb8:	f040 80ab 	bne.w	8008d12 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bc4:	d117      	bne.n	8008bf6 <UART_Receive_IT+0x50>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d113      	bne.n	8008bf6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008be4:	b29a      	uxth	r2, r3
 8008be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bee:	1c9a      	adds	r2, r3, #2
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	629a      	str	r2, [r3, #40]	; 0x28
 8008bf4:	e026      	b.n	8008c44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c08:	d007      	beq.n	8008c1a <UART_Receive_IT+0x74>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d10a      	bne.n	8008c28 <UART_Receive_IT+0x82>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	691b      	ldr	r3, [r3, #16]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d106      	bne.n	8008c28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	b2da      	uxtb	r2, r3
 8008c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c24:	701a      	strb	r2, [r3, #0]
 8008c26:	e008      	b.n	8008c3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c34:	b2da      	uxtb	r2, r3
 8008c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c3e:	1c5a      	adds	r2, r3, #1
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	3b01      	subs	r3, #1
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	4619      	mov	r1, r3
 8008c52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d15a      	bne.n	8008d0e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68da      	ldr	r2, [r3, #12]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f022 0220 	bic.w	r2, r2, #32
 8008c66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	68da      	ldr	r2, [r3, #12]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	695a      	ldr	r2, [r3, #20]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f022 0201 	bic.w	r2, r2, #1
 8008c86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2220      	movs	r2, #32
 8008c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d135      	bne.n	8008d04 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	330c      	adds	r3, #12
 8008ca4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	e853 3f00 	ldrex	r3, [r3]
 8008cac:	613b      	str	r3, [r7, #16]
   return(result);
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	f023 0310 	bic.w	r3, r3, #16
 8008cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	330c      	adds	r3, #12
 8008cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cbe:	623a      	str	r2, [r7, #32]
 8008cc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc2:	69f9      	ldr	r1, [r7, #28]
 8008cc4:	6a3a      	ldr	r2, [r7, #32]
 8008cc6:	e841 2300 	strex	r3, r2, [r1]
 8008cca:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d1e5      	bne.n	8008c9e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 0310 	and.w	r3, r3, #16
 8008cdc:	2b10      	cmp	r3, #16
 8008cde:	d10a      	bne.n	8008cf6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	60fb      	str	r3, [r7, #12]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	60fb      	str	r3, [r7, #12]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	60fb      	str	r3, [r7, #12]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f7ff fdbb 	bl	8008878 <HAL_UARTEx_RxEventCallback>
 8008d02:	e002      	b.n	8008d0a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f7f8 fedf 	bl	8001ac8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	e002      	b.n	8008d14 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	e000      	b.n	8008d14 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008d12:	2302      	movs	r3, #2
  }
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3730      	adds	r7, #48	; 0x30
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d20:	b0c0      	sub	sp, #256	; 0x100
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d38:	68d9      	ldr	r1, [r3, #12]
 8008d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	ea40 0301 	orr.w	r3, r0, r1
 8008d44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d4a:	689a      	ldr	r2, [r3, #8]
 8008d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	431a      	orrs	r2, r3
 8008d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d58:	695b      	ldr	r3, [r3, #20]
 8008d5a:	431a      	orrs	r2, r3
 8008d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d60:	69db      	ldr	r3, [r3, #28]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008d74:	f021 010c 	bic.w	r1, r1, #12
 8008d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008d82:	430b      	orrs	r3, r1
 8008d84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	695b      	ldr	r3, [r3, #20]
 8008d8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d96:	6999      	ldr	r1, [r3, #24]
 8008d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	ea40 0301 	orr.w	r3, r0, r1
 8008da2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	4b8f      	ldr	r3, [pc, #572]	; (8008fe8 <UART_SetConfig+0x2cc>)
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d005      	beq.n	8008dbc <UART_SetConfig+0xa0>
 8008db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	4b8d      	ldr	r3, [pc, #564]	; (8008fec <UART_SetConfig+0x2d0>)
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d104      	bne.n	8008dc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008dbc:	f7fe f854 	bl	8006e68 <HAL_RCC_GetPCLK2Freq>
 8008dc0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008dc4:	e003      	b.n	8008dce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008dc6:	f7fe f83b 	bl	8006e40 <HAL_RCC_GetPCLK1Freq>
 8008dca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dd2:	69db      	ldr	r3, [r3, #28]
 8008dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dd8:	f040 810c 	bne.w	8008ff4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ddc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008de0:	2200      	movs	r2, #0
 8008de2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008de6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008dea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008dee:	4622      	mov	r2, r4
 8008df0:	462b      	mov	r3, r5
 8008df2:	1891      	adds	r1, r2, r2
 8008df4:	65b9      	str	r1, [r7, #88]	; 0x58
 8008df6:	415b      	adcs	r3, r3
 8008df8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008dfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008dfe:	4621      	mov	r1, r4
 8008e00:	eb12 0801 	adds.w	r8, r2, r1
 8008e04:	4629      	mov	r1, r5
 8008e06:	eb43 0901 	adc.w	r9, r3, r1
 8008e0a:	f04f 0200 	mov.w	r2, #0
 8008e0e:	f04f 0300 	mov.w	r3, #0
 8008e12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008e16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008e1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e1e:	4690      	mov	r8, r2
 8008e20:	4699      	mov	r9, r3
 8008e22:	4623      	mov	r3, r4
 8008e24:	eb18 0303 	adds.w	r3, r8, r3
 8008e28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008e2c:	462b      	mov	r3, r5
 8008e2e:	eb49 0303 	adc.w	r3, r9, r3
 8008e32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008e42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008e46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	18db      	adds	r3, r3, r3
 8008e4e:	653b      	str	r3, [r7, #80]	; 0x50
 8008e50:	4613      	mov	r3, r2
 8008e52:	eb42 0303 	adc.w	r3, r2, r3
 8008e56:	657b      	str	r3, [r7, #84]	; 0x54
 8008e58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008e5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008e60:	f7f7 febe 	bl	8000be0 <__aeabi_uldivmod>
 8008e64:	4602      	mov	r2, r0
 8008e66:	460b      	mov	r3, r1
 8008e68:	4b61      	ldr	r3, [pc, #388]	; (8008ff0 <UART_SetConfig+0x2d4>)
 8008e6a:	fba3 2302 	umull	r2, r3, r3, r2
 8008e6e:	095b      	lsrs	r3, r3, #5
 8008e70:	011c      	lsls	r4, r3, #4
 8008e72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e76:	2200      	movs	r2, #0
 8008e78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008e80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008e84:	4642      	mov	r2, r8
 8008e86:	464b      	mov	r3, r9
 8008e88:	1891      	adds	r1, r2, r2
 8008e8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8008e8c:	415b      	adcs	r3, r3
 8008e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008e94:	4641      	mov	r1, r8
 8008e96:	eb12 0a01 	adds.w	sl, r2, r1
 8008e9a:	4649      	mov	r1, r9
 8008e9c:	eb43 0b01 	adc.w	fp, r3, r1
 8008ea0:	f04f 0200 	mov.w	r2, #0
 8008ea4:	f04f 0300 	mov.w	r3, #0
 8008ea8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008eac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008eb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008eb4:	4692      	mov	sl, r2
 8008eb6:	469b      	mov	fp, r3
 8008eb8:	4643      	mov	r3, r8
 8008eba:	eb1a 0303 	adds.w	r3, sl, r3
 8008ebe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ec2:	464b      	mov	r3, r9
 8008ec4:	eb4b 0303 	adc.w	r3, fp, r3
 8008ec8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ed8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008edc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	18db      	adds	r3, r3, r3
 8008ee4:	643b      	str	r3, [r7, #64]	; 0x40
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	eb42 0303 	adc.w	r3, r2, r3
 8008eec:	647b      	str	r3, [r7, #68]	; 0x44
 8008eee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008ef2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008ef6:	f7f7 fe73 	bl	8000be0 <__aeabi_uldivmod>
 8008efa:	4602      	mov	r2, r0
 8008efc:	460b      	mov	r3, r1
 8008efe:	4611      	mov	r1, r2
 8008f00:	4b3b      	ldr	r3, [pc, #236]	; (8008ff0 <UART_SetConfig+0x2d4>)
 8008f02:	fba3 2301 	umull	r2, r3, r3, r1
 8008f06:	095b      	lsrs	r3, r3, #5
 8008f08:	2264      	movs	r2, #100	; 0x64
 8008f0a:	fb02 f303 	mul.w	r3, r2, r3
 8008f0e:	1acb      	subs	r3, r1, r3
 8008f10:	00db      	lsls	r3, r3, #3
 8008f12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008f16:	4b36      	ldr	r3, [pc, #216]	; (8008ff0 <UART_SetConfig+0x2d4>)
 8008f18:	fba3 2302 	umull	r2, r3, r3, r2
 8008f1c:	095b      	lsrs	r3, r3, #5
 8008f1e:	005b      	lsls	r3, r3, #1
 8008f20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008f24:	441c      	add	r4, r3
 8008f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008f34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008f38:	4642      	mov	r2, r8
 8008f3a:	464b      	mov	r3, r9
 8008f3c:	1891      	adds	r1, r2, r2
 8008f3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008f40:	415b      	adcs	r3, r3
 8008f42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008f48:	4641      	mov	r1, r8
 8008f4a:	1851      	adds	r1, r2, r1
 8008f4c:	6339      	str	r1, [r7, #48]	; 0x30
 8008f4e:	4649      	mov	r1, r9
 8008f50:	414b      	adcs	r3, r1
 8008f52:	637b      	str	r3, [r7, #52]	; 0x34
 8008f54:	f04f 0200 	mov.w	r2, #0
 8008f58:	f04f 0300 	mov.w	r3, #0
 8008f5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008f60:	4659      	mov	r1, fp
 8008f62:	00cb      	lsls	r3, r1, #3
 8008f64:	4651      	mov	r1, sl
 8008f66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f6a:	4651      	mov	r1, sl
 8008f6c:	00ca      	lsls	r2, r1, #3
 8008f6e:	4610      	mov	r0, r2
 8008f70:	4619      	mov	r1, r3
 8008f72:	4603      	mov	r3, r0
 8008f74:	4642      	mov	r2, r8
 8008f76:	189b      	adds	r3, r3, r2
 8008f78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f7c:	464b      	mov	r3, r9
 8008f7e:	460a      	mov	r2, r1
 8008f80:	eb42 0303 	adc.w	r3, r2, r3
 8008f84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008f94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008f98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	18db      	adds	r3, r3, r3
 8008fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	eb42 0303 	adc.w	r3, r2, r3
 8008fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008faa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008fae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008fb2:	f7f7 fe15 	bl	8000be0 <__aeabi_uldivmod>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	460b      	mov	r3, r1
 8008fba:	4b0d      	ldr	r3, [pc, #52]	; (8008ff0 <UART_SetConfig+0x2d4>)
 8008fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8008fc0:	095b      	lsrs	r3, r3, #5
 8008fc2:	2164      	movs	r1, #100	; 0x64
 8008fc4:	fb01 f303 	mul.w	r3, r1, r3
 8008fc8:	1ad3      	subs	r3, r2, r3
 8008fca:	00db      	lsls	r3, r3, #3
 8008fcc:	3332      	adds	r3, #50	; 0x32
 8008fce:	4a08      	ldr	r2, [pc, #32]	; (8008ff0 <UART_SetConfig+0x2d4>)
 8008fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8008fd4:	095b      	lsrs	r3, r3, #5
 8008fd6:	f003 0207 	and.w	r2, r3, #7
 8008fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4422      	add	r2, r4
 8008fe2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008fe4:	e105      	b.n	80091f2 <UART_SetConfig+0x4d6>
 8008fe6:	bf00      	nop
 8008fe8:	40011000 	.word	0x40011000
 8008fec:	40011400 	.word	0x40011400
 8008ff0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ff4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008ffe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009002:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009006:	4642      	mov	r2, r8
 8009008:	464b      	mov	r3, r9
 800900a:	1891      	adds	r1, r2, r2
 800900c:	6239      	str	r1, [r7, #32]
 800900e:	415b      	adcs	r3, r3
 8009010:	627b      	str	r3, [r7, #36]	; 0x24
 8009012:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009016:	4641      	mov	r1, r8
 8009018:	1854      	adds	r4, r2, r1
 800901a:	4649      	mov	r1, r9
 800901c:	eb43 0501 	adc.w	r5, r3, r1
 8009020:	f04f 0200 	mov.w	r2, #0
 8009024:	f04f 0300 	mov.w	r3, #0
 8009028:	00eb      	lsls	r3, r5, #3
 800902a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800902e:	00e2      	lsls	r2, r4, #3
 8009030:	4614      	mov	r4, r2
 8009032:	461d      	mov	r5, r3
 8009034:	4643      	mov	r3, r8
 8009036:	18e3      	adds	r3, r4, r3
 8009038:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800903c:	464b      	mov	r3, r9
 800903e:	eb45 0303 	adc.w	r3, r5, r3
 8009042:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009052:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009056:	f04f 0200 	mov.w	r2, #0
 800905a:	f04f 0300 	mov.w	r3, #0
 800905e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009062:	4629      	mov	r1, r5
 8009064:	008b      	lsls	r3, r1, #2
 8009066:	4621      	mov	r1, r4
 8009068:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800906c:	4621      	mov	r1, r4
 800906e:	008a      	lsls	r2, r1, #2
 8009070:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009074:	f7f7 fdb4 	bl	8000be0 <__aeabi_uldivmod>
 8009078:	4602      	mov	r2, r0
 800907a:	460b      	mov	r3, r1
 800907c:	4b60      	ldr	r3, [pc, #384]	; (8009200 <UART_SetConfig+0x4e4>)
 800907e:	fba3 2302 	umull	r2, r3, r3, r2
 8009082:	095b      	lsrs	r3, r3, #5
 8009084:	011c      	lsls	r4, r3, #4
 8009086:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800908a:	2200      	movs	r2, #0
 800908c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009090:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009094:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009098:	4642      	mov	r2, r8
 800909a:	464b      	mov	r3, r9
 800909c:	1891      	adds	r1, r2, r2
 800909e:	61b9      	str	r1, [r7, #24]
 80090a0:	415b      	adcs	r3, r3
 80090a2:	61fb      	str	r3, [r7, #28]
 80090a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090a8:	4641      	mov	r1, r8
 80090aa:	1851      	adds	r1, r2, r1
 80090ac:	6139      	str	r1, [r7, #16]
 80090ae:	4649      	mov	r1, r9
 80090b0:	414b      	adcs	r3, r1
 80090b2:	617b      	str	r3, [r7, #20]
 80090b4:	f04f 0200 	mov.w	r2, #0
 80090b8:	f04f 0300 	mov.w	r3, #0
 80090bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80090c0:	4659      	mov	r1, fp
 80090c2:	00cb      	lsls	r3, r1, #3
 80090c4:	4651      	mov	r1, sl
 80090c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090ca:	4651      	mov	r1, sl
 80090cc:	00ca      	lsls	r2, r1, #3
 80090ce:	4610      	mov	r0, r2
 80090d0:	4619      	mov	r1, r3
 80090d2:	4603      	mov	r3, r0
 80090d4:	4642      	mov	r2, r8
 80090d6:	189b      	adds	r3, r3, r2
 80090d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80090dc:	464b      	mov	r3, r9
 80090de:	460a      	mov	r2, r1
 80090e0:	eb42 0303 	adc.w	r3, r2, r3
 80090e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80090e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80090f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80090f4:	f04f 0200 	mov.w	r2, #0
 80090f8:	f04f 0300 	mov.w	r3, #0
 80090fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009100:	4649      	mov	r1, r9
 8009102:	008b      	lsls	r3, r1, #2
 8009104:	4641      	mov	r1, r8
 8009106:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800910a:	4641      	mov	r1, r8
 800910c:	008a      	lsls	r2, r1, #2
 800910e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009112:	f7f7 fd65 	bl	8000be0 <__aeabi_uldivmod>
 8009116:	4602      	mov	r2, r0
 8009118:	460b      	mov	r3, r1
 800911a:	4b39      	ldr	r3, [pc, #228]	; (8009200 <UART_SetConfig+0x4e4>)
 800911c:	fba3 1302 	umull	r1, r3, r3, r2
 8009120:	095b      	lsrs	r3, r3, #5
 8009122:	2164      	movs	r1, #100	; 0x64
 8009124:	fb01 f303 	mul.w	r3, r1, r3
 8009128:	1ad3      	subs	r3, r2, r3
 800912a:	011b      	lsls	r3, r3, #4
 800912c:	3332      	adds	r3, #50	; 0x32
 800912e:	4a34      	ldr	r2, [pc, #208]	; (8009200 <UART_SetConfig+0x4e4>)
 8009130:	fba2 2303 	umull	r2, r3, r2, r3
 8009134:	095b      	lsrs	r3, r3, #5
 8009136:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800913a:	441c      	add	r4, r3
 800913c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009140:	2200      	movs	r2, #0
 8009142:	673b      	str	r3, [r7, #112]	; 0x70
 8009144:	677a      	str	r2, [r7, #116]	; 0x74
 8009146:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800914a:	4642      	mov	r2, r8
 800914c:	464b      	mov	r3, r9
 800914e:	1891      	adds	r1, r2, r2
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	415b      	adcs	r3, r3
 8009154:	60fb      	str	r3, [r7, #12]
 8009156:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800915a:	4641      	mov	r1, r8
 800915c:	1851      	adds	r1, r2, r1
 800915e:	6039      	str	r1, [r7, #0]
 8009160:	4649      	mov	r1, r9
 8009162:	414b      	adcs	r3, r1
 8009164:	607b      	str	r3, [r7, #4]
 8009166:	f04f 0200 	mov.w	r2, #0
 800916a:	f04f 0300 	mov.w	r3, #0
 800916e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009172:	4659      	mov	r1, fp
 8009174:	00cb      	lsls	r3, r1, #3
 8009176:	4651      	mov	r1, sl
 8009178:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800917c:	4651      	mov	r1, sl
 800917e:	00ca      	lsls	r2, r1, #3
 8009180:	4610      	mov	r0, r2
 8009182:	4619      	mov	r1, r3
 8009184:	4603      	mov	r3, r0
 8009186:	4642      	mov	r2, r8
 8009188:	189b      	adds	r3, r3, r2
 800918a:	66bb      	str	r3, [r7, #104]	; 0x68
 800918c:	464b      	mov	r3, r9
 800918e:	460a      	mov	r2, r1
 8009190:	eb42 0303 	adc.w	r3, r2, r3
 8009194:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	2200      	movs	r2, #0
 800919e:	663b      	str	r3, [r7, #96]	; 0x60
 80091a0:	667a      	str	r2, [r7, #100]	; 0x64
 80091a2:	f04f 0200 	mov.w	r2, #0
 80091a6:	f04f 0300 	mov.w	r3, #0
 80091aa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80091ae:	4649      	mov	r1, r9
 80091b0:	008b      	lsls	r3, r1, #2
 80091b2:	4641      	mov	r1, r8
 80091b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091b8:	4641      	mov	r1, r8
 80091ba:	008a      	lsls	r2, r1, #2
 80091bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80091c0:	f7f7 fd0e 	bl	8000be0 <__aeabi_uldivmod>
 80091c4:	4602      	mov	r2, r0
 80091c6:	460b      	mov	r3, r1
 80091c8:	4b0d      	ldr	r3, [pc, #52]	; (8009200 <UART_SetConfig+0x4e4>)
 80091ca:	fba3 1302 	umull	r1, r3, r3, r2
 80091ce:	095b      	lsrs	r3, r3, #5
 80091d0:	2164      	movs	r1, #100	; 0x64
 80091d2:	fb01 f303 	mul.w	r3, r1, r3
 80091d6:	1ad3      	subs	r3, r2, r3
 80091d8:	011b      	lsls	r3, r3, #4
 80091da:	3332      	adds	r3, #50	; 0x32
 80091dc:	4a08      	ldr	r2, [pc, #32]	; (8009200 <UART_SetConfig+0x4e4>)
 80091de:	fba2 2303 	umull	r2, r3, r2, r3
 80091e2:	095b      	lsrs	r3, r3, #5
 80091e4:	f003 020f 	and.w	r2, r3, #15
 80091e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4422      	add	r2, r4
 80091f0:	609a      	str	r2, [r3, #8]
}
 80091f2:	bf00      	nop
 80091f4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80091f8:	46bd      	mov	sp, r7
 80091fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091fe:	bf00      	nop
 8009200:	51eb851f 	.word	0x51eb851f

08009204 <__errno>:
 8009204:	4b01      	ldr	r3, [pc, #4]	; (800920c <__errno+0x8>)
 8009206:	6818      	ldr	r0, [r3, #0]
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	20000010 	.word	0x20000010

08009210 <__libc_init_array>:
 8009210:	b570      	push	{r4, r5, r6, lr}
 8009212:	4d0d      	ldr	r5, [pc, #52]	; (8009248 <__libc_init_array+0x38>)
 8009214:	4c0d      	ldr	r4, [pc, #52]	; (800924c <__libc_init_array+0x3c>)
 8009216:	1b64      	subs	r4, r4, r5
 8009218:	10a4      	asrs	r4, r4, #2
 800921a:	2600      	movs	r6, #0
 800921c:	42a6      	cmp	r6, r4
 800921e:	d109      	bne.n	8009234 <__libc_init_array+0x24>
 8009220:	4d0b      	ldr	r5, [pc, #44]	; (8009250 <__libc_init_array+0x40>)
 8009222:	4c0c      	ldr	r4, [pc, #48]	; (8009254 <__libc_init_array+0x44>)
 8009224:	f002 fe50 	bl	800bec8 <_init>
 8009228:	1b64      	subs	r4, r4, r5
 800922a:	10a4      	asrs	r4, r4, #2
 800922c:	2600      	movs	r6, #0
 800922e:	42a6      	cmp	r6, r4
 8009230:	d105      	bne.n	800923e <__libc_init_array+0x2e>
 8009232:	bd70      	pop	{r4, r5, r6, pc}
 8009234:	f855 3b04 	ldr.w	r3, [r5], #4
 8009238:	4798      	blx	r3
 800923a:	3601      	adds	r6, #1
 800923c:	e7ee      	b.n	800921c <__libc_init_array+0xc>
 800923e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009242:	4798      	blx	r3
 8009244:	3601      	adds	r6, #1
 8009246:	e7f2      	b.n	800922e <__libc_init_array+0x1e>
 8009248:	0800c4e8 	.word	0x0800c4e8
 800924c:	0800c4e8 	.word	0x0800c4e8
 8009250:	0800c4e8 	.word	0x0800c4e8
 8009254:	0800c4ec 	.word	0x0800c4ec

08009258 <memset>:
 8009258:	4402      	add	r2, r0
 800925a:	4603      	mov	r3, r0
 800925c:	4293      	cmp	r3, r2
 800925e:	d100      	bne.n	8009262 <memset+0xa>
 8009260:	4770      	bx	lr
 8009262:	f803 1b01 	strb.w	r1, [r3], #1
 8009266:	e7f9      	b.n	800925c <memset+0x4>

08009268 <cos>:
 8009268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800926a:	ec53 2b10 	vmov	r2, r3, d0
 800926e:	4826      	ldr	r0, [pc, #152]	; (8009308 <cos+0xa0>)
 8009270:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009274:	4281      	cmp	r1, r0
 8009276:	dc06      	bgt.n	8009286 <cos+0x1e>
 8009278:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009300 <cos+0x98>
 800927c:	b005      	add	sp, #20
 800927e:	f85d eb04 	ldr.w	lr, [sp], #4
 8009282:	f001 bbb1 	b.w	800a9e8 <__kernel_cos>
 8009286:	4821      	ldr	r0, [pc, #132]	; (800930c <cos+0xa4>)
 8009288:	4281      	cmp	r1, r0
 800928a:	dd09      	ble.n	80092a0 <cos+0x38>
 800928c:	ee10 0a10 	vmov	r0, s0
 8009290:	4619      	mov	r1, r3
 8009292:	f7f6 ffa5 	bl	80001e0 <__aeabi_dsub>
 8009296:	ec41 0b10 	vmov	d0, r0, r1
 800929a:	b005      	add	sp, #20
 800929c:	f85d fb04 	ldr.w	pc, [sp], #4
 80092a0:	4668      	mov	r0, sp
 80092a2:	f000 ff4d 	bl	800a140 <__ieee754_rem_pio2>
 80092a6:	f000 0003 	and.w	r0, r0, #3
 80092aa:	2801      	cmp	r0, #1
 80092ac:	d00b      	beq.n	80092c6 <cos+0x5e>
 80092ae:	2802      	cmp	r0, #2
 80092b0:	d016      	beq.n	80092e0 <cos+0x78>
 80092b2:	b9e0      	cbnz	r0, 80092ee <cos+0x86>
 80092b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80092b8:	ed9d 0b00 	vldr	d0, [sp]
 80092bc:	f001 fb94 	bl	800a9e8 <__kernel_cos>
 80092c0:	ec51 0b10 	vmov	r0, r1, d0
 80092c4:	e7e7      	b.n	8009296 <cos+0x2e>
 80092c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80092ca:	ed9d 0b00 	vldr	d0, [sp]
 80092ce:	f001 ffa3 	bl	800b218 <__kernel_sin>
 80092d2:	ec53 2b10 	vmov	r2, r3, d0
 80092d6:	ee10 0a10 	vmov	r0, s0
 80092da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80092de:	e7da      	b.n	8009296 <cos+0x2e>
 80092e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80092e4:	ed9d 0b00 	vldr	d0, [sp]
 80092e8:	f001 fb7e 	bl	800a9e8 <__kernel_cos>
 80092ec:	e7f1      	b.n	80092d2 <cos+0x6a>
 80092ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 80092f2:	ed9d 0b00 	vldr	d0, [sp]
 80092f6:	2001      	movs	r0, #1
 80092f8:	f001 ff8e 	bl	800b218 <__kernel_sin>
 80092fc:	e7e0      	b.n	80092c0 <cos+0x58>
 80092fe:	bf00      	nop
	...
 8009308:	3fe921fb 	.word	0x3fe921fb
 800930c:	7fefffff 	.word	0x7fefffff

08009310 <floor>:
 8009310:	ec51 0b10 	vmov	r0, r1, d0
 8009314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009318:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800931c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009320:	2e13      	cmp	r6, #19
 8009322:	ee10 5a10 	vmov	r5, s0
 8009326:	ee10 8a10 	vmov	r8, s0
 800932a:	460c      	mov	r4, r1
 800932c:	dc32      	bgt.n	8009394 <floor+0x84>
 800932e:	2e00      	cmp	r6, #0
 8009330:	da14      	bge.n	800935c <floor+0x4c>
 8009332:	a333      	add	r3, pc, #204	; (adr r3, 8009400 <floor+0xf0>)
 8009334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009338:	f7f6 ff54 	bl	80001e4 <__adddf3>
 800933c:	2200      	movs	r2, #0
 800933e:	2300      	movs	r3, #0
 8009340:	f7f7 fb96 	bl	8000a70 <__aeabi_dcmpgt>
 8009344:	b138      	cbz	r0, 8009356 <floor+0x46>
 8009346:	2c00      	cmp	r4, #0
 8009348:	da57      	bge.n	80093fa <floor+0xea>
 800934a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800934e:	431d      	orrs	r5, r3
 8009350:	d001      	beq.n	8009356 <floor+0x46>
 8009352:	4c2d      	ldr	r4, [pc, #180]	; (8009408 <floor+0xf8>)
 8009354:	2500      	movs	r5, #0
 8009356:	4621      	mov	r1, r4
 8009358:	4628      	mov	r0, r5
 800935a:	e025      	b.n	80093a8 <floor+0x98>
 800935c:	4f2b      	ldr	r7, [pc, #172]	; (800940c <floor+0xfc>)
 800935e:	4137      	asrs	r7, r6
 8009360:	ea01 0307 	and.w	r3, r1, r7
 8009364:	4303      	orrs	r3, r0
 8009366:	d01f      	beq.n	80093a8 <floor+0x98>
 8009368:	a325      	add	r3, pc, #148	; (adr r3, 8009400 <floor+0xf0>)
 800936a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936e:	f7f6 ff39 	bl	80001e4 <__adddf3>
 8009372:	2200      	movs	r2, #0
 8009374:	2300      	movs	r3, #0
 8009376:	f7f7 fb7b 	bl	8000a70 <__aeabi_dcmpgt>
 800937a:	2800      	cmp	r0, #0
 800937c:	d0eb      	beq.n	8009356 <floor+0x46>
 800937e:	2c00      	cmp	r4, #0
 8009380:	bfbe      	ittt	lt
 8009382:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009386:	fa43 f606 	asrlt.w	r6, r3, r6
 800938a:	19a4      	addlt	r4, r4, r6
 800938c:	ea24 0407 	bic.w	r4, r4, r7
 8009390:	2500      	movs	r5, #0
 8009392:	e7e0      	b.n	8009356 <floor+0x46>
 8009394:	2e33      	cmp	r6, #51	; 0x33
 8009396:	dd0b      	ble.n	80093b0 <floor+0xa0>
 8009398:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800939c:	d104      	bne.n	80093a8 <floor+0x98>
 800939e:	ee10 2a10 	vmov	r2, s0
 80093a2:	460b      	mov	r3, r1
 80093a4:	f7f6 ff1e 	bl	80001e4 <__adddf3>
 80093a8:	ec41 0b10 	vmov	d0, r0, r1
 80093ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093b0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80093b4:	f04f 33ff 	mov.w	r3, #4294967295
 80093b8:	fa23 f707 	lsr.w	r7, r3, r7
 80093bc:	4207      	tst	r7, r0
 80093be:	d0f3      	beq.n	80093a8 <floor+0x98>
 80093c0:	a30f      	add	r3, pc, #60	; (adr r3, 8009400 <floor+0xf0>)
 80093c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c6:	f7f6 ff0d 	bl	80001e4 <__adddf3>
 80093ca:	2200      	movs	r2, #0
 80093cc:	2300      	movs	r3, #0
 80093ce:	f7f7 fb4f 	bl	8000a70 <__aeabi_dcmpgt>
 80093d2:	2800      	cmp	r0, #0
 80093d4:	d0bf      	beq.n	8009356 <floor+0x46>
 80093d6:	2c00      	cmp	r4, #0
 80093d8:	da02      	bge.n	80093e0 <floor+0xd0>
 80093da:	2e14      	cmp	r6, #20
 80093dc:	d103      	bne.n	80093e6 <floor+0xd6>
 80093de:	3401      	adds	r4, #1
 80093e0:	ea25 0507 	bic.w	r5, r5, r7
 80093e4:	e7b7      	b.n	8009356 <floor+0x46>
 80093e6:	2301      	movs	r3, #1
 80093e8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80093ec:	fa03 f606 	lsl.w	r6, r3, r6
 80093f0:	4435      	add	r5, r6
 80093f2:	4545      	cmp	r5, r8
 80093f4:	bf38      	it	cc
 80093f6:	18e4      	addcc	r4, r4, r3
 80093f8:	e7f2      	b.n	80093e0 <floor+0xd0>
 80093fa:	2500      	movs	r5, #0
 80093fc:	462c      	mov	r4, r5
 80093fe:	e7aa      	b.n	8009356 <floor+0x46>
 8009400:	8800759c 	.word	0x8800759c
 8009404:	7e37e43c 	.word	0x7e37e43c
 8009408:	bff00000 	.word	0xbff00000
 800940c:	000fffff 	.word	0x000fffff

08009410 <sin>:
 8009410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009412:	ec53 2b10 	vmov	r2, r3, d0
 8009416:	4828      	ldr	r0, [pc, #160]	; (80094b8 <sin+0xa8>)
 8009418:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800941c:	4281      	cmp	r1, r0
 800941e:	dc07      	bgt.n	8009430 <sin+0x20>
 8009420:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80094b0 <sin+0xa0>
 8009424:	2000      	movs	r0, #0
 8009426:	b005      	add	sp, #20
 8009428:	f85d eb04 	ldr.w	lr, [sp], #4
 800942c:	f001 bef4 	b.w	800b218 <__kernel_sin>
 8009430:	4822      	ldr	r0, [pc, #136]	; (80094bc <sin+0xac>)
 8009432:	4281      	cmp	r1, r0
 8009434:	dd09      	ble.n	800944a <sin+0x3a>
 8009436:	ee10 0a10 	vmov	r0, s0
 800943a:	4619      	mov	r1, r3
 800943c:	f7f6 fed0 	bl	80001e0 <__aeabi_dsub>
 8009440:	ec41 0b10 	vmov	d0, r0, r1
 8009444:	b005      	add	sp, #20
 8009446:	f85d fb04 	ldr.w	pc, [sp], #4
 800944a:	4668      	mov	r0, sp
 800944c:	f000 fe78 	bl	800a140 <__ieee754_rem_pio2>
 8009450:	f000 0003 	and.w	r0, r0, #3
 8009454:	2801      	cmp	r0, #1
 8009456:	d00c      	beq.n	8009472 <sin+0x62>
 8009458:	2802      	cmp	r0, #2
 800945a:	d011      	beq.n	8009480 <sin+0x70>
 800945c:	b9f0      	cbnz	r0, 800949c <sin+0x8c>
 800945e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009462:	ed9d 0b00 	vldr	d0, [sp]
 8009466:	2001      	movs	r0, #1
 8009468:	f001 fed6 	bl	800b218 <__kernel_sin>
 800946c:	ec51 0b10 	vmov	r0, r1, d0
 8009470:	e7e6      	b.n	8009440 <sin+0x30>
 8009472:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009476:	ed9d 0b00 	vldr	d0, [sp]
 800947a:	f001 fab5 	bl	800a9e8 <__kernel_cos>
 800947e:	e7f5      	b.n	800946c <sin+0x5c>
 8009480:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009484:	ed9d 0b00 	vldr	d0, [sp]
 8009488:	2001      	movs	r0, #1
 800948a:	f001 fec5 	bl	800b218 <__kernel_sin>
 800948e:	ec53 2b10 	vmov	r2, r3, d0
 8009492:	ee10 0a10 	vmov	r0, s0
 8009496:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800949a:	e7d1      	b.n	8009440 <sin+0x30>
 800949c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80094a0:	ed9d 0b00 	vldr	d0, [sp]
 80094a4:	f001 faa0 	bl	800a9e8 <__kernel_cos>
 80094a8:	e7f1      	b.n	800948e <sin+0x7e>
 80094aa:	bf00      	nop
 80094ac:	f3af 8000 	nop.w
	...
 80094b8:	3fe921fb 	.word	0x3fe921fb
 80094bc:	7fefffff 	.word	0x7fefffff

080094c0 <cosf>:
 80094c0:	ee10 3a10 	vmov	r3, s0
 80094c4:	b507      	push	{r0, r1, r2, lr}
 80094c6:	4a1e      	ldr	r2, [pc, #120]	; (8009540 <cosf+0x80>)
 80094c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094cc:	4293      	cmp	r3, r2
 80094ce:	dc06      	bgt.n	80094de <cosf+0x1e>
 80094d0:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8009544 <cosf+0x84>
 80094d4:	b003      	add	sp, #12
 80094d6:	f85d eb04 	ldr.w	lr, [sp], #4
 80094da:	f001 bf5b 	b.w	800b394 <__kernel_cosf>
 80094de:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80094e2:	db04      	blt.n	80094ee <cosf+0x2e>
 80094e4:	ee30 0a40 	vsub.f32	s0, s0, s0
 80094e8:	b003      	add	sp, #12
 80094ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80094ee:	4668      	mov	r0, sp
 80094f0:	f001 f93c 	bl	800a76c <__ieee754_rem_pio2f>
 80094f4:	f000 0003 	and.w	r0, r0, #3
 80094f8:	2801      	cmp	r0, #1
 80094fa:	d009      	beq.n	8009510 <cosf+0x50>
 80094fc:	2802      	cmp	r0, #2
 80094fe:	d010      	beq.n	8009522 <cosf+0x62>
 8009500:	b9b0      	cbnz	r0, 8009530 <cosf+0x70>
 8009502:	eddd 0a01 	vldr	s1, [sp, #4]
 8009506:	ed9d 0a00 	vldr	s0, [sp]
 800950a:	f001 ff43 	bl	800b394 <__kernel_cosf>
 800950e:	e7eb      	b.n	80094e8 <cosf+0x28>
 8009510:	eddd 0a01 	vldr	s1, [sp, #4]
 8009514:	ed9d 0a00 	vldr	s0, [sp]
 8009518:	f002 fa12 	bl	800b940 <__kernel_sinf>
 800951c:	eeb1 0a40 	vneg.f32	s0, s0
 8009520:	e7e2      	b.n	80094e8 <cosf+0x28>
 8009522:	eddd 0a01 	vldr	s1, [sp, #4]
 8009526:	ed9d 0a00 	vldr	s0, [sp]
 800952a:	f001 ff33 	bl	800b394 <__kernel_cosf>
 800952e:	e7f5      	b.n	800951c <cosf+0x5c>
 8009530:	eddd 0a01 	vldr	s1, [sp, #4]
 8009534:	ed9d 0a00 	vldr	s0, [sp]
 8009538:	2001      	movs	r0, #1
 800953a:	f002 fa01 	bl	800b940 <__kernel_sinf>
 800953e:	e7d3      	b.n	80094e8 <cosf+0x28>
 8009540:	3f490fd8 	.word	0x3f490fd8
 8009544:	00000000 	.word	0x00000000

08009548 <pow>:
 8009548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800954a:	ed2d 8b02 	vpush	{d8}
 800954e:	eeb0 8a40 	vmov.f32	s16, s0
 8009552:	eef0 8a60 	vmov.f32	s17, s1
 8009556:	ec55 4b11 	vmov	r4, r5, d1
 800955a:	f000 f8c1 	bl	80096e0 <__ieee754_pow>
 800955e:	4622      	mov	r2, r4
 8009560:	462b      	mov	r3, r5
 8009562:	4620      	mov	r0, r4
 8009564:	4629      	mov	r1, r5
 8009566:	ec57 6b10 	vmov	r6, r7, d0
 800956a:	f7f7 fa8b 	bl	8000a84 <__aeabi_dcmpun>
 800956e:	2800      	cmp	r0, #0
 8009570:	d13b      	bne.n	80095ea <pow+0xa2>
 8009572:	ec51 0b18 	vmov	r0, r1, d8
 8009576:	2200      	movs	r2, #0
 8009578:	2300      	movs	r3, #0
 800957a:	f7f7 fa51 	bl	8000a20 <__aeabi_dcmpeq>
 800957e:	b1b8      	cbz	r0, 80095b0 <pow+0x68>
 8009580:	2200      	movs	r2, #0
 8009582:	2300      	movs	r3, #0
 8009584:	4620      	mov	r0, r4
 8009586:	4629      	mov	r1, r5
 8009588:	f7f7 fa4a 	bl	8000a20 <__aeabi_dcmpeq>
 800958c:	2800      	cmp	r0, #0
 800958e:	d146      	bne.n	800961e <pow+0xd6>
 8009590:	ec45 4b10 	vmov	d0, r4, r5
 8009594:	f002 fa55 	bl	800ba42 <finite>
 8009598:	b338      	cbz	r0, 80095ea <pow+0xa2>
 800959a:	2200      	movs	r2, #0
 800959c:	2300      	movs	r3, #0
 800959e:	4620      	mov	r0, r4
 80095a0:	4629      	mov	r1, r5
 80095a2:	f7f7 fa47 	bl	8000a34 <__aeabi_dcmplt>
 80095a6:	b300      	cbz	r0, 80095ea <pow+0xa2>
 80095a8:	f7ff fe2c 	bl	8009204 <__errno>
 80095ac:	2322      	movs	r3, #34	; 0x22
 80095ae:	e01b      	b.n	80095e8 <pow+0xa0>
 80095b0:	ec47 6b10 	vmov	d0, r6, r7
 80095b4:	f002 fa45 	bl	800ba42 <finite>
 80095b8:	b9e0      	cbnz	r0, 80095f4 <pow+0xac>
 80095ba:	eeb0 0a48 	vmov.f32	s0, s16
 80095be:	eef0 0a68 	vmov.f32	s1, s17
 80095c2:	f002 fa3e 	bl	800ba42 <finite>
 80095c6:	b1a8      	cbz	r0, 80095f4 <pow+0xac>
 80095c8:	ec45 4b10 	vmov	d0, r4, r5
 80095cc:	f002 fa39 	bl	800ba42 <finite>
 80095d0:	b180      	cbz	r0, 80095f4 <pow+0xac>
 80095d2:	4632      	mov	r2, r6
 80095d4:	463b      	mov	r3, r7
 80095d6:	4630      	mov	r0, r6
 80095d8:	4639      	mov	r1, r7
 80095da:	f7f7 fa53 	bl	8000a84 <__aeabi_dcmpun>
 80095de:	2800      	cmp	r0, #0
 80095e0:	d0e2      	beq.n	80095a8 <pow+0x60>
 80095e2:	f7ff fe0f 	bl	8009204 <__errno>
 80095e6:	2321      	movs	r3, #33	; 0x21
 80095e8:	6003      	str	r3, [r0, #0]
 80095ea:	ecbd 8b02 	vpop	{d8}
 80095ee:	ec47 6b10 	vmov	d0, r6, r7
 80095f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095f4:	2200      	movs	r2, #0
 80095f6:	2300      	movs	r3, #0
 80095f8:	4630      	mov	r0, r6
 80095fa:	4639      	mov	r1, r7
 80095fc:	f7f7 fa10 	bl	8000a20 <__aeabi_dcmpeq>
 8009600:	2800      	cmp	r0, #0
 8009602:	d0f2      	beq.n	80095ea <pow+0xa2>
 8009604:	eeb0 0a48 	vmov.f32	s0, s16
 8009608:	eef0 0a68 	vmov.f32	s1, s17
 800960c:	f002 fa19 	bl	800ba42 <finite>
 8009610:	2800      	cmp	r0, #0
 8009612:	d0ea      	beq.n	80095ea <pow+0xa2>
 8009614:	ec45 4b10 	vmov	d0, r4, r5
 8009618:	f002 fa13 	bl	800ba42 <finite>
 800961c:	e7c3      	b.n	80095a6 <pow+0x5e>
 800961e:	4f01      	ldr	r7, [pc, #4]	; (8009624 <pow+0xdc>)
 8009620:	2600      	movs	r6, #0
 8009622:	e7e2      	b.n	80095ea <pow+0xa2>
 8009624:	3ff00000 	.word	0x3ff00000

08009628 <sqrt>:
 8009628:	b538      	push	{r3, r4, r5, lr}
 800962a:	ed2d 8b02 	vpush	{d8}
 800962e:	ec55 4b10 	vmov	r4, r5, d0
 8009632:	f000 ff91 	bl	800a558 <__ieee754_sqrt>
 8009636:	4622      	mov	r2, r4
 8009638:	462b      	mov	r3, r5
 800963a:	4620      	mov	r0, r4
 800963c:	4629      	mov	r1, r5
 800963e:	eeb0 8a40 	vmov.f32	s16, s0
 8009642:	eef0 8a60 	vmov.f32	s17, s1
 8009646:	f7f7 fa1d 	bl	8000a84 <__aeabi_dcmpun>
 800964a:	b990      	cbnz	r0, 8009672 <sqrt+0x4a>
 800964c:	2200      	movs	r2, #0
 800964e:	2300      	movs	r3, #0
 8009650:	4620      	mov	r0, r4
 8009652:	4629      	mov	r1, r5
 8009654:	f7f7 f9ee 	bl	8000a34 <__aeabi_dcmplt>
 8009658:	b158      	cbz	r0, 8009672 <sqrt+0x4a>
 800965a:	f7ff fdd3 	bl	8009204 <__errno>
 800965e:	2321      	movs	r3, #33	; 0x21
 8009660:	6003      	str	r3, [r0, #0]
 8009662:	2200      	movs	r2, #0
 8009664:	2300      	movs	r3, #0
 8009666:	4610      	mov	r0, r2
 8009668:	4619      	mov	r1, r3
 800966a:	f7f7 f89b 	bl	80007a4 <__aeabi_ddiv>
 800966e:	ec41 0b18 	vmov	d8, r0, r1
 8009672:	eeb0 0a48 	vmov.f32	s0, s16
 8009676:	eef0 0a68 	vmov.f32	s1, s17
 800967a:	ecbd 8b02 	vpop	{d8}
 800967e:	bd38      	pop	{r3, r4, r5, pc}

08009680 <log10f>:
 8009680:	b508      	push	{r3, lr}
 8009682:	ed2d 8b02 	vpush	{d8}
 8009686:	eeb0 8a40 	vmov.f32	s16, s0
 800968a:	f001 f817 	bl	800a6bc <__ieee754_log10f>
 800968e:	eeb4 8a48 	vcmp.f32	s16, s16
 8009692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009696:	d60f      	bvs.n	80096b8 <log10f+0x38>
 8009698:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800969c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096a0:	d80a      	bhi.n	80096b8 <log10f+0x38>
 80096a2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80096a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096aa:	d108      	bne.n	80096be <log10f+0x3e>
 80096ac:	f7ff fdaa 	bl	8009204 <__errno>
 80096b0:	2322      	movs	r3, #34	; 0x22
 80096b2:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80096d4 <log10f+0x54>
 80096b6:	6003      	str	r3, [r0, #0]
 80096b8:	ecbd 8b02 	vpop	{d8}
 80096bc:	bd08      	pop	{r3, pc}
 80096be:	f7ff fda1 	bl	8009204 <__errno>
 80096c2:	ecbd 8b02 	vpop	{d8}
 80096c6:	2321      	movs	r3, #33	; 0x21
 80096c8:	6003      	str	r3, [r0, #0]
 80096ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80096ce:	4802      	ldr	r0, [pc, #8]	; (80096d8 <log10f+0x58>)
 80096d0:	f002 ba92 	b.w	800bbf8 <nanf>
 80096d4:	ff800000 	.word	0xff800000
 80096d8:	0800bf00 	.word	0x0800bf00
 80096dc:	00000000 	.word	0x00000000

080096e0 <__ieee754_pow>:
 80096e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e4:	ed2d 8b06 	vpush	{d8-d10}
 80096e8:	b089      	sub	sp, #36	; 0x24
 80096ea:	ed8d 1b00 	vstr	d1, [sp]
 80096ee:	e9dd 2900 	ldrd	r2, r9, [sp]
 80096f2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80096f6:	ea58 0102 	orrs.w	r1, r8, r2
 80096fa:	ec57 6b10 	vmov	r6, r7, d0
 80096fe:	d115      	bne.n	800972c <__ieee754_pow+0x4c>
 8009700:	19b3      	adds	r3, r6, r6
 8009702:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009706:	4152      	adcs	r2, r2
 8009708:	4299      	cmp	r1, r3
 800970a:	4b89      	ldr	r3, [pc, #548]	; (8009930 <__ieee754_pow+0x250>)
 800970c:	4193      	sbcs	r3, r2
 800970e:	f080 84d2 	bcs.w	800a0b6 <__ieee754_pow+0x9d6>
 8009712:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009716:	4630      	mov	r0, r6
 8009718:	4639      	mov	r1, r7
 800971a:	f7f6 fd63 	bl	80001e4 <__adddf3>
 800971e:	ec41 0b10 	vmov	d0, r0, r1
 8009722:	b009      	add	sp, #36	; 0x24
 8009724:	ecbd 8b06 	vpop	{d8-d10}
 8009728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800972c:	4b81      	ldr	r3, [pc, #516]	; (8009934 <__ieee754_pow+0x254>)
 800972e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009732:	429c      	cmp	r4, r3
 8009734:	ee10 aa10 	vmov	sl, s0
 8009738:	463d      	mov	r5, r7
 800973a:	dc06      	bgt.n	800974a <__ieee754_pow+0x6a>
 800973c:	d101      	bne.n	8009742 <__ieee754_pow+0x62>
 800973e:	2e00      	cmp	r6, #0
 8009740:	d1e7      	bne.n	8009712 <__ieee754_pow+0x32>
 8009742:	4598      	cmp	r8, r3
 8009744:	dc01      	bgt.n	800974a <__ieee754_pow+0x6a>
 8009746:	d10f      	bne.n	8009768 <__ieee754_pow+0x88>
 8009748:	b172      	cbz	r2, 8009768 <__ieee754_pow+0x88>
 800974a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800974e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009752:	ea55 050a 	orrs.w	r5, r5, sl
 8009756:	d1dc      	bne.n	8009712 <__ieee754_pow+0x32>
 8009758:	e9dd 3200 	ldrd	r3, r2, [sp]
 800975c:	18db      	adds	r3, r3, r3
 800975e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009762:	4152      	adcs	r2, r2
 8009764:	429d      	cmp	r5, r3
 8009766:	e7d0      	b.n	800970a <__ieee754_pow+0x2a>
 8009768:	2d00      	cmp	r5, #0
 800976a:	da3b      	bge.n	80097e4 <__ieee754_pow+0x104>
 800976c:	4b72      	ldr	r3, [pc, #456]	; (8009938 <__ieee754_pow+0x258>)
 800976e:	4598      	cmp	r8, r3
 8009770:	dc51      	bgt.n	8009816 <__ieee754_pow+0x136>
 8009772:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009776:	4598      	cmp	r8, r3
 8009778:	f340 84ac 	ble.w	800a0d4 <__ieee754_pow+0x9f4>
 800977c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009780:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009784:	2b14      	cmp	r3, #20
 8009786:	dd0f      	ble.n	80097a8 <__ieee754_pow+0xc8>
 8009788:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800978c:	fa22 f103 	lsr.w	r1, r2, r3
 8009790:	fa01 f303 	lsl.w	r3, r1, r3
 8009794:	4293      	cmp	r3, r2
 8009796:	f040 849d 	bne.w	800a0d4 <__ieee754_pow+0x9f4>
 800979a:	f001 0101 	and.w	r1, r1, #1
 800979e:	f1c1 0302 	rsb	r3, r1, #2
 80097a2:	9304      	str	r3, [sp, #16]
 80097a4:	b182      	cbz	r2, 80097c8 <__ieee754_pow+0xe8>
 80097a6:	e05f      	b.n	8009868 <__ieee754_pow+0x188>
 80097a8:	2a00      	cmp	r2, #0
 80097aa:	d15b      	bne.n	8009864 <__ieee754_pow+0x184>
 80097ac:	f1c3 0314 	rsb	r3, r3, #20
 80097b0:	fa48 f103 	asr.w	r1, r8, r3
 80097b4:	fa01 f303 	lsl.w	r3, r1, r3
 80097b8:	4543      	cmp	r3, r8
 80097ba:	f040 8488 	bne.w	800a0ce <__ieee754_pow+0x9ee>
 80097be:	f001 0101 	and.w	r1, r1, #1
 80097c2:	f1c1 0302 	rsb	r3, r1, #2
 80097c6:	9304      	str	r3, [sp, #16]
 80097c8:	4b5c      	ldr	r3, [pc, #368]	; (800993c <__ieee754_pow+0x25c>)
 80097ca:	4598      	cmp	r8, r3
 80097cc:	d132      	bne.n	8009834 <__ieee754_pow+0x154>
 80097ce:	f1b9 0f00 	cmp.w	r9, #0
 80097d2:	f280 8478 	bge.w	800a0c6 <__ieee754_pow+0x9e6>
 80097d6:	4959      	ldr	r1, [pc, #356]	; (800993c <__ieee754_pow+0x25c>)
 80097d8:	4632      	mov	r2, r6
 80097da:	463b      	mov	r3, r7
 80097dc:	2000      	movs	r0, #0
 80097de:	f7f6 ffe1 	bl	80007a4 <__aeabi_ddiv>
 80097e2:	e79c      	b.n	800971e <__ieee754_pow+0x3e>
 80097e4:	2300      	movs	r3, #0
 80097e6:	9304      	str	r3, [sp, #16]
 80097e8:	2a00      	cmp	r2, #0
 80097ea:	d13d      	bne.n	8009868 <__ieee754_pow+0x188>
 80097ec:	4b51      	ldr	r3, [pc, #324]	; (8009934 <__ieee754_pow+0x254>)
 80097ee:	4598      	cmp	r8, r3
 80097f0:	d1ea      	bne.n	80097c8 <__ieee754_pow+0xe8>
 80097f2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80097f6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80097fa:	ea53 030a 	orrs.w	r3, r3, sl
 80097fe:	f000 845a 	beq.w	800a0b6 <__ieee754_pow+0x9d6>
 8009802:	4b4f      	ldr	r3, [pc, #316]	; (8009940 <__ieee754_pow+0x260>)
 8009804:	429c      	cmp	r4, r3
 8009806:	dd08      	ble.n	800981a <__ieee754_pow+0x13a>
 8009808:	f1b9 0f00 	cmp.w	r9, #0
 800980c:	f2c0 8457 	blt.w	800a0be <__ieee754_pow+0x9de>
 8009810:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009814:	e783      	b.n	800971e <__ieee754_pow+0x3e>
 8009816:	2302      	movs	r3, #2
 8009818:	e7e5      	b.n	80097e6 <__ieee754_pow+0x106>
 800981a:	f1b9 0f00 	cmp.w	r9, #0
 800981e:	f04f 0000 	mov.w	r0, #0
 8009822:	f04f 0100 	mov.w	r1, #0
 8009826:	f6bf af7a 	bge.w	800971e <__ieee754_pow+0x3e>
 800982a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800982e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009832:	e774      	b.n	800971e <__ieee754_pow+0x3e>
 8009834:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009838:	d106      	bne.n	8009848 <__ieee754_pow+0x168>
 800983a:	4632      	mov	r2, r6
 800983c:	463b      	mov	r3, r7
 800983e:	4630      	mov	r0, r6
 8009840:	4639      	mov	r1, r7
 8009842:	f7f6 fe85 	bl	8000550 <__aeabi_dmul>
 8009846:	e76a      	b.n	800971e <__ieee754_pow+0x3e>
 8009848:	4b3e      	ldr	r3, [pc, #248]	; (8009944 <__ieee754_pow+0x264>)
 800984a:	4599      	cmp	r9, r3
 800984c:	d10c      	bne.n	8009868 <__ieee754_pow+0x188>
 800984e:	2d00      	cmp	r5, #0
 8009850:	db0a      	blt.n	8009868 <__ieee754_pow+0x188>
 8009852:	ec47 6b10 	vmov	d0, r6, r7
 8009856:	b009      	add	sp, #36	; 0x24
 8009858:	ecbd 8b06 	vpop	{d8-d10}
 800985c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009860:	f000 be7a 	b.w	800a558 <__ieee754_sqrt>
 8009864:	2300      	movs	r3, #0
 8009866:	9304      	str	r3, [sp, #16]
 8009868:	ec47 6b10 	vmov	d0, r6, r7
 800986c:	f002 f8e0 	bl	800ba30 <fabs>
 8009870:	ec51 0b10 	vmov	r0, r1, d0
 8009874:	f1ba 0f00 	cmp.w	sl, #0
 8009878:	d129      	bne.n	80098ce <__ieee754_pow+0x1ee>
 800987a:	b124      	cbz	r4, 8009886 <__ieee754_pow+0x1a6>
 800987c:	4b2f      	ldr	r3, [pc, #188]	; (800993c <__ieee754_pow+0x25c>)
 800987e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009882:	429a      	cmp	r2, r3
 8009884:	d123      	bne.n	80098ce <__ieee754_pow+0x1ee>
 8009886:	f1b9 0f00 	cmp.w	r9, #0
 800988a:	da05      	bge.n	8009898 <__ieee754_pow+0x1b8>
 800988c:	4602      	mov	r2, r0
 800988e:	460b      	mov	r3, r1
 8009890:	2000      	movs	r0, #0
 8009892:	492a      	ldr	r1, [pc, #168]	; (800993c <__ieee754_pow+0x25c>)
 8009894:	f7f6 ff86 	bl	80007a4 <__aeabi_ddiv>
 8009898:	2d00      	cmp	r5, #0
 800989a:	f6bf af40 	bge.w	800971e <__ieee754_pow+0x3e>
 800989e:	9b04      	ldr	r3, [sp, #16]
 80098a0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80098a4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80098a8:	4323      	orrs	r3, r4
 80098aa:	d108      	bne.n	80098be <__ieee754_pow+0x1de>
 80098ac:	4602      	mov	r2, r0
 80098ae:	460b      	mov	r3, r1
 80098b0:	4610      	mov	r0, r2
 80098b2:	4619      	mov	r1, r3
 80098b4:	f7f6 fc94 	bl	80001e0 <__aeabi_dsub>
 80098b8:	4602      	mov	r2, r0
 80098ba:	460b      	mov	r3, r1
 80098bc:	e78f      	b.n	80097de <__ieee754_pow+0xfe>
 80098be:	9b04      	ldr	r3, [sp, #16]
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	f47f af2c 	bne.w	800971e <__ieee754_pow+0x3e>
 80098c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098ca:	4619      	mov	r1, r3
 80098cc:	e727      	b.n	800971e <__ieee754_pow+0x3e>
 80098ce:	0feb      	lsrs	r3, r5, #31
 80098d0:	3b01      	subs	r3, #1
 80098d2:	9306      	str	r3, [sp, #24]
 80098d4:	9a06      	ldr	r2, [sp, #24]
 80098d6:	9b04      	ldr	r3, [sp, #16]
 80098d8:	4313      	orrs	r3, r2
 80098da:	d102      	bne.n	80098e2 <__ieee754_pow+0x202>
 80098dc:	4632      	mov	r2, r6
 80098de:	463b      	mov	r3, r7
 80098e0:	e7e6      	b.n	80098b0 <__ieee754_pow+0x1d0>
 80098e2:	4b19      	ldr	r3, [pc, #100]	; (8009948 <__ieee754_pow+0x268>)
 80098e4:	4598      	cmp	r8, r3
 80098e6:	f340 80fb 	ble.w	8009ae0 <__ieee754_pow+0x400>
 80098ea:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80098ee:	4598      	cmp	r8, r3
 80098f0:	4b13      	ldr	r3, [pc, #76]	; (8009940 <__ieee754_pow+0x260>)
 80098f2:	dd0c      	ble.n	800990e <__ieee754_pow+0x22e>
 80098f4:	429c      	cmp	r4, r3
 80098f6:	dc0f      	bgt.n	8009918 <__ieee754_pow+0x238>
 80098f8:	f1b9 0f00 	cmp.w	r9, #0
 80098fc:	da0f      	bge.n	800991e <__ieee754_pow+0x23e>
 80098fe:	2000      	movs	r0, #0
 8009900:	b009      	add	sp, #36	; 0x24
 8009902:	ecbd 8b06 	vpop	{d8-d10}
 8009906:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800990a:	f002 b888 	b.w	800ba1e <__math_oflow>
 800990e:	429c      	cmp	r4, r3
 8009910:	dbf2      	blt.n	80098f8 <__ieee754_pow+0x218>
 8009912:	4b0a      	ldr	r3, [pc, #40]	; (800993c <__ieee754_pow+0x25c>)
 8009914:	429c      	cmp	r4, r3
 8009916:	dd19      	ble.n	800994c <__ieee754_pow+0x26c>
 8009918:	f1b9 0f00 	cmp.w	r9, #0
 800991c:	dcef      	bgt.n	80098fe <__ieee754_pow+0x21e>
 800991e:	2000      	movs	r0, #0
 8009920:	b009      	add	sp, #36	; 0x24
 8009922:	ecbd 8b06 	vpop	{d8-d10}
 8009926:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800992a:	f002 b86f 	b.w	800ba0c <__math_uflow>
 800992e:	bf00      	nop
 8009930:	fff00000 	.word	0xfff00000
 8009934:	7ff00000 	.word	0x7ff00000
 8009938:	433fffff 	.word	0x433fffff
 800993c:	3ff00000 	.word	0x3ff00000
 8009940:	3fefffff 	.word	0x3fefffff
 8009944:	3fe00000 	.word	0x3fe00000
 8009948:	41e00000 	.word	0x41e00000
 800994c:	4b60      	ldr	r3, [pc, #384]	; (8009ad0 <__ieee754_pow+0x3f0>)
 800994e:	2200      	movs	r2, #0
 8009950:	f7f6 fc46 	bl	80001e0 <__aeabi_dsub>
 8009954:	a354      	add	r3, pc, #336	; (adr r3, 8009aa8 <__ieee754_pow+0x3c8>)
 8009956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995a:	4604      	mov	r4, r0
 800995c:	460d      	mov	r5, r1
 800995e:	f7f6 fdf7 	bl	8000550 <__aeabi_dmul>
 8009962:	a353      	add	r3, pc, #332	; (adr r3, 8009ab0 <__ieee754_pow+0x3d0>)
 8009964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009968:	4606      	mov	r6, r0
 800996a:	460f      	mov	r7, r1
 800996c:	4620      	mov	r0, r4
 800996e:	4629      	mov	r1, r5
 8009970:	f7f6 fdee 	bl	8000550 <__aeabi_dmul>
 8009974:	4b57      	ldr	r3, [pc, #348]	; (8009ad4 <__ieee754_pow+0x3f4>)
 8009976:	4682      	mov	sl, r0
 8009978:	468b      	mov	fp, r1
 800997a:	2200      	movs	r2, #0
 800997c:	4620      	mov	r0, r4
 800997e:	4629      	mov	r1, r5
 8009980:	f7f6 fde6 	bl	8000550 <__aeabi_dmul>
 8009984:	4602      	mov	r2, r0
 8009986:	460b      	mov	r3, r1
 8009988:	a14b      	add	r1, pc, #300	; (adr r1, 8009ab8 <__ieee754_pow+0x3d8>)
 800998a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800998e:	f7f6 fc27 	bl	80001e0 <__aeabi_dsub>
 8009992:	4622      	mov	r2, r4
 8009994:	462b      	mov	r3, r5
 8009996:	f7f6 fddb 	bl	8000550 <__aeabi_dmul>
 800999a:	4602      	mov	r2, r0
 800999c:	460b      	mov	r3, r1
 800999e:	2000      	movs	r0, #0
 80099a0:	494d      	ldr	r1, [pc, #308]	; (8009ad8 <__ieee754_pow+0x3f8>)
 80099a2:	f7f6 fc1d 	bl	80001e0 <__aeabi_dsub>
 80099a6:	4622      	mov	r2, r4
 80099a8:	4680      	mov	r8, r0
 80099aa:	4689      	mov	r9, r1
 80099ac:	462b      	mov	r3, r5
 80099ae:	4620      	mov	r0, r4
 80099b0:	4629      	mov	r1, r5
 80099b2:	f7f6 fdcd 	bl	8000550 <__aeabi_dmul>
 80099b6:	4602      	mov	r2, r0
 80099b8:	460b      	mov	r3, r1
 80099ba:	4640      	mov	r0, r8
 80099bc:	4649      	mov	r1, r9
 80099be:	f7f6 fdc7 	bl	8000550 <__aeabi_dmul>
 80099c2:	a33f      	add	r3, pc, #252	; (adr r3, 8009ac0 <__ieee754_pow+0x3e0>)
 80099c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c8:	f7f6 fdc2 	bl	8000550 <__aeabi_dmul>
 80099cc:	4602      	mov	r2, r0
 80099ce:	460b      	mov	r3, r1
 80099d0:	4650      	mov	r0, sl
 80099d2:	4659      	mov	r1, fp
 80099d4:	f7f6 fc04 	bl	80001e0 <__aeabi_dsub>
 80099d8:	4602      	mov	r2, r0
 80099da:	460b      	mov	r3, r1
 80099dc:	4680      	mov	r8, r0
 80099de:	4689      	mov	r9, r1
 80099e0:	4630      	mov	r0, r6
 80099e2:	4639      	mov	r1, r7
 80099e4:	f7f6 fbfe 	bl	80001e4 <__adddf3>
 80099e8:	2000      	movs	r0, #0
 80099ea:	4632      	mov	r2, r6
 80099ec:	463b      	mov	r3, r7
 80099ee:	4604      	mov	r4, r0
 80099f0:	460d      	mov	r5, r1
 80099f2:	f7f6 fbf5 	bl	80001e0 <__aeabi_dsub>
 80099f6:	4602      	mov	r2, r0
 80099f8:	460b      	mov	r3, r1
 80099fa:	4640      	mov	r0, r8
 80099fc:	4649      	mov	r1, r9
 80099fe:	f7f6 fbef 	bl	80001e0 <__aeabi_dsub>
 8009a02:	9b04      	ldr	r3, [sp, #16]
 8009a04:	9a06      	ldr	r2, [sp, #24]
 8009a06:	3b01      	subs	r3, #1
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	4682      	mov	sl, r0
 8009a0c:	468b      	mov	fp, r1
 8009a0e:	f040 81e7 	bne.w	8009de0 <__ieee754_pow+0x700>
 8009a12:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009ac8 <__ieee754_pow+0x3e8>
 8009a16:	eeb0 8a47 	vmov.f32	s16, s14
 8009a1a:	eef0 8a67 	vmov.f32	s17, s15
 8009a1e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009a22:	2600      	movs	r6, #0
 8009a24:	4632      	mov	r2, r6
 8009a26:	463b      	mov	r3, r7
 8009a28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a2c:	f7f6 fbd8 	bl	80001e0 <__aeabi_dsub>
 8009a30:	4622      	mov	r2, r4
 8009a32:	462b      	mov	r3, r5
 8009a34:	f7f6 fd8c 	bl	8000550 <__aeabi_dmul>
 8009a38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a3c:	4680      	mov	r8, r0
 8009a3e:	4689      	mov	r9, r1
 8009a40:	4650      	mov	r0, sl
 8009a42:	4659      	mov	r1, fp
 8009a44:	f7f6 fd84 	bl	8000550 <__aeabi_dmul>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	4640      	mov	r0, r8
 8009a4e:	4649      	mov	r1, r9
 8009a50:	f7f6 fbc8 	bl	80001e4 <__adddf3>
 8009a54:	4632      	mov	r2, r6
 8009a56:	463b      	mov	r3, r7
 8009a58:	4680      	mov	r8, r0
 8009a5a:	4689      	mov	r9, r1
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	4629      	mov	r1, r5
 8009a60:	f7f6 fd76 	bl	8000550 <__aeabi_dmul>
 8009a64:	460b      	mov	r3, r1
 8009a66:	4604      	mov	r4, r0
 8009a68:	460d      	mov	r5, r1
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	4649      	mov	r1, r9
 8009a6e:	4640      	mov	r0, r8
 8009a70:	f7f6 fbb8 	bl	80001e4 <__adddf3>
 8009a74:	4b19      	ldr	r3, [pc, #100]	; (8009adc <__ieee754_pow+0x3fc>)
 8009a76:	4299      	cmp	r1, r3
 8009a78:	ec45 4b19 	vmov	d9, r4, r5
 8009a7c:	4606      	mov	r6, r0
 8009a7e:	460f      	mov	r7, r1
 8009a80:	468b      	mov	fp, r1
 8009a82:	f340 82f1 	ble.w	800a068 <__ieee754_pow+0x988>
 8009a86:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009a8a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009a8e:	4303      	orrs	r3, r0
 8009a90:	f000 81e4 	beq.w	8009e5c <__ieee754_pow+0x77c>
 8009a94:	ec51 0b18 	vmov	r0, r1, d8
 8009a98:	2200      	movs	r2, #0
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	f7f6 ffca 	bl	8000a34 <__aeabi_dcmplt>
 8009aa0:	3800      	subs	r0, #0
 8009aa2:	bf18      	it	ne
 8009aa4:	2001      	movne	r0, #1
 8009aa6:	e72b      	b.n	8009900 <__ieee754_pow+0x220>
 8009aa8:	60000000 	.word	0x60000000
 8009aac:	3ff71547 	.word	0x3ff71547
 8009ab0:	f85ddf44 	.word	0xf85ddf44
 8009ab4:	3e54ae0b 	.word	0x3e54ae0b
 8009ab8:	55555555 	.word	0x55555555
 8009abc:	3fd55555 	.word	0x3fd55555
 8009ac0:	652b82fe 	.word	0x652b82fe
 8009ac4:	3ff71547 	.word	0x3ff71547
 8009ac8:	00000000 	.word	0x00000000
 8009acc:	bff00000 	.word	0xbff00000
 8009ad0:	3ff00000 	.word	0x3ff00000
 8009ad4:	3fd00000 	.word	0x3fd00000
 8009ad8:	3fe00000 	.word	0x3fe00000
 8009adc:	408fffff 	.word	0x408fffff
 8009ae0:	4bd5      	ldr	r3, [pc, #852]	; (8009e38 <__ieee754_pow+0x758>)
 8009ae2:	402b      	ands	r3, r5
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	b92b      	cbnz	r3, 8009af4 <__ieee754_pow+0x414>
 8009ae8:	4bd4      	ldr	r3, [pc, #848]	; (8009e3c <__ieee754_pow+0x75c>)
 8009aea:	f7f6 fd31 	bl	8000550 <__aeabi_dmul>
 8009aee:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009af2:	460c      	mov	r4, r1
 8009af4:	1523      	asrs	r3, r4, #20
 8009af6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009afa:	4413      	add	r3, r2
 8009afc:	9305      	str	r3, [sp, #20]
 8009afe:	4bd0      	ldr	r3, [pc, #832]	; (8009e40 <__ieee754_pow+0x760>)
 8009b00:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009b04:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009b08:	429c      	cmp	r4, r3
 8009b0a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009b0e:	dd08      	ble.n	8009b22 <__ieee754_pow+0x442>
 8009b10:	4bcc      	ldr	r3, [pc, #816]	; (8009e44 <__ieee754_pow+0x764>)
 8009b12:	429c      	cmp	r4, r3
 8009b14:	f340 8162 	ble.w	8009ddc <__ieee754_pow+0x6fc>
 8009b18:	9b05      	ldr	r3, [sp, #20]
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	9305      	str	r3, [sp, #20]
 8009b1e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009b22:	2400      	movs	r4, #0
 8009b24:	00e3      	lsls	r3, r4, #3
 8009b26:	9307      	str	r3, [sp, #28]
 8009b28:	4bc7      	ldr	r3, [pc, #796]	; (8009e48 <__ieee754_pow+0x768>)
 8009b2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009b2e:	ed93 7b00 	vldr	d7, [r3]
 8009b32:	4629      	mov	r1, r5
 8009b34:	ec53 2b17 	vmov	r2, r3, d7
 8009b38:	eeb0 9a47 	vmov.f32	s18, s14
 8009b3c:	eef0 9a67 	vmov.f32	s19, s15
 8009b40:	4682      	mov	sl, r0
 8009b42:	f7f6 fb4d 	bl	80001e0 <__aeabi_dsub>
 8009b46:	4652      	mov	r2, sl
 8009b48:	4606      	mov	r6, r0
 8009b4a:	460f      	mov	r7, r1
 8009b4c:	462b      	mov	r3, r5
 8009b4e:	ec51 0b19 	vmov	r0, r1, d9
 8009b52:	f7f6 fb47 	bl	80001e4 <__adddf3>
 8009b56:	4602      	mov	r2, r0
 8009b58:	460b      	mov	r3, r1
 8009b5a:	2000      	movs	r0, #0
 8009b5c:	49bb      	ldr	r1, [pc, #748]	; (8009e4c <__ieee754_pow+0x76c>)
 8009b5e:	f7f6 fe21 	bl	80007a4 <__aeabi_ddiv>
 8009b62:	ec41 0b1a 	vmov	d10, r0, r1
 8009b66:	4602      	mov	r2, r0
 8009b68:	460b      	mov	r3, r1
 8009b6a:	4630      	mov	r0, r6
 8009b6c:	4639      	mov	r1, r7
 8009b6e:	f7f6 fcef 	bl	8000550 <__aeabi_dmul>
 8009b72:	2300      	movs	r3, #0
 8009b74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b78:	9302      	str	r3, [sp, #8]
 8009b7a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009b7e:	46ab      	mov	fp, r5
 8009b80:	106d      	asrs	r5, r5, #1
 8009b82:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009b86:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009b8a:	ec41 0b18 	vmov	d8, r0, r1
 8009b8e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009b92:	2200      	movs	r2, #0
 8009b94:	4640      	mov	r0, r8
 8009b96:	4649      	mov	r1, r9
 8009b98:	4614      	mov	r4, r2
 8009b9a:	461d      	mov	r5, r3
 8009b9c:	f7f6 fcd8 	bl	8000550 <__aeabi_dmul>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	4639      	mov	r1, r7
 8009ba8:	f7f6 fb1a 	bl	80001e0 <__aeabi_dsub>
 8009bac:	ec53 2b19 	vmov	r2, r3, d9
 8009bb0:	4606      	mov	r6, r0
 8009bb2:	460f      	mov	r7, r1
 8009bb4:	4620      	mov	r0, r4
 8009bb6:	4629      	mov	r1, r5
 8009bb8:	f7f6 fb12 	bl	80001e0 <__aeabi_dsub>
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	460b      	mov	r3, r1
 8009bc0:	4650      	mov	r0, sl
 8009bc2:	4659      	mov	r1, fp
 8009bc4:	f7f6 fb0c 	bl	80001e0 <__aeabi_dsub>
 8009bc8:	4642      	mov	r2, r8
 8009bca:	464b      	mov	r3, r9
 8009bcc:	f7f6 fcc0 	bl	8000550 <__aeabi_dmul>
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	460b      	mov	r3, r1
 8009bd4:	4630      	mov	r0, r6
 8009bd6:	4639      	mov	r1, r7
 8009bd8:	f7f6 fb02 	bl	80001e0 <__aeabi_dsub>
 8009bdc:	ec53 2b1a 	vmov	r2, r3, d10
 8009be0:	f7f6 fcb6 	bl	8000550 <__aeabi_dmul>
 8009be4:	ec53 2b18 	vmov	r2, r3, d8
 8009be8:	ec41 0b19 	vmov	d9, r0, r1
 8009bec:	ec51 0b18 	vmov	r0, r1, d8
 8009bf0:	f7f6 fcae 	bl	8000550 <__aeabi_dmul>
 8009bf4:	a37c      	add	r3, pc, #496	; (adr r3, 8009de8 <__ieee754_pow+0x708>)
 8009bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfa:	4604      	mov	r4, r0
 8009bfc:	460d      	mov	r5, r1
 8009bfe:	f7f6 fca7 	bl	8000550 <__aeabi_dmul>
 8009c02:	a37b      	add	r3, pc, #492	; (adr r3, 8009df0 <__ieee754_pow+0x710>)
 8009c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c08:	f7f6 faec 	bl	80001e4 <__adddf3>
 8009c0c:	4622      	mov	r2, r4
 8009c0e:	462b      	mov	r3, r5
 8009c10:	f7f6 fc9e 	bl	8000550 <__aeabi_dmul>
 8009c14:	a378      	add	r3, pc, #480	; (adr r3, 8009df8 <__ieee754_pow+0x718>)
 8009c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1a:	f7f6 fae3 	bl	80001e4 <__adddf3>
 8009c1e:	4622      	mov	r2, r4
 8009c20:	462b      	mov	r3, r5
 8009c22:	f7f6 fc95 	bl	8000550 <__aeabi_dmul>
 8009c26:	a376      	add	r3, pc, #472	; (adr r3, 8009e00 <__ieee754_pow+0x720>)
 8009c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2c:	f7f6 fada 	bl	80001e4 <__adddf3>
 8009c30:	4622      	mov	r2, r4
 8009c32:	462b      	mov	r3, r5
 8009c34:	f7f6 fc8c 	bl	8000550 <__aeabi_dmul>
 8009c38:	a373      	add	r3, pc, #460	; (adr r3, 8009e08 <__ieee754_pow+0x728>)
 8009c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3e:	f7f6 fad1 	bl	80001e4 <__adddf3>
 8009c42:	4622      	mov	r2, r4
 8009c44:	462b      	mov	r3, r5
 8009c46:	f7f6 fc83 	bl	8000550 <__aeabi_dmul>
 8009c4a:	a371      	add	r3, pc, #452	; (adr r3, 8009e10 <__ieee754_pow+0x730>)
 8009c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c50:	f7f6 fac8 	bl	80001e4 <__adddf3>
 8009c54:	4622      	mov	r2, r4
 8009c56:	4606      	mov	r6, r0
 8009c58:	460f      	mov	r7, r1
 8009c5a:	462b      	mov	r3, r5
 8009c5c:	4620      	mov	r0, r4
 8009c5e:	4629      	mov	r1, r5
 8009c60:	f7f6 fc76 	bl	8000550 <__aeabi_dmul>
 8009c64:	4602      	mov	r2, r0
 8009c66:	460b      	mov	r3, r1
 8009c68:	4630      	mov	r0, r6
 8009c6a:	4639      	mov	r1, r7
 8009c6c:	f7f6 fc70 	bl	8000550 <__aeabi_dmul>
 8009c70:	4642      	mov	r2, r8
 8009c72:	4604      	mov	r4, r0
 8009c74:	460d      	mov	r5, r1
 8009c76:	464b      	mov	r3, r9
 8009c78:	ec51 0b18 	vmov	r0, r1, d8
 8009c7c:	f7f6 fab2 	bl	80001e4 <__adddf3>
 8009c80:	ec53 2b19 	vmov	r2, r3, d9
 8009c84:	f7f6 fc64 	bl	8000550 <__aeabi_dmul>
 8009c88:	4622      	mov	r2, r4
 8009c8a:	462b      	mov	r3, r5
 8009c8c:	f7f6 faaa 	bl	80001e4 <__adddf3>
 8009c90:	4642      	mov	r2, r8
 8009c92:	4682      	mov	sl, r0
 8009c94:	468b      	mov	fp, r1
 8009c96:	464b      	mov	r3, r9
 8009c98:	4640      	mov	r0, r8
 8009c9a:	4649      	mov	r1, r9
 8009c9c:	f7f6 fc58 	bl	8000550 <__aeabi_dmul>
 8009ca0:	4b6b      	ldr	r3, [pc, #428]	; (8009e50 <__ieee754_pow+0x770>)
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	4606      	mov	r6, r0
 8009ca6:	460f      	mov	r7, r1
 8009ca8:	f7f6 fa9c 	bl	80001e4 <__adddf3>
 8009cac:	4652      	mov	r2, sl
 8009cae:	465b      	mov	r3, fp
 8009cb0:	f7f6 fa98 	bl	80001e4 <__adddf3>
 8009cb4:	2000      	movs	r0, #0
 8009cb6:	4604      	mov	r4, r0
 8009cb8:	460d      	mov	r5, r1
 8009cba:	4602      	mov	r2, r0
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	4640      	mov	r0, r8
 8009cc0:	4649      	mov	r1, r9
 8009cc2:	f7f6 fc45 	bl	8000550 <__aeabi_dmul>
 8009cc6:	4b62      	ldr	r3, [pc, #392]	; (8009e50 <__ieee754_pow+0x770>)
 8009cc8:	4680      	mov	r8, r0
 8009cca:	4689      	mov	r9, r1
 8009ccc:	2200      	movs	r2, #0
 8009cce:	4620      	mov	r0, r4
 8009cd0:	4629      	mov	r1, r5
 8009cd2:	f7f6 fa85 	bl	80001e0 <__aeabi_dsub>
 8009cd6:	4632      	mov	r2, r6
 8009cd8:	463b      	mov	r3, r7
 8009cda:	f7f6 fa81 	bl	80001e0 <__aeabi_dsub>
 8009cde:	4602      	mov	r2, r0
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	4650      	mov	r0, sl
 8009ce4:	4659      	mov	r1, fp
 8009ce6:	f7f6 fa7b 	bl	80001e0 <__aeabi_dsub>
 8009cea:	ec53 2b18 	vmov	r2, r3, d8
 8009cee:	f7f6 fc2f 	bl	8000550 <__aeabi_dmul>
 8009cf2:	4622      	mov	r2, r4
 8009cf4:	4606      	mov	r6, r0
 8009cf6:	460f      	mov	r7, r1
 8009cf8:	462b      	mov	r3, r5
 8009cfa:	ec51 0b19 	vmov	r0, r1, d9
 8009cfe:	f7f6 fc27 	bl	8000550 <__aeabi_dmul>
 8009d02:	4602      	mov	r2, r0
 8009d04:	460b      	mov	r3, r1
 8009d06:	4630      	mov	r0, r6
 8009d08:	4639      	mov	r1, r7
 8009d0a:	f7f6 fa6b 	bl	80001e4 <__adddf3>
 8009d0e:	4606      	mov	r6, r0
 8009d10:	460f      	mov	r7, r1
 8009d12:	4602      	mov	r2, r0
 8009d14:	460b      	mov	r3, r1
 8009d16:	4640      	mov	r0, r8
 8009d18:	4649      	mov	r1, r9
 8009d1a:	f7f6 fa63 	bl	80001e4 <__adddf3>
 8009d1e:	a33e      	add	r3, pc, #248	; (adr r3, 8009e18 <__ieee754_pow+0x738>)
 8009d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d24:	2000      	movs	r0, #0
 8009d26:	4604      	mov	r4, r0
 8009d28:	460d      	mov	r5, r1
 8009d2a:	f7f6 fc11 	bl	8000550 <__aeabi_dmul>
 8009d2e:	4642      	mov	r2, r8
 8009d30:	ec41 0b18 	vmov	d8, r0, r1
 8009d34:	464b      	mov	r3, r9
 8009d36:	4620      	mov	r0, r4
 8009d38:	4629      	mov	r1, r5
 8009d3a:	f7f6 fa51 	bl	80001e0 <__aeabi_dsub>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	460b      	mov	r3, r1
 8009d42:	4630      	mov	r0, r6
 8009d44:	4639      	mov	r1, r7
 8009d46:	f7f6 fa4b 	bl	80001e0 <__aeabi_dsub>
 8009d4a:	a335      	add	r3, pc, #212	; (adr r3, 8009e20 <__ieee754_pow+0x740>)
 8009d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d50:	f7f6 fbfe 	bl	8000550 <__aeabi_dmul>
 8009d54:	a334      	add	r3, pc, #208	; (adr r3, 8009e28 <__ieee754_pow+0x748>)
 8009d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5a:	4606      	mov	r6, r0
 8009d5c:	460f      	mov	r7, r1
 8009d5e:	4620      	mov	r0, r4
 8009d60:	4629      	mov	r1, r5
 8009d62:	f7f6 fbf5 	bl	8000550 <__aeabi_dmul>
 8009d66:	4602      	mov	r2, r0
 8009d68:	460b      	mov	r3, r1
 8009d6a:	4630      	mov	r0, r6
 8009d6c:	4639      	mov	r1, r7
 8009d6e:	f7f6 fa39 	bl	80001e4 <__adddf3>
 8009d72:	9a07      	ldr	r2, [sp, #28]
 8009d74:	4b37      	ldr	r3, [pc, #220]	; (8009e54 <__ieee754_pow+0x774>)
 8009d76:	4413      	add	r3, r2
 8009d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7c:	f7f6 fa32 	bl	80001e4 <__adddf3>
 8009d80:	4682      	mov	sl, r0
 8009d82:	9805      	ldr	r0, [sp, #20]
 8009d84:	468b      	mov	fp, r1
 8009d86:	f7f6 fb79 	bl	800047c <__aeabi_i2d>
 8009d8a:	9a07      	ldr	r2, [sp, #28]
 8009d8c:	4b32      	ldr	r3, [pc, #200]	; (8009e58 <__ieee754_pow+0x778>)
 8009d8e:	4413      	add	r3, r2
 8009d90:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d94:	4606      	mov	r6, r0
 8009d96:	460f      	mov	r7, r1
 8009d98:	4652      	mov	r2, sl
 8009d9a:	465b      	mov	r3, fp
 8009d9c:	ec51 0b18 	vmov	r0, r1, d8
 8009da0:	f7f6 fa20 	bl	80001e4 <__adddf3>
 8009da4:	4642      	mov	r2, r8
 8009da6:	464b      	mov	r3, r9
 8009da8:	f7f6 fa1c 	bl	80001e4 <__adddf3>
 8009dac:	4632      	mov	r2, r6
 8009dae:	463b      	mov	r3, r7
 8009db0:	f7f6 fa18 	bl	80001e4 <__adddf3>
 8009db4:	2000      	movs	r0, #0
 8009db6:	4632      	mov	r2, r6
 8009db8:	463b      	mov	r3, r7
 8009dba:	4604      	mov	r4, r0
 8009dbc:	460d      	mov	r5, r1
 8009dbe:	f7f6 fa0f 	bl	80001e0 <__aeabi_dsub>
 8009dc2:	4642      	mov	r2, r8
 8009dc4:	464b      	mov	r3, r9
 8009dc6:	f7f6 fa0b 	bl	80001e0 <__aeabi_dsub>
 8009dca:	ec53 2b18 	vmov	r2, r3, d8
 8009dce:	f7f6 fa07 	bl	80001e0 <__aeabi_dsub>
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	4650      	mov	r0, sl
 8009dd8:	4659      	mov	r1, fp
 8009dda:	e610      	b.n	80099fe <__ieee754_pow+0x31e>
 8009ddc:	2401      	movs	r4, #1
 8009dde:	e6a1      	b.n	8009b24 <__ieee754_pow+0x444>
 8009de0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009e30 <__ieee754_pow+0x750>
 8009de4:	e617      	b.n	8009a16 <__ieee754_pow+0x336>
 8009de6:	bf00      	nop
 8009de8:	4a454eef 	.word	0x4a454eef
 8009dec:	3fca7e28 	.word	0x3fca7e28
 8009df0:	93c9db65 	.word	0x93c9db65
 8009df4:	3fcd864a 	.word	0x3fcd864a
 8009df8:	a91d4101 	.word	0xa91d4101
 8009dfc:	3fd17460 	.word	0x3fd17460
 8009e00:	518f264d 	.word	0x518f264d
 8009e04:	3fd55555 	.word	0x3fd55555
 8009e08:	db6fabff 	.word	0xdb6fabff
 8009e0c:	3fdb6db6 	.word	0x3fdb6db6
 8009e10:	33333303 	.word	0x33333303
 8009e14:	3fe33333 	.word	0x3fe33333
 8009e18:	e0000000 	.word	0xe0000000
 8009e1c:	3feec709 	.word	0x3feec709
 8009e20:	dc3a03fd 	.word	0xdc3a03fd
 8009e24:	3feec709 	.word	0x3feec709
 8009e28:	145b01f5 	.word	0x145b01f5
 8009e2c:	be3e2fe0 	.word	0xbe3e2fe0
 8009e30:	00000000 	.word	0x00000000
 8009e34:	3ff00000 	.word	0x3ff00000
 8009e38:	7ff00000 	.word	0x7ff00000
 8009e3c:	43400000 	.word	0x43400000
 8009e40:	0003988e 	.word	0x0003988e
 8009e44:	000bb679 	.word	0x000bb679
 8009e48:	0800bf08 	.word	0x0800bf08
 8009e4c:	3ff00000 	.word	0x3ff00000
 8009e50:	40080000 	.word	0x40080000
 8009e54:	0800bf28 	.word	0x0800bf28
 8009e58:	0800bf18 	.word	0x0800bf18
 8009e5c:	a3b5      	add	r3, pc, #724	; (adr r3, 800a134 <__ieee754_pow+0xa54>)
 8009e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e62:	4640      	mov	r0, r8
 8009e64:	4649      	mov	r1, r9
 8009e66:	f7f6 f9bd 	bl	80001e4 <__adddf3>
 8009e6a:	4622      	mov	r2, r4
 8009e6c:	ec41 0b1a 	vmov	d10, r0, r1
 8009e70:	462b      	mov	r3, r5
 8009e72:	4630      	mov	r0, r6
 8009e74:	4639      	mov	r1, r7
 8009e76:	f7f6 f9b3 	bl	80001e0 <__aeabi_dsub>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	ec51 0b1a 	vmov	r0, r1, d10
 8009e82:	f7f6 fdf5 	bl	8000a70 <__aeabi_dcmpgt>
 8009e86:	2800      	cmp	r0, #0
 8009e88:	f47f ae04 	bne.w	8009a94 <__ieee754_pow+0x3b4>
 8009e8c:	4aa4      	ldr	r2, [pc, #656]	; (800a120 <__ieee754_pow+0xa40>)
 8009e8e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009e92:	4293      	cmp	r3, r2
 8009e94:	f340 8108 	ble.w	800a0a8 <__ieee754_pow+0x9c8>
 8009e98:	151b      	asrs	r3, r3, #20
 8009e9a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009e9e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009ea2:	fa4a f303 	asr.w	r3, sl, r3
 8009ea6:	445b      	add	r3, fp
 8009ea8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009eac:	4e9d      	ldr	r6, [pc, #628]	; (800a124 <__ieee754_pow+0xa44>)
 8009eae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009eb2:	4116      	asrs	r6, r2
 8009eb4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009eb8:	2000      	movs	r0, #0
 8009eba:	ea23 0106 	bic.w	r1, r3, r6
 8009ebe:	f1c2 0214 	rsb	r2, r2, #20
 8009ec2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009ec6:	fa4a fa02 	asr.w	sl, sl, r2
 8009eca:	f1bb 0f00 	cmp.w	fp, #0
 8009ece:	4602      	mov	r2, r0
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	4620      	mov	r0, r4
 8009ed4:	4629      	mov	r1, r5
 8009ed6:	bfb8      	it	lt
 8009ed8:	f1ca 0a00 	rsblt	sl, sl, #0
 8009edc:	f7f6 f980 	bl	80001e0 <__aeabi_dsub>
 8009ee0:	ec41 0b19 	vmov	d9, r0, r1
 8009ee4:	4642      	mov	r2, r8
 8009ee6:	464b      	mov	r3, r9
 8009ee8:	ec51 0b19 	vmov	r0, r1, d9
 8009eec:	f7f6 f97a 	bl	80001e4 <__adddf3>
 8009ef0:	a37b      	add	r3, pc, #492	; (adr r3, 800a0e0 <__ieee754_pow+0xa00>)
 8009ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef6:	2000      	movs	r0, #0
 8009ef8:	4604      	mov	r4, r0
 8009efa:	460d      	mov	r5, r1
 8009efc:	f7f6 fb28 	bl	8000550 <__aeabi_dmul>
 8009f00:	ec53 2b19 	vmov	r2, r3, d9
 8009f04:	4606      	mov	r6, r0
 8009f06:	460f      	mov	r7, r1
 8009f08:	4620      	mov	r0, r4
 8009f0a:	4629      	mov	r1, r5
 8009f0c:	f7f6 f968 	bl	80001e0 <__aeabi_dsub>
 8009f10:	4602      	mov	r2, r0
 8009f12:	460b      	mov	r3, r1
 8009f14:	4640      	mov	r0, r8
 8009f16:	4649      	mov	r1, r9
 8009f18:	f7f6 f962 	bl	80001e0 <__aeabi_dsub>
 8009f1c:	a372      	add	r3, pc, #456	; (adr r3, 800a0e8 <__ieee754_pow+0xa08>)
 8009f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f22:	f7f6 fb15 	bl	8000550 <__aeabi_dmul>
 8009f26:	a372      	add	r3, pc, #456	; (adr r3, 800a0f0 <__ieee754_pow+0xa10>)
 8009f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2c:	4680      	mov	r8, r0
 8009f2e:	4689      	mov	r9, r1
 8009f30:	4620      	mov	r0, r4
 8009f32:	4629      	mov	r1, r5
 8009f34:	f7f6 fb0c 	bl	8000550 <__aeabi_dmul>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	460b      	mov	r3, r1
 8009f3c:	4640      	mov	r0, r8
 8009f3e:	4649      	mov	r1, r9
 8009f40:	f7f6 f950 	bl	80001e4 <__adddf3>
 8009f44:	4604      	mov	r4, r0
 8009f46:	460d      	mov	r5, r1
 8009f48:	4602      	mov	r2, r0
 8009f4a:	460b      	mov	r3, r1
 8009f4c:	4630      	mov	r0, r6
 8009f4e:	4639      	mov	r1, r7
 8009f50:	f7f6 f948 	bl	80001e4 <__adddf3>
 8009f54:	4632      	mov	r2, r6
 8009f56:	463b      	mov	r3, r7
 8009f58:	4680      	mov	r8, r0
 8009f5a:	4689      	mov	r9, r1
 8009f5c:	f7f6 f940 	bl	80001e0 <__aeabi_dsub>
 8009f60:	4602      	mov	r2, r0
 8009f62:	460b      	mov	r3, r1
 8009f64:	4620      	mov	r0, r4
 8009f66:	4629      	mov	r1, r5
 8009f68:	f7f6 f93a 	bl	80001e0 <__aeabi_dsub>
 8009f6c:	4642      	mov	r2, r8
 8009f6e:	4606      	mov	r6, r0
 8009f70:	460f      	mov	r7, r1
 8009f72:	464b      	mov	r3, r9
 8009f74:	4640      	mov	r0, r8
 8009f76:	4649      	mov	r1, r9
 8009f78:	f7f6 faea 	bl	8000550 <__aeabi_dmul>
 8009f7c:	a35e      	add	r3, pc, #376	; (adr r3, 800a0f8 <__ieee754_pow+0xa18>)
 8009f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f82:	4604      	mov	r4, r0
 8009f84:	460d      	mov	r5, r1
 8009f86:	f7f6 fae3 	bl	8000550 <__aeabi_dmul>
 8009f8a:	a35d      	add	r3, pc, #372	; (adr r3, 800a100 <__ieee754_pow+0xa20>)
 8009f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f90:	f7f6 f926 	bl	80001e0 <__aeabi_dsub>
 8009f94:	4622      	mov	r2, r4
 8009f96:	462b      	mov	r3, r5
 8009f98:	f7f6 fada 	bl	8000550 <__aeabi_dmul>
 8009f9c:	a35a      	add	r3, pc, #360	; (adr r3, 800a108 <__ieee754_pow+0xa28>)
 8009f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa2:	f7f6 f91f 	bl	80001e4 <__adddf3>
 8009fa6:	4622      	mov	r2, r4
 8009fa8:	462b      	mov	r3, r5
 8009faa:	f7f6 fad1 	bl	8000550 <__aeabi_dmul>
 8009fae:	a358      	add	r3, pc, #352	; (adr r3, 800a110 <__ieee754_pow+0xa30>)
 8009fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb4:	f7f6 f914 	bl	80001e0 <__aeabi_dsub>
 8009fb8:	4622      	mov	r2, r4
 8009fba:	462b      	mov	r3, r5
 8009fbc:	f7f6 fac8 	bl	8000550 <__aeabi_dmul>
 8009fc0:	a355      	add	r3, pc, #340	; (adr r3, 800a118 <__ieee754_pow+0xa38>)
 8009fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc6:	f7f6 f90d 	bl	80001e4 <__adddf3>
 8009fca:	4622      	mov	r2, r4
 8009fcc:	462b      	mov	r3, r5
 8009fce:	f7f6 fabf 	bl	8000550 <__aeabi_dmul>
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	4640      	mov	r0, r8
 8009fd8:	4649      	mov	r1, r9
 8009fda:	f7f6 f901 	bl	80001e0 <__aeabi_dsub>
 8009fde:	4604      	mov	r4, r0
 8009fe0:	460d      	mov	r5, r1
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	4640      	mov	r0, r8
 8009fe8:	4649      	mov	r1, r9
 8009fea:	f7f6 fab1 	bl	8000550 <__aeabi_dmul>
 8009fee:	2200      	movs	r2, #0
 8009ff0:	ec41 0b19 	vmov	d9, r0, r1
 8009ff4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	4629      	mov	r1, r5
 8009ffc:	f7f6 f8f0 	bl	80001e0 <__aeabi_dsub>
 800a000:	4602      	mov	r2, r0
 800a002:	460b      	mov	r3, r1
 800a004:	ec51 0b19 	vmov	r0, r1, d9
 800a008:	f7f6 fbcc 	bl	80007a4 <__aeabi_ddiv>
 800a00c:	4632      	mov	r2, r6
 800a00e:	4604      	mov	r4, r0
 800a010:	460d      	mov	r5, r1
 800a012:	463b      	mov	r3, r7
 800a014:	4640      	mov	r0, r8
 800a016:	4649      	mov	r1, r9
 800a018:	f7f6 fa9a 	bl	8000550 <__aeabi_dmul>
 800a01c:	4632      	mov	r2, r6
 800a01e:	463b      	mov	r3, r7
 800a020:	f7f6 f8e0 	bl	80001e4 <__adddf3>
 800a024:	4602      	mov	r2, r0
 800a026:	460b      	mov	r3, r1
 800a028:	4620      	mov	r0, r4
 800a02a:	4629      	mov	r1, r5
 800a02c:	f7f6 f8d8 	bl	80001e0 <__aeabi_dsub>
 800a030:	4642      	mov	r2, r8
 800a032:	464b      	mov	r3, r9
 800a034:	f7f6 f8d4 	bl	80001e0 <__aeabi_dsub>
 800a038:	460b      	mov	r3, r1
 800a03a:	4602      	mov	r2, r0
 800a03c:	493a      	ldr	r1, [pc, #232]	; (800a128 <__ieee754_pow+0xa48>)
 800a03e:	2000      	movs	r0, #0
 800a040:	f7f6 f8ce 	bl	80001e0 <__aeabi_dsub>
 800a044:	ec41 0b10 	vmov	d0, r0, r1
 800a048:	ee10 3a90 	vmov	r3, s1
 800a04c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a050:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a054:	da2b      	bge.n	800a0ae <__ieee754_pow+0x9ce>
 800a056:	4650      	mov	r0, sl
 800a058:	f001 fcfe 	bl	800ba58 <scalbn>
 800a05c:	ec51 0b10 	vmov	r0, r1, d0
 800a060:	ec53 2b18 	vmov	r2, r3, d8
 800a064:	f7ff bbed 	b.w	8009842 <__ieee754_pow+0x162>
 800a068:	4b30      	ldr	r3, [pc, #192]	; (800a12c <__ieee754_pow+0xa4c>)
 800a06a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a06e:	429e      	cmp	r6, r3
 800a070:	f77f af0c 	ble.w	8009e8c <__ieee754_pow+0x7ac>
 800a074:	4b2e      	ldr	r3, [pc, #184]	; (800a130 <__ieee754_pow+0xa50>)
 800a076:	440b      	add	r3, r1
 800a078:	4303      	orrs	r3, r0
 800a07a:	d009      	beq.n	800a090 <__ieee754_pow+0x9b0>
 800a07c:	ec51 0b18 	vmov	r0, r1, d8
 800a080:	2200      	movs	r2, #0
 800a082:	2300      	movs	r3, #0
 800a084:	f7f6 fcd6 	bl	8000a34 <__aeabi_dcmplt>
 800a088:	3800      	subs	r0, #0
 800a08a:	bf18      	it	ne
 800a08c:	2001      	movne	r0, #1
 800a08e:	e447      	b.n	8009920 <__ieee754_pow+0x240>
 800a090:	4622      	mov	r2, r4
 800a092:	462b      	mov	r3, r5
 800a094:	f7f6 f8a4 	bl	80001e0 <__aeabi_dsub>
 800a098:	4642      	mov	r2, r8
 800a09a:	464b      	mov	r3, r9
 800a09c:	f7f6 fcde 	bl	8000a5c <__aeabi_dcmpge>
 800a0a0:	2800      	cmp	r0, #0
 800a0a2:	f43f aef3 	beq.w	8009e8c <__ieee754_pow+0x7ac>
 800a0a6:	e7e9      	b.n	800a07c <__ieee754_pow+0x99c>
 800a0a8:	f04f 0a00 	mov.w	sl, #0
 800a0ac:	e71a      	b.n	8009ee4 <__ieee754_pow+0x804>
 800a0ae:	ec51 0b10 	vmov	r0, r1, d0
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	e7d4      	b.n	800a060 <__ieee754_pow+0x980>
 800a0b6:	491c      	ldr	r1, [pc, #112]	; (800a128 <__ieee754_pow+0xa48>)
 800a0b8:	2000      	movs	r0, #0
 800a0ba:	f7ff bb30 	b.w	800971e <__ieee754_pow+0x3e>
 800a0be:	2000      	movs	r0, #0
 800a0c0:	2100      	movs	r1, #0
 800a0c2:	f7ff bb2c 	b.w	800971e <__ieee754_pow+0x3e>
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	4639      	mov	r1, r7
 800a0ca:	f7ff bb28 	b.w	800971e <__ieee754_pow+0x3e>
 800a0ce:	9204      	str	r2, [sp, #16]
 800a0d0:	f7ff bb7a 	b.w	80097c8 <__ieee754_pow+0xe8>
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	f7ff bb64 	b.w	80097a2 <__ieee754_pow+0xc2>
 800a0da:	bf00      	nop
 800a0dc:	f3af 8000 	nop.w
 800a0e0:	00000000 	.word	0x00000000
 800a0e4:	3fe62e43 	.word	0x3fe62e43
 800a0e8:	fefa39ef 	.word	0xfefa39ef
 800a0ec:	3fe62e42 	.word	0x3fe62e42
 800a0f0:	0ca86c39 	.word	0x0ca86c39
 800a0f4:	be205c61 	.word	0xbe205c61
 800a0f8:	72bea4d0 	.word	0x72bea4d0
 800a0fc:	3e663769 	.word	0x3e663769
 800a100:	c5d26bf1 	.word	0xc5d26bf1
 800a104:	3ebbbd41 	.word	0x3ebbbd41
 800a108:	af25de2c 	.word	0xaf25de2c
 800a10c:	3f11566a 	.word	0x3f11566a
 800a110:	16bebd93 	.word	0x16bebd93
 800a114:	3f66c16c 	.word	0x3f66c16c
 800a118:	5555553e 	.word	0x5555553e
 800a11c:	3fc55555 	.word	0x3fc55555
 800a120:	3fe00000 	.word	0x3fe00000
 800a124:	000fffff 	.word	0x000fffff
 800a128:	3ff00000 	.word	0x3ff00000
 800a12c:	4090cbff 	.word	0x4090cbff
 800a130:	3f6f3400 	.word	0x3f6f3400
 800a134:	652b82fe 	.word	0x652b82fe
 800a138:	3c971547 	.word	0x3c971547
 800a13c:	00000000 	.word	0x00000000

0800a140 <__ieee754_rem_pio2>:
 800a140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a144:	ed2d 8b02 	vpush	{d8}
 800a148:	ec55 4b10 	vmov	r4, r5, d0
 800a14c:	4bca      	ldr	r3, [pc, #808]	; (800a478 <__ieee754_rem_pio2+0x338>)
 800a14e:	b08b      	sub	sp, #44	; 0x2c
 800a150:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a154:	4598      	cmp	r8, r3
 800a156:	4682      	mov	sl, r0
 800a158:	9502      	str	r5, [sp, #8]
 800a15a:	dc08      	bgt.n	800a16e <__ieee754_rem_pio2+0x2e>
 800a15c:	2200      	movs	r2, #0
 800a15e:	2300      	movs	r3, #0
 800a160:	ed80 0b00 	vstr	d0, [r0]
 800a164:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a168:	f04f 0b00 	mov.w	fp, #0
 800a16c:	e028      	b.n	800a1c0 <__ieee754_rem_pio2+0x80>
 800a16e:	4bc3      	ldr	r3, [pc, #780]	; (800a47c <__ieee754_rem_pio2+0x33c>)
 800a170:	4598      	cmp	r8, r3
 800a172:	dc78      	bgt.n	800a266 <__ieee754_rem_pio2+0x126>
 800a174:	9b02      	ldr	r3, [sp, #8]
 800a176:	4ec2      	ldr	r6, [pc, #776]	; (800a480 <__ieee754_rem_pio2+0x340>)
 800a178:	2b00      	cmp	r3, #0
 800a17a:	ee10 0a10 	vmov	r0, s0
 800a17e:	a3b0      	add	r3, pc, #704	; (adr r3, 800a440 <__ieee754_rem_pio2+0x300>)
 800a180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a184:	4629      	mov	r1, r5
 800a186:	dd39      	ble.n	800a1fc <__ieee754_rem_pio2+0xbc>
 800a188:	f7f6 f82a 	bl	80001e0 <__aeabi_dsub>
 800a18c:	45b0      	cmp	r8, r6
 800a18e:	4604      	mov	r4, r0
 800a190:	460d      	mov	r5, r1
 800a192:	d01b      	beq.n	800a1cc <__ieee754_rem_pio2+0x8c>
 800a194:	a3ac      	add	r3, pc, #688	; (adr r3, 800a448 <__ieee754_rem_pio2+0x308>)
 800a196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19a:	f7f6 f821 	bl	80001e0 <__aeabi_dsub>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	e9ca 2300 	strd	r2, r3, [sl]
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	4629      	mov	r1, r5
 800a1aa:	f7f6 f819 	bl	80001e0 <__aeabi_dsub>
 800a1ae:	a3a6      	add	r3, pc, #664	; (adr r3, 800a448 <__ieee754_rem_pio2+0x308>)
 800a1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b4:	f7f6 f814 	bl	80001e0 <__aeabi_dsub>
 800a1b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a1bc:	f04f 0b01 	mov.w	fp, #1
 800a1c0:	4658      	mov	r0, fp
 800a1c2:	b00b      	add	sp, #44	; 0x2c
 800a1c4:	ecbd 8b02 	vpop	{d8}
 800a1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1cc:	a3a0      	add	r3, pc, #640	; (adr r3, 800a450 <__ieee754_rem_pio2+0x310>)
 800a1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d2:	f7f6 f805 	bl	80001e0 <__aeabi_dsub>
 800a1d6:	a3a0      	add	r3, pc, #640	; (adr r3, 800a458 <__ieee754_rem_pio2+0x318>)
 800a1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1dc:	4604      	mov	r4, r0
 800a1de:	460d      	mov	r5, r1
 800a1e0:	f7f5 fffe 	bl	80001e0 <__aeabi_dsub>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	e9ca 2300 	strd	r2, r3, [sl]
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	4629      	mov	r1, r5
 800a1f0:	f7f5 fff6 	bl	80001e0 <__aeabi_dsub>
 800a1f4:	a398      	add	r3, pc, #608	; (adr r3, 800a458 <__ieee754_rem_pio2+0x318>)
 800a1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fa:	e7db      	b.n	800a1b4 <__ieee754_rem_pio2+0x74>
 800a1fc:	f7f5 fff2 	bl	80001e4 <__adddf3>
 800a200:	45b0      	cmp	r8, r6
 800a202:	4604      	mov	r4, r0
 800a204:	460d      	mov	r5, r1
 800a206:	d016      	beq.n	800a236 <__ieee754_rem_pio2+0xf6>
 800a208:	a38f      	add	r3, pc, #572	; (adr r3, 800a448 <__ieee754_rem_pio2+0x308>)
 800a20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20e:	f7f5 ffe9 	bl	80001e4 <__adddf3>
 800a212:	4602      	mov	r2, r0
 800a214:	460b      	mov	r3, r1
 800a216:	e9ca 2300 	strd	r2, r3, [sl]
 800a21a:	4620      	mov	r0, r4
 800a21c:	4629      	mov	r1, r5
 800a21e:	f7f5 ffdf 	bl	80001e0 <__aeabi_dsub>
 800a222:	a389      	add	r3, pc, #548	; (adr r3, 800a448 <__ieee754_rem_pio2+0x308>)
 800a224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a228:	f7f5 ffdc 	bl	80001e4 <__adddf3>
 800a22c:	f04f 3bff 	mov.w	fp, #4294967295
 800a230:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a234:	e7c4      	b.n	800a1c0 <__ieee754_rem_pio2+0x80>
 800a236:	a386      	add	r3, pc, #536	; (adr r3, 800a450 <__ieee754_rem_pio2+0x310>)
 800a238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23c:	f7f5 ffd2 	bl	80001e4 <__adddf3>
 800a240:	a385      	add	r3, pc, #532	; (adr r3, 800a458 <__ieee754_rem_pio2+0x318>)
 800a242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a246:	4604      	mov	r4, r0
 800a248:	460d      	mov	r5, r1
 800a24a:	f7f5 ffcb 	bl	80001e4 <__adddf3>
 800a24e:	4602      	mov	r2, r0
 800a250:	460b      	mov	r3, r1
 800a252:	e9ca 2300 	strd	r2, r3, [sl]
 800a256:	4620      	mov	r0, r4
 800a258:	4629      	mov	r1, r5
 800a25a:	f7f5 ffc1 	bl	80001e0 <__aeabi_dsub>
 800a25e:	a37e      	add	r3, pc, #504	; (adr r3, 800a458 <__ieee754_rem_pio2+0x318>)
 800a260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a264:	e7e0      	b.n	800a228 <__ieee754_rem_pio2+0xe8>
 800a266:	4b87      	ldr	r3, [pc, #540]	; (800a484 <__ieee754_rem_pio2+0x344>)
 800a268:	4598      	cmp	r8, r3
 800a26a:	f300 80d9 	bgt.w	800a420 <__ieee754_rem_pio2+0x2e0>
 800a26e:	f001 fbdf 	bl	800ba30 <fabs>
 800a272:	ec55 4b10 	vmov	r4, r5, d0
 800a276:	ee10 0a10 	vmov	r0, s0
 800a27a:	a379      	add	r3, pc, #484	; (adr r3, 800a460 <__ieee754_rem_pio2+0x320>)
 800a27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a280:	4629      	mov	r1, r5
 800a282:	f7f6 f965 	bl	8000550 <__aeabi_dmul>
 800a286:	4b80      	ldr	r3, [pc, #512]	; (800a488 <__ieee754_rem_pio2+0x348>)
 800a288:	2200      	movs	r2, #0
 800a28a:	f7f5 ffab 	bl	80001e4 <__adddf3>
 800a28e:	f7f6 fc0f 	bl	8000ab0 <__aeabi_d2iz>
 800a292:	4683      	mov	fp, r0
 800a294:	f7f6 f8f2 	bl	800047c <__aeabi_i2d>
 800a298:	4602      	mov	r2, r0
 800a29a:	460b      	mov	r3, r1
 800a29c:	ec43 2b18 	vmov	d8, r2, r3
 800a2a0:	a367      	add	r3, pc, #412	; (adr r3, 800a440 <__ieee754_rem_pio2+0x300>)
 800a2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a6:	f7f6 f953 	bl	8000550 <__aeabi_dmul>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	4629      	mov	r1, r5
 800a2b2:	f7f5 ff95 	bl	80001e0 <__aeabi_dsub>
 800a2b6:	a364      	add	r3, pc, #400	; (adr r3, 800a448 <__ieee754_rem_pio2+0x308>)
 800a2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2bc:	4606      	mov	r6, r0
 800a2be:	460f      	mov	r7, r1
 800a2c0:	ec51 0b18 	vmov	r0, r1, d8
 800a2c4:	f7f6 f944 	bl	8000550 <__aeabi_dmul>
 800a2c8:	f1bb 0f1f 	cmp.w	fp, #31
 800a2cc:	4604      	mov	r4, r0
 800a2ce:	460d      	mov	r5, r1
 800a2d0:	dc0d      	bgt.n	800a2ee <__ieee754_rem_pio2+0x1ae>
 800a2d2:	4b6e      	ldr	r3, [pc, #440]	; (800a48c <__ieee754_rem_pio2+0x34c>)
 800a2d4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a2d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2dc:	4543      	cmp	r3, r8
 800a2de:	d006      	beq.n	800a2ee <__ieee754_rem_pio2+0x1ae>
 800a2e0:	4622      	mov	r2, r4
 800a2e2:	462b      	mov	r3, r5
 800a2e4:	4630      	mov	r0, r6
 800a2e6:	4639      	mov	r1, r7
 800a2e8:	f7f5 ff7a 	bl	80001e0 <__aeabi_dsub>
 800a2ec:	e00f      	b.n	800a30e <__ieee754_rem_pio2+0x1ce>
 800a2ee:	462b      	mov	r3, r5
 800a2f0:	4622      	mov	r2, r4
 800a2f2:	4630      	mov	r0, r6
 800a2f4:	4639      	mov	r1, r7
 800a2f6:	f7f5 ff73 	bl	80001e0 <__aeabi_dsub>
 800a2fa:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a2fe:	9303      	str	r3, [sp, #12]
 800a300:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a304:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a308:	f1b8 0f10 	cmp.w	r8, #16
 800a30c:	dc02      	bgt.n	800a314 <__ieee754_rem_pio2+0x1d4>
 800a30e:	e9ca 0100 	strd	r0, r1, [sl]
 800a312:	e039      	b.n	800a388 <__ieee754_rem_pio2+0x248>
 800a314:	a34e      	add	r3, pc, #312	; (adr r3, 800a450 <__ieee754_rem_pio2+0x310>)
 800a316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31a:	ec51 0b18 	vmov	r0, r1, d8
 800a31e:	f7f6 f917 	bl	8000550 <__aeabi_dmul>
 800a322:	4604      	mov	r4, r0
 800a324:	460d      	mov	r5, r1
 800a326:	4602      	mov	r2, r0
 800a328:	460b      	mov	r3, r1
 800a32a:	4630      	mov	r0, r6
 800a32c:	4639      	mov	r1, r7
 800a32e:	f7f5 ff57 	bl	80001e0 <__aeabi_dsub>
 800a332:	4602      	mov	r2, r0
 800a334:	460b      	mov	r3, r1
 800a336:	4680      	mov	r8, r0
 800a338:	4689      	mov	r9, r1
 800a33a:	4630      	mov	r0, r6
 800a33c:	4639      	mov	r1, r7
 800a33e:	f7f5 ff4f 	bl	80001e0 <__aeabi_dsub>
 800a342:	4622      	mov	r2, r4
 800a344:	462b      	mov	r3, r5
 800a346:	f7f5 ff4b 	bl	80001e0 <__aeabi_dsub>
 800a34a:	a343      	add	r3, pc, #268	; (adr r3, 800a458 <__ieee754_rem_pio2+0x318>)
 800a34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a350:	4604      	mov	r4, r0
 800a352:	460d      	mov	r5, r1
 800a354:	ec51 0b18 	vmov	r0, r1, d8
 800a358:	f7f6 f8fa 	bl	8000550 <__aeabi_dmul>
 800a35c:	4622      	mov	r2, r4
 800a35e:	462b      	mov	r3, r5
 800a360:	f7f5 ff3e 	bl	80001e0 <__aeabi_dsub>
 800a364:	4602      	mov	r2, r0
 800a366:	460b      	mov	r3, r1
 800a368:	4604      	mov	r4, r0
 800a36a:	460d      	mov	r5, r1
 800a36c:	4640      	mov	r0, r8
 800a36e:	4649      	mov	r1, r9
 800a370:	f7f5 ff36 	bl	80001e0 <__aeabi_dsub>
 800a374:	9a03      	ldr	r2, [sp, #12]
 800a376:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a37a:	1ad3      	subs	r3, r2, r3
 800a37c:	2b31      	cmp	r3, #49	; 0x31
 800a37e:	dc24      	bgt.n	800a3ca <__ieee754_rem_pio2+0x28a>
 800a380:	e9ca 0100 	strd	r0, r1, [sl]
 800a384:	4646      	mov	r6, r8
 800a386:	464f      	mov	r7, r9
 800a388:	e9da 8900 	ldrd	r8, r9, [sl]
 800a38c:	4630      	mov	r0, r6
 800a38e:	4642      	mov	r2, r8
 800a390:	464b      	mov	r3, r9
 800a392:	4639      	mov	r1, r7
 800a394:	f7f5 ff24 	bl	80001e0 <__aeabi_dsub>
 800a398:	462b      	mov	r3, r5
 800a39a:	4622      	mov	r2, r4
 800a39c:	f7f5 ff20 	bl	80001e0 <__aeabi_dsub>
 800a3a0:	9b02      	ldr	r3, [sp, #8]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a3a8:	f6bf af0a 	bge.w	800a1c0 <__ieee754_rem_pio2+0x80>
 800a3ac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a3b0:	f8ca 3004 	str.w	r3, [sl, #4]
 800a3b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3b8:	f8ca 8000 	str.w	r8, [sl]
 800a3bc:	f8ca 0008 	str.w	r0, [sl, #8]
 800a3c0:	f8ca 300c 	str.w	r3, [sl, #12]
 800a3c4:	f1cb 0b00 	rsb	fp, fp, #0
 800a3c8:	e6fa      	b.n	800a1c0 <__ieee754_rem_pio2+0x80>
 800a3ca:	a327      	add	r3, pc, #156	; (adr r3, 800a468 <__ieee754_rem_pio2+0x328>)
 800a3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d0:	ec51 0b18 	vmov	r0, r1, d8
 800a3d4:	f7f6 f8bc 	bl	8000550 <__aeabi_dmul>
 800a3d8:	4604      	mov	r4, r0
 800a3da:	460d      	mov	r5, r1
 800a3dc:	4602      	mov	r2, r0
 800a3de:	460b      	mov	r3, r1
 800a3e0:	4640      	mov	r0, r8
 800a3e2:	4649      	mov	r1, r9
 800a3e4:	f7f5 fefc 	bl	80001e0 <__aeabi_dsub>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	4606      	mov	r6, r0
 800a3ee:	460f      	mov	r7, r1
 800a3f0:	4640      	mov	r0, r8
 800a3f2:	4649      	mov	r1, r9
 800a3f4:	f7f5 fef4 	bl	80001e0 <__aeabi_dsub>
 800a3f8:	4622      	mov	r2, r4
 800a3fa:	462b      	mov	r3, r5
 800a3fc:	f7f5 fef0 	bl	80001e0 <__aeabi_dsub>
 800a400:	a31b      	add	r3, pc, #108	; (adr r3, 800a470 <__ieee754_rem_pio2+0x330>)
 800a402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a406:	4604      	mov	r4, r0
 800a408:	460d      	mov	r5, r1
 800a40a:	ec51 0b18 	vmov	r0, r1, d8
 800a40e:	f7f6 f89f 	bl	8000550 <__aeabi_dmul>
 800a412:	4622      	mov	r2, r4
 800a414:	462b      	mov	r3, r5
 800a416:	f7f5 fee3 	bl	80001e0 <__aeabi_dsub>
 800a41a:	4604      	mov	r4, r0
 800a41c:	460d      	mov	r5, r1
 800a41e:	e75f      	b.n	800a2e0 <__ieee754_rem_pio2+0x1a0>
 800a420:	4b1b      	ldr	r3, [pc, #108]	; (800a490 <__ieee754_rem_pio2+0x350>)
 800a422:	4598      	cmp	r8, r3
 800a424:	dd36      	ble.n	800a494 <__ieee754_rem_pio2+0x354>
 800a426:	ee10 2a10 	vmov	r2, s0
 800a42a:	462b      	mov	r3, r5
 800a42c:	4620      	mov	r0, r4
 800a42e:	4629      	mov	r1, r5
 800a430:	f7f5 fed6 	bl	80001e0 <__aeabi_dsub>
 800a434:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a438:	e9ca 0100 	strd	r0, r1, [sl]
 800a43c:	e694      	b.n	800a168 <__ieee754_rem_pio2+0x28>
 800a43e:	bf00      	nop
 800a440:	54400000 	.word	0x54400000
 800a444:	3ff921fb 	.word	0x3ff921fb
 800a448:	1a626331 	.word	0x1a626331
 800a44c:	3dd0b461 	.word	0x3dd0b461
 800a450:	1a600000 	.word	0x1a600000
 800a454:	3dd0b461 	.word	0x3dd0b461
 800a458:	2e037073 	.word	0x2e037073
 800a45c:	3ba3198a 	.word	0x3ba3198a
 800a460:	6dc9c883 	.word	0x6dc9c883
 800a464:	3fe45f30 	.word	0x3fe45f30
 800a468:	2e000000 	.word	0x2e000000
 800a46c:	3ba3198a 	.word	0x3ba3198a
 800a470:	252049c1 	.word	0x252049c1
 800a474:	397b839a 	.word	0x397b839a
 800a478:	3fe921fb 	.word	0x3fe921fb
 800a47c:	4002d97b 	.word	0x4002d97b
 800a480:	3ff921fb 	.word	0x3ff921fb
 800a484:	413921fb 	.word	0x413921fb
 800a488:	3fe00000 	.word	0x3fe00000
 800a48c:	0800bf38 	.word	0x0800bf38
 800a490:	7fefffff 	.word	0x7fefffff
 800a494:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a498:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a49c:	ee10 0a10 	vmov	r0, s0
 800a4a0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a4a4:	ee10 6a10 	vmov	r6, s0
 800a4a8:	460f      	mov	r7, r1
 800a4aa:	f7f6 fb01 	bl	8000ab0 <__aeabi_d2iz>
 800a4ae:	f7f5 ffe5 	bl	800047c <__aeabi_i2d>
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	460b      	mov	r3, r1
 800a4b6:	4630      	mov	r0, r6
 800a4b8:	4639      	mov	r1, r7
 800a4ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a4be:	f7f5 fe8f 	bl	80001e0 <__aeabi_dsub>
 800a4c2:	4b23      	ldr	r3, [pc, #140]	; (800a550 <__ieee754_rem_pio2+0x410>)
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f7f6 f843 	bl	8000550 <__aeabi_dmul>
 800a4ca:	460f      	mov	r7, r1
 800a4cc:	4606      	mov	r6, r0
 800a4ce:	f7f6 faef 	bl	8000ab0 <__aeabi_d2iz>
 800a4d2:	f7f5 ffd3 	bl	800047c <__aeabi_i2d>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	460b      	mov	r3, r1
 800a4da:	4630      	mov	r0, r6
 800a4dc:	4639      	mov	r1, r7
 800a4de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a4e2:	f7f5 fe7d 	bl	80001e0 <__aeabi_dsub>
 800a4e6:	4b1a      	ldr	r3, [pc, #104]	; (800a550 <__ieee754_rem_pio2+0x410>)
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f7f6 f831 	bl	8000550 <__aeabi_dmul>
 800a4ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a4f2:	ad04      	add	r5, sp, #16
 800a4f4:	f04f 0803 	mov.w	r8, #3
 800a4f8:	46a9      	mov	r9, r5
 800a4fa:	2600      	movs	r6, #0
 800a4fc:	2700      	movs	r7, #0
 800a4fe:	4632      	mov	r2, r6
 800a500:	463b      	mov	r3, r7
 800a502:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a506:	46c3      	mov	fp, r8
 800a508:	3d08      	subs	r5, #8
 800a50a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a50e:	f7f6 fa87 	bl	8000a20 <__aeabi_dcmpeq>
 800a512:	2800      	cmp	r0, #0
 800a514:	d1f3      	bne.n	800a4fe <__ieee754_rem_pio2+0x3be>
 800a516:	4b0f      	ldr	r3, [pc, #60]	; (800a554 <__ieee754_rem_pio2+0x414>)
 800a518:	9301      	str	r3, [sp, #4]
 800a51a:	2302      	movs	r3, #2
 800a51c:	9300      	str	r3, [sp, #0]
 800a51e:	4622      	mov	r2, r4
 800a520:	465b      	mov	r3, fp
 800a522:	4651      	mov	r1, sl
 800a524:	4648      	mov	r0, r9
 800a526:	f000 fb27 	bl	800ab78 <__kernel_rem_pio2>
 800a52a:	9b02      	ldr	r3, [sp, #8]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	4683      	mov	fp, r0
 800a530:	f6bf ae46 	bge.w	800a1c0 <__ieee754_rem_pio2+0x80>
 800a534:	e9da 2100 	ldrd	r2, r1, [sl]
 800a538:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a53c:	e9ca 2300 	strd	r2, r3, [sl]
 800a540:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a544:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a548:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a54c:	e73a      	b.n	800a3c4 <__ieee754_rem_pio2+0x284>
 800a54e:	bf00      	nop
 800a550:	41700000 	.word	0x41700000
 800a554:	0800bfb8 	.word	0x0800bfb8

0800a558 <__ieee754_sqrt>:
 800a558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a55c:	ec55 4b10 	vmov	r4, r5, d0
 800a560:	4e55      	ldr	r6, [pc, #340]	; (800a6b8 <__ieee754_sqrt+0x160>)
 800a562:	43ae      	bics	r6, r5
 800a564:	ee10 0a10 	vmov	r0, s0
 800a568:	ee10 3a10 	vmov	r3, s0
 800a56c:	462a      	mov	r2, r5
 800a56e:	4629      	mov	r1, r5
 800a570:	d110      	bne.n	800a594 <__ieee754_sqrt+0x3c>
 800a572:	ee10 2a10 	vmov	r2, s0
 800a576:	462b      	mov	r3, r5
 800a578:	f7f5 ffea 	bl	8000550 <__aeabi_dmul>
 800a57c:	4602      	mov	r2, r0
 800a57e:	460b      	mov	r3, r1
 800a580:	4620      	mov	r0, r4
 800a582:	4629      	mov	r1, r5
 800a584:	f7f5 fe2e 	bl	80001e4 <__adddf3>
 800a588:	4604      	mov	r4, r0
 800a58a:	460d      	mov	r5, r1
 800a58c:	ec45 4b10 	vmov	d0, r4, r5
 800a590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a594:	2d00      	cmp	r5, #0
 800a596:	dc10      	bgt.n	800a5ba <__ieee754_sqrt+0x62>
 800a598:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a59c:	4330      	orrs	r0, r6
 800a59e:	d0f5      	beq.n	800a58c <__ieee754_sqrt+0x34>
 800a5a0:	b15d      	cbz	r5, 800a5ba <__ieee754_sqrt+0x62>
 800a5a2:	ee10 2a10 	vmov	r2, s0
 800a5a6:	462b      	mov	r3, r5
 800a5a8:	ee10 0a10 	vmov	r0, s0
 800a5ac:	f7f5 fe18 	bl	80001e0 <__aeabi_dsub>
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	f7f6 f8f6 	bl	80007a4 <__aeabi_ddiv>
 800a5b8:	e7e6      	b.n	800a588 <__ieee754_sqrt+0x30>
 800a5ba:	1512      	asrs	r2, r2, #20
 800a5bc:	d074      	beq.n	800a6a8 <__ieee754_sqrt+0x150>
 800a5be:	07d4      	lsls	r4, r2, #31
 800a5c0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a5c4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a5c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a5cc:	bf5e      	ittt	pl
 800a5ce:	0fda      	lsrpl	r2, r3, #31
 800a5d0:	005b      	lslpl	r3, r3, #1
 800a5d2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a5d6:	2400      	movs	r4, #0
 800a5d8:	0fda      	lsrs	r2, r3, #31
 800a5da:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a5de:	107f      	asrs	r7, r7, #1
 800a5e0:	005b      	lsls	r3, r3, #1
 800a5e2:	2516      	movs	r5, #22
 800a5e4:	4620      	mov	r0, r4
 800a5e6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a5ea:	1886      	adds	r6, r0, r2
 800a5ec:	428e      	cmp	r6, r1
 800a5ee:	bfde      	ittt	le
 800a5f0:	1b89      	suble	r1, r1, r6
 800a5f2:	18b0      	addle	r0, r6, r2
 800a5f4:	18a4      	addle	r4, r4, r2
 800a5f6:	0049      	lsls	r1, r1, #1
 800a5f8:	3d01      	subs	r5, #1
 800a5fa:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a5fe:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a602:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a606:	d1f0      	bne.n	800a5ea <__ieee754_sqrt+0x92>
 800a608:	462a      	mov	r2, r5
 800a60a:	f04f 0e20 	mov.w	lr, #32
 800a60e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a612:	4281      	cmp	r1, r0
 800a614:	eb06 0c05 	add.w	ip, r6, r5
 800a618:	dc02      	bgt.n	800a620 <__ieee754_sqrt+0xc8>
 800a61a:	d113      	bne.n	800a644 <__ieee754_sqrt+0xec>
 800a61c:	459c      	cmp	ip, r3
 800a61e:	d811      	bhi.n	800a644 <__ieee754_sqrt+0xec>
 800a620:	f1bc 0f00 	cmp.w	ip, #0
 800a624:	eb0c 0506 	add.w	r5, ip, r6
 800a628:	da43      	bge.n	800a6b2 <__ieee754_sqrt+0x15a>
 800a62a:	2d00      	cmp	r5, #0
 800a62c:	db41      	blt.n	800a6b2 <__ieee754_sqrt+0x15a>
 800a62e:	f100 0801 	add.w	r8, r0, #1
 800a632:	1a09      	subs	r1, r1, r0
 800a634:	459c      	cmp	ip, r3
 800a636:	bf88      	it	hi
 800a638:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800a63c:	eba3 030c 	sub.w	r3, r3, ip
 800a640:	4432      	add	r2, r6
 800a642:	4640      	mov	r0, r8
 800a644:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a648:	f1be 0e01 	subs.w	lr, lr, #1
 800a64c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a650:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a654:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a658:	d1db      	bne.n	800a612 <__ieee754_sqrt+0xba>
 800a65a:	430b      	orrs	r3, r1
 800a65c:	d006      	beq.n	800a66c <__ieee754_sqrt+0x114>
 800a65e:	1c50      	adds	r0, r2, #1
 800a660:	bf13      	iteet	ne
 800a662:	3201      	addne	r2, #1
 800a664:	3401      	addeq	r4, #1
 800a666:	4672      	moveq	r2, lr
 800a668:	f022 0201 	bicne.w	r2, r2, #1
 800a66c:	1063      	asrs	r3, r4, #1
 800a66e:	0852      	lsrs	r2, r2, #1
 800a670:	07e1      	lsls	r1, r4, #31
 800a672:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a676:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a67a:	bf48      	it	mi
 800a67c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a680:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a684:	4614      	mov	r4, r2
 800a686:	e781      	b.n	800a58c <__ieee754_sqrt+0x34>
 800a688:	0ad9      	lsrs	r1, r3, #11
 800a68a:	3815      	subs	r0, #21
 800a68c:	055b      	lsls	r3, r3, #21
 800a68e:	2900      	cmp	r1, #0
 800a690:	d0fa      	beq.n	800a688 <__ieee754_sqrt+0x130>
 800a692:	02cd      	lsls	r5, r1, #11
 800a694:	d50a      	bpl.n	800a6ac <__ieee754_sqrt+0x154>
 800a696:	f1c2 0420 	rsb	r4, r2, #32
 800a69a:	fa23 f404 	lsr.w	r4, r3, r4
 800a69e:	1e55      	subs	r5, r2, #1
 800a6a0:	4093      	lsls	r3, r2
 800a6a2:	4321      	orrs	r1, r4
 800a6a4:	1b42      	subs	r2, r0, r5
 800a6a6:	e78a      	b.n	800a5be <__ieee754_sqrt+0x66>
 800a6a8:	4610      	mov	r0, r2
 800a6aa:	e7f0      	b.n	800a68e <__ieee754_sqrt+0x136>
 800a6ac:	0049      	lsls	r1, r1, #1
 800a6ae:	3201      	adds	r2, #1
 800a6b0:	e7ef      	b.n	800a692 <__ieee754_sqrt+0x13a>
 800a6b2:	4680      	mov	r8, r0
 800a6b4:	e7bd      	b.n	800a632 <__ieee754_sqrt+0xda>
 800a6b6:	bf00      	nop
 800a6b8:	7ff00000 	.word	0x7ff00000

0800a6bc <__ieee754_log10f>:
 800a6bc:	b508      	push	{r3, lr}
 800a6be:	ee10 2a10 	vmov	r2, s0
 800a6c2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800a6c6:	ed2d 8b02 	vpush	{d8}
 800a6ca:	d108      	bne.n	800a6de <__ieee754_log10f+0x22>
 800a6cc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800a754 <__ieee754_log10f+0x98>
 800a6d0:	eddf 7a21 	vldr	s15, [pc, #132]	; 800a758 <__ieee754_log10f+0x9c>
 800a6d4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800a6d8:	ecbd 8b02 	vpop	{d8}
 800a6dc:	bd08      	pop	{r3, pc}
 800a6de:	2a00      	cmp	r2, #0
 800a6e0:	da02      	bge.n	800a6e8 <__ieee754_log10f+0x2c>
 800a6e2:	ee30 7a40 	vsub.f32	s14, s0, s0
 800a6e6:	e7f3      	b.n	800a6d0 <__ieee754_log10f+0x14>
 800a6e8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a6ec:	db02      	blt.n	800a6f4 <__ieee754_log10f+0x38>
 800a6ee:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a6f2:	e7f1      	b.n	800a6d8 <__ieee754_log10f+0x1c>
 800a6f4:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800a6f8:	bfbf      	itttt	lt
 800a6fa:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 800a75c <__ieee754_log10f+0xa0>
 800a6fe:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800a702:	f06f 0118 	mvnlt.w	r1, #24
 800a706:	ee17 2a90 	vmovlt	r2, s15
 800a70a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800a70e:	bfa8      	it	ge
 800a710:	2100      	movge	r1, #0
 800a712:	3b7f      	subs	r3, #127	; 0x7f
 800a714:	440b      	add	r3, r1
 800a716:	0fd9      	lsrs	r1, r3, #31
 800a718:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800a71c:	ee07 3a90 	vmov	s15, r3
 800a720:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800a724:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 800a728:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800a72c:	ee00 3a10 	vmov	s0, r3
 800a730:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800a734:	f001 fad8 	bl	800bce8 <__ieee754_logf>
 800a738:	eddf 7a09 	vldr	s15, [pc, #36]	; 800a760 <__ieee754_log10f+0xa4>
 800a73c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a740:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a764 <__ieee754_log10f+0xa8>
 800a744:	eea8 0a27 	vfma.f32	s0, s16, s15
 800a748:	eddf 7a07 	vldr	s15, [pc, #28]	; 800a768 <__ieee754_log10f+0xac>
 800a74c:	eea8 0a27 	vfma.f32	s0, s16, s15
 800a750:	e7c2      	b.n	800a6d8 <__ieee754_log10f+0x1c>
 800a752:	bf00      	nop
 800a754:	cc000000 	.word	0xcc000000
 800a758:	00000000 	.word	0x00000000
 800a75c:	4c000000 	.word	0x4c000000
 800a760:	3ede5bd9 	.word	0x3ede5bd9
 800a764:	355427db 	.word	0x355427db
 800a768:	3e9a2080 	.word	0x3e9a2080

0800a76c <__ieee754_rem_pio2f>:
 800a76c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a76e:	ee10 6a10 	vmov	r6, s0
 800a772:	4b8e      	ldr	r3, [pc, #568]	; (800a9ac <__ieee754_rem_pio2f+0x240>)
 800a774:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a778:	429d      	cmp	r5, r3
 800a77a:	b087      	sub	sp, #28
 800a77c:	eef0 7a40 	vmov.f32	s15, s0
 800a780:	4604      	mov	r4, r0
 800a782:	dc05      	bgt.n	800a790 <__ieee754_rem_pio2f+0x24>
 800a784:	2300      	movs	r3, #0
 800a786:	ed80 0a00 	vstr	s0, [r0]
 800a78a:	6043      	str	r3, [r0, #4]
 800a78c:	2000      	movs	r0, #0
 800a78e:	e01a      	b.n	800a7c6 <__ieee754_rem_pio2f+0x5a>
 800a790:	4b87      	ldr	r3, [pc, #540]	; (800a9b0 <__ieee754_rem_pio2f+0x244>)
 800a792:	429d      	cmp	r5, r3
 800a794:	dc46      	bgt.n	800a824 <__ieee754_rem_pio2f+0xb8>
 800a796:	2e00      	cmp	r6, #0
 800a798:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800a9b4 <__ieee754_rem_pio2f+0x248>
 800a79c:	4b86      	ldr	r3, [pc, #536]	; (800a9b8 <__ieee754_rem_pio2f+0x24c>)
 800a79e:	f025 050f 	bic.w	r5, r5, #15
 800a7a2:	dd1f      	ble.n	800a7e4 <__ieee754_rem_pio2f+0x78>
 800a7a4:	429d      	cmp	r5, r3
 800a7a6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a7aa:	d00e      	beq.n	800a7ca <__ieee754_rem_pio2f+0x5e>
 800a7ac:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800a9bc <__ieee754_rem_pio2f+0x250>
 800a7b0:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800a7b4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a7b8:	ed80 0a00 	vstr	s0, [r0]
 800a7bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a7c0:	2001      	movs	r0, #1
 800a7c2:	edc4 7a01 	vstr	s15, [r4, #4]
 800a7c6:	b007      	add	sp, #28
 800a7c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7ca:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800a9c0 <__ieee754_rem_pio2f+0x254>
 800a7ce:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800a9c4 <__ieee754_rem_pio2f+0x258>
 800a7d2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a7d6:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800a7da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a7de:	edc0 6a00 	vstr	s13, [r0]
 800a7e2:	e7eb      	b.n	800a7bc <__ieee754_rem_pio2f+0x50>
 800a7e4:	429d      	cmp	r5, r3
 800a7e6:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a7ea:	d00e      	beq.n	800a80a <__ieee754_rem_pio2f+0x9e>
 800a7ec:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800a9bc <__ieee754_rem_pio2f+0x250>
 800a7f0:	ee37 0a87 	vadd.f32	s0, s15, s14
 800a7f4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a7f8:	ed80 0a00 	vstr	s0, [r0]
 800a7fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a800:	f04f 30ff 	mov.w	r0, #4294967295
 800a804:	edc4 7a01 	vstr	s15, [r4, #4]
 800a808:	e7dd      	b.n	800a7c6 <__ieee754_rem_pio2f+0x5a>
 800a80a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800a9c0 <__ieee754_rem_pio2f+0x254>
 800a80e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800a9c4 <__ieee754_rem_pio2f+0x258>
 800a812:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a816:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a81a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a81e:	edc0 6a00 	vstr	s13, [r0]
 800a822:	e7eb      	b.n	800a7fc <__ieee754_rem_pio2f+0x90>
 800a824:	4b68      	ldr	r3, [pc, #416]	; (800a9c8 <__ieee754_rem_pio2f+0x25c>)
 800a826:	429d      	cmp	r5, r3
 800a828:	dc72      	bgt.n	800a910 <__ieee754_rem_pio2f+0x1a4>
 800a82a:	f001 f99b 	bl	800bb64 <fabsf>
 800a82e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800a9cc <__ieee754_rem_pio2f+0x260>
 800a832:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a836:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a83a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a83e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a842:	ee17 0a90 	vmov	r0, s15
 800a846:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800a9b4 <__ieee754_rem_pio2f+0x248>
 800a84a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800a84e:	281f      	cmp	r0, #31
 800a850:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800a9bc <__ieee754_rem_pio2f+0x250>
 800a854:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a858:	eeb1 6a47 	vneg.f32	s12, s14
 800a85c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a860:	ee16 2a90 	vmov	r2, s13
 800a864:	dc1c      	bgt.n	800a8a0 <__ieee754_rem_pio2f+0x134>
 800a866:	495a      	ldr	r1, [pc, #360]	; (800a9d0 <__ieee754_rem_pio2f+0x264>)
 800a868:	1e47      	subs	r7, r0, #1
 800a86a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800a86e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800a872:	428b      	cmp	r3, r1
 800a874:	d014      	beq.n	800a8a0 <__ieee754_rem_pio2f+0x134>
 800a876:	6022      	str	r2, [r4, #0]
 800a878:	ed94 7a00 	vldr	s14, [r4]
 800a87c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a880:	2e00      	cmp	r6, #0
 800a882:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a886:	ed84 0a01 	vstr	s0, [r4, #4]
 800a88a:	da9c      	bge.n	800a7c6 <__ieee754_rem_pio2f+0x5a>
 800a88c:	eeb1 7a47 	vneg.f32	s14, s14
 800a890:	eeb1 0a40 	vneg.f32	s0, s0
 800a894:	ed84 7a00 	vstr	s14, [r4]
 800a898:	ed84 0a01 	vstr	s0, [r4, #4]
 800a89c:	4240      	negs	r0, r0
 800a89e:	e792      	b.n	800a7c6 <__ieee754_rem_pio2f+0x5a>
 800a8a0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a8a4:	15eb      	asrs	r3, r5, #23
 800a8a6:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800a8aa:	2d08      	cmp	r5, #8
 800a8ac:	dde3      	ble.n	800a876 <__ieee754_rem_pio2f+0x10a>
 800a8ae:	eddf 7a44 	vldr	s15, [pc, #272]	; 800a9c0 <__ieee754_rem_pio2f+0x254>
 800a8b2:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a9c4 <__ieee754_rem_pio2f+0x258>
 800a8b6:	eef0 6a40 	vmov.f32	s13, s0
 800a8ba:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a8be:	ee30 0a66 	vsub.f32	s0, s0, s13
 800a8c2:	eea6 0a27 	vfma.f32	s0, s12, s15
 800a8c6:	eef0 7a40 	vmov.f32	s15, s0
 800a8ca:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800a8ce:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800a8d2:	ee15 2a90 	vmov	r2, s11
 800a8d6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a8da:	1a5b      	subs	r3, r3, r1
 800a8dc:	2b19      	cmp	r3, #25
 800a8de:	dc04      	bgt.n	800a8ea <__ieee754_rem_pio2f+0x17e>
 800a8e0:	edc4 5a00 	vstr	s11, [r4]
 800a8e4:	eeb0 0a66 	vmov.f32	s0, s13
 800a8e8:	e7c6      	b.n	800a878 <__ieee754_rem_pio2f+0x10c>
 800a8ea:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800a9d4 <__ieee754_rem_pio2f+0x268>
 800a8ee:	eeb0 0a66 	vmov.f32	s0, s13
 800a8f2:	eea6 0a25 	vfma.f32	s0, s12, s11
 800a8f6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800a8fa:	eddf 6a37 	vldr	s13, [pc, #220]	; 800a9d8 <__ieee754_rem_pio2f+0x26c>
 800a8fe:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a902:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800a906:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a90a:	ed84 7a00 	vstr	s14, [r4]
 800a90e:	e7b3      	b.n	800a878 <__ieee754_rem_pio2f+0x10c>
 800a910:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800a914:	db06      	blt.n	800a924 <__ieee754_rem_pio2f+0x1b8>
 800a916:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a91a:	edc0 7a01 	vstr	s15, [r0, #4]
 800a91e:	edc0 7a00 	vstr	s15, [r0]
 800a922:	e733      	b.n	800a78c <__ieee754_rem_pio2f+0x20>
 800a924:	15ea      	asrs	r2, r5, #23
 800a926:	3a86      	subs	r2, #134	; 0x86
 800a928:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800a92c:	ee07 3a90 	vmov	s15, r3
 800a930:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a934:	eddf 6a29 	vldr	s13, [pc, #164]	; 800a9dc <__ieee754_rem_pio2f+0x270>
 800a938:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a93c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a940:	ed8d 7a03 	vstr	s14, [sp, #12]
 800a944:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a948:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a94c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a950:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a954:	ed8d 7a04 	vstr	s14, [sp, #16]
 800a958:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a95c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a964:	edcd 7a05 	vstr	s15, [sp, #20]
 800a968:	d11e      	bne.n	800a9a8 <__ieee754_rem_pio2f+0x23c>
 800a96a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800a96e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a972:	bf14      	ite	ne
 800a974:	2302      	movne	r3, #2
 800a976:	2301      	moveq	r3, #1
 800a978:	4919      	ldr	r1, [pc, #100]	; (800a9e0 <__ieee754_rem_pio2f+0x274>)
 800a97a:	9101      	str	r1, [sp, #4]
 800a97c:	2102      	movs	r1, #2
 800a97e:	9100      	str	r1, [sp, #0]
 800a980:	a803      	add	r0, sp, #12
 800a982:	4621      	mov	r1, r4
 800a984:	f000 fd66 	bl	800b454 <__kernel_rem_pio2f>
 800a988:	2e00      	cmp	r6, #0
 800a98a:	f6bf af1c 	bge.w	800a7c6 <__ieee754_rem_pio2f+0x5a>
 800a98e:	edd4 7a00 	vldr	s15, [r4]
 800a992:	eef1 7a67 	vneg.f32	s15, s15
 800a996:	edc4 7a00 	vstr	s15, [r4]
 800a99a:	edd4 7a01 	vldr	s15, [r4, #4]
 800a99e:	eef1 7a67 	vneg.f32	s15, s15
 800a9a2:	edc4 7a01 	vstr	s15, [r4, #4]
 800a9a6:	e779      	b.n	800a89c <__ieee754_rem_pio2f+0x130>
 800a9a8:	2303      	movs	r3, #3
 800a9aa:	e7e5      	b.n	800a978 <__ieee754_rem_pio2f+0x20c>
 800a9ac:	3f490fd8 	.word	0x3f490fd8
 800a9b0:	4016cbe3 	.word	0x4016cbe3
 800a9b4:	3fc90f80 	.word	0x3fc90f80
 800a9b8:	3fc90fd0 	.word	0x3fc90fd0
 800a9bc:	37354443 	.word	0x37354443
 800a9c0:	37354400 	.word	0x37354400
 800a9c4:	2e85a308 	.word	0x2e85a308
 800a9c8:	43490f80 	.word	0x43490f80
 800a9cc:	3f22f984 	.word	0x3f22f984
 800a9d0:	0800c0c0 	.word	0x0800c0c0
 800a9d4:	2e85a300 	.word	0x2e85a300
 800a9d8:	248d3132 	.word	0x248d3132
 800a9dc:	43800000 	.word	0x43800000
 800a9e0:	0800c140 	.word	0x0800c140
 800a9e4:	00000000 	.word	0x00000000

0800a9e8 <__kernel_cos>:
 800a9e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ec:	ec57 6b10 	vmov	r6, r7, d0
 800a9f0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a9f4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a9f8:	ed8d 1b00 	vstr	d1, [sp]
 800a9fc:	da07      	bge.n	800aa0e <__kernel_cos+0x26>
 800a9fe:	ee10 0a10 	vmov	r0, s0
 800aa02:	4639      	mov	r1, r7
 800aa04:	f7f6 f854 	bl	8000ab0 <__aeabi_d2iz>
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	f000 8088 	beq.w	800ab1e <__kernel_cos+0x136>
 800aa0e:	4632      	mov	r2, r6
 800aa10:	463b      	mov	r3, r7
 800aa12:	4630      	mov	r0, r6
 800aa14:	4639      	mov	r1, r7
 800aa16:	f7f5 fd9b 	bl	8000550 <__aeabi_dmul>
 800aa1a:	4b51      	ldr	r3, [pc, #324]	; (800ab60 <__kernel_cos+0x178>)
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	4604      	mov	r4, r0
 800aa20:	460d      	mov	r5, r1
 800aa22:	f7f5 fd95 	bl	8000550 <__aeabi_dmul>
 800aa26:	a340      	add	r3, pc, #256	; (adr r3, 800ab28 <__kernel_cos+0x140>)
 800aa28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2c:	4682      	mov	sl, r0
 800aa2e:	468b      	mov	fp, r1
 800aa30:	4620      	mov	r0, r4
 800aa32:	4629      	mov	r1, r5
 800aa34:	f7f5 fd8c 	bl	8000550 <__aeabi_dmul>
 800aa38:	a33d      	add	r3, pc, #244	; (adr r3, 800ab30 <__kernel_cos+0x148>)
 800aa3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa3e:	f7f5 fbd1 	bl	80001e4 <__adddf3>
 800aa42:	4622      	mov	r2, r4
 800aa44:	462b      	mov	r3, r5
 800aa46:	f7f5 fd83 	bl	8000550 <__aeabi_dmul>
 800aa4a:	a33b      	add	r3, pc, #236	; (adr r3, 800ab38 <__kernel_cos+0x150>)
 800aa4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa50:	f7f5 fbc6 	bl	80001e0 <__aeabi_dsub>
 800aa54:	4622      	mov	r2, r4
 800aa56:	462b      	mov	r3, r5
 800aa58:	f7f5 fd7a 	bl	8000550 <__aeabi_dmul>
 800aa5c:	a338      	add	r3, pc, #224	; (adr r3, 800ab40 <__kernel_cos+0x158>)
 800aa5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa62:	f7f5 fbbf 	bl	80001e4 <__adddf3>
 800aa66:	4622      	mov	r2, r4
 800aa68:	462b      	mov	r3, r5
 800aa6a:	f7f5 fd71 	bl	8000550 <__aeabi_dmul>
 800aa6e:	a336      	add	r3, pc, #216	; (adr r3, 800ab48 <__kernel_cos+0x160>)
 800aa70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa74:	f7f5 fbb4 	bl	80001e0 <__aeabi_dsub>
 800aa78:	4622      	mov	r2, r4
 800aa7a:	462b      	mov	r3, r5
 800aa7c:	f7f5 fd68 	bl	8000550 <__aeabi_dmul>
 800aa80:	a333      	add	r3, pc, #204	; (adr r3, 800ab50 <__kernel_cos+0x168>)
 800aa82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa86:	f7f5 fbad 	bl	80001e4 <__adddf3>
 800aa8a:	4622      	mov	r2, r4
 800aa8c:	462b      	mov	r3, r5
 800aa8e:	f7f5 fd5f 	bl	8000550 <__aeabi_dmul>
 800aa92:	4622      	mov	r2, r4
 800aa94:	462b      	mov	r3, r5
 800aa96:	f7f5 fd5b 	bl	8000550 <__aeabi_dmul>
 800aa9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa9e:	4604      	mov	r4, r0
 800aaa0:	460d      	mov	r5, r1
 800aaa2:	4630      	mov	r0, r6
 800aaa4:	4639      	mov	r1, r7
 800aaa6:	f7f5 fd53 	bl	8000550 <__aeabi_dmul>
 800aaaa:	460b      	mov	r3, r1
 800aaac:	4602      	mov	r2, r0
 800aaae:	4629      	mov	r1, r5
 800aab0:	4620      	mov	r0, r4
 800aab2:	f7f5 fb95 	bl	80001e0 <__aeabi_dsub>
 800aab6:	4b2b      	ldr	r3, [pc, #172]	; (800ab64 <__kernel_cos+0x17c>)
 800aab8:	4598      	cmp	r8, r3
 800aaba:	4606      	mov	r6, r0
 800aabc:	460f      	mov	r7, r1
 800aabe:	dc10      	bgt.n	800aae2 <__kernel_cos+0xfa>
 800aac0:	4602      	mov	r2, r0
 800aac2:	460b      	mov	r3, r1
 800aac4:	4650      	mov	r0, sl
 800aac6:	4659      	mov	r1, fp
 800aac8:	f7f5 fb8a 	bl	80001e0 <__aeabi_dsub>
 800aacc:	460b      	mov	r3, r1
 800aace:	4926      	ldr	r1, [pc, #152]	; (800ab68 <__kernel_cos+0x180>)
 800aad0:	4602      	mov	r2, r0
 800aad2:	2000      	movs	r0, #0
 800aad4:	f7f5 fb84 	bl	80001e0 <__aeabi_dsub>
 800aad8:	ec41 0b10 	vmov	d0, r0, r1
 800aadc:	b003      	add	sp, #12
 800aade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aae2:	4b22      	ldr	r3, [pc, #136]	; (800ab6c <__kernel_cos+0x184>)
 800aae4:	4920      	ldr	r1, [pc, #128]	; (800ab68 <__kernel_cos+0x180>)
 800aae6:	4598      	cmp	r8, r3
 800aae8:	bfcc      	ite	gt
 800aaea:	4d21      	ldrgt	r5, [pc, #132]	; (800ab70 <__kernel_cos+0x188>)
 800aaec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800aaf0:	2400      	movs	r4, #0
 800aaf2:	4622      	mov	r2, r4
 800aaf4:	462b      	mov	r3, r5
 800aaf6:	2000      	movs	r0, #0
 800aaf8:	f7f5 fb72 	bl	80001e0 <__aeabi_dsub>
 800aafc:	4622      	mov	r2, r4
 800aafe:	4680      	mov	r8, r0
 800ab00:	4689      	mov	r9, r1
 800ab02:	462b      	mov	r3, r5
 800ab04:	4650      	mov	r0, sl
 800ab06:	4659      	mov	r1, fp
 800ab08:	f7f5 fb6a 	bl	80001e0 <__aeabi_dsub>
 800ab0c:	4632      	mov	r2, r6
 800ab0e:	463b      	mov	r3, r7
 800ab10:	f7f5 fb66 	bl	80001e0 <__aeabi_dsub>
 800ab14:	4602      	mov	r2, r0
 800ab16:	460b      	mov	r3, r1
 800ab18:	4640      	mov	r0, r8
 800ab1a:	4649      	mov	r1, r9
 800ab1c:	e7da      	b.n	800aad4 <__kernel_cos+0xec>
 800ab1e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ab58 <__kernel_cos+0x170>
 800ab22:	e7db      	b.n	800aadc <__kernel_cos+0xf4>
 800ab24:	f3af 8000 	nop.w
 800ab28:	be8838d4 	.word	0xbe8838d4
 800ab2c:	bda8fae9 	.word	0xbda8fae9
 800ab30:	bdb4b1c4 	.word	0xbdb4b1c4
 800ab34:	3e21ee9e 	.word	0x3e21ee9e
 800ab38:	809c52ad 	.word	0x809c52ad
 800ab3c:	3e927e4f 	.word	0x3e927e4f
 800ab40:	19cb1590 	.word	0x19cb1590
 800ab44:	3efa01a0 	.word	0x3efa01a0
 800ab48:	16c15177 	.word	0x16c15177
 800ab4c:	3f56c16c 	.word	0x3f56c16c
 800ab50:	5555554c 	.word	0x5555554c
 800ab54:	3fa55555 	.word	0x3fa55555
 800ab58:	00000000 	.word	0x00000000
 800ab5c:	3ff00000 	.word	0x3ff00000
 800ab60:	3fe00000 	.word	0x3fe00000
 800ab64:	3fd33332 	.word	0x3fd33332
 800ab68:	3ff00000 	.word	0x3ff00000
 800ab6c:	3fe90000 	.word	0x3fe90000
 800ab70:	3fd20000 	.word	0x3fd20000
 800ab74:	00000000 	.word	0x00000000

0800ab78 <__kernel_rem_pio2>:
 800ab78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab7c:	ed2d 8b02 	vpush	{d8}
 800ab80:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800ab84:	f112 0f14 	cmn.w	r2, #20
 800ab88:	9308      	str	r3, [sp, #32]
 800ab8a:	9101      	str	r1, [sp, #4]
 800ab8c:	4bc4      	ldr	r3, [pc, #784]	; (800aea0 <__kernel_rem_pio2+0x328>)
 800ab8e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800ab90:	900b      	str	r0, [sp, #44]	; 0x2c
 800ab92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ab96:	9302      	str	r3, [sp, #8]
 800ab98:	9b08      	ldr	r3, [sp, #32]
 800ab9a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ab9e:	bfa8      	it	ge
 800aba0:	1ed4      	subge	r4, r2, #3
 800aba2:	9306      	str	r3, [sp, #24]
 800aba4:	bfb2      	itee	lt
 800aba6:	2400      	movlt	r4, #0
 800aba8:	2318      	movge	r3, #24
 800abaa:	fb94 f4f3 	sdivge	r4, r4, r3
 800abae:	f06f 0317 	mvn.w	r3, #23
 800abb2:	fb04 3303 	mla	r3, r4, r3, r3
 800abb6:	eb03 0a02 	add.w	sl, r3, r2
 800abba:	9b02      	ldr	r3, [sp, #8]
 800abbc:	9a06      	ldr	r2, [sp, #24]
 800abbe:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800ae90 <__kernel_rem_pio2+0x318>
 800abc2:	eb03 0802 	add.w	r8, r3, r2
 800abc6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800abc8:	1aa7      	subs	r7, r4, r2
 800abca:	ae22      	add	r6, sp, #136	; 0x88
 800abcc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800abd0:	2500      	movs	r5, #0
 800abd2:	4545      	cmp	r5, r8
 800abd4:	dd13      	ble.n	800abfe <__kernel_rem_pio2+0x86>
 800abd6:	9b08      	ldr	r3, [sp, #32]
 800abd8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800ae90 <__kernel_rem_pio2+0x318>
 800abdc:	aa22      	add	r2, sp, #136	; 0x88
 800abde:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800abe2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800abe6:	f04f 0800 	mov.w	r8, #0
 800abea:	9b02      	ldr	r3, [sp, #8]
 800abec:	4598      	cmp	r8, r3
 800abee:	dc2f      	bgt.n	800ac50 <__kernel_rem_pio2+0xd8>
 800abf0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800abf4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800abf8:	462f      	mov	r7, r5
 800abfa:	2600      	movs	r6, #0
 800abfc:	e01b      	b.n	800ac36 <__kernel_rem_pio2+0xbe>
 800abfe:	42ef      	cmn	r7, r5
 800ac00:	d407      	bmi.n	800ac12 <__kernel_rem_pio2+0x9a>
 800ac02:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ac06:	f7f5 fc39 	bl	800047c <__aeabi_i2d>
 800ac0a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ac0e:	3501      	adds	r5, #1
 800ac10:	e7df      	b.n	800abd2 <__kernel_rem_pio2+0x5a>
 800ac12:	ec51 0b18 	vmov	r0, r1, d8
 800ac16:	e7f8      	b.n	800ac0a <__kernel_rem_pio2+0x92>
 800ac18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac1c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ac20:	f7f5 fc96 	bl	8000550 <__aeabi_dmul>
 800ac24:	4602      	mov	r2, r0
 800ac26:	460b      	mov	r3, r1
 800ac28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac2c:	f7f5 fada 	bl	80001e4 <__adddf3>
 800ac30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac34:	3601      	adds	r6, #1
 800ac36:	9b06      	ldr	r3, [sp, #24]
 800ac38:	429e      	cmp	r6, r3
 800ac3a:	f1a7 0708 	sub.w	r7, r7, #8
 800ac3e:	ddeb      	ble.n	800ac18 <__kernel_rem_pio2+0xa0>
 800ac40:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ac44:	f108 0801 	add.w	r8, r8, #1
 800ac48:	ecab 7b02 	vstmia	fp!, {d7}
 800ac4c:	3508      	adds	r5, #8
 800ac4e:	e7cc      	b.n	800abea <__kernel_rem_pio2+0x72>
 800ac50:	9b02      	ldr	r3, [sp, #8]
 800ac52:	aa0e      	add	r2, sp, #56	; 0x38
 800ac54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ac58:	930d      	str	r3, [sp, #52]	; 0x34
 800ac5a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ac5c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ac60:	9c02      	ldr	r4, [sp, #8]
 800ac62:	930c      	str	r3, [sp, #48]	; 0x30
 800ac64:	00e3      	lsls	r3, r4, #3
 800ac66:	930a      	str	r3, [sp, #40]	; 0x28
 800ac68:	ab9a      	add	r3, sp, #616	; 0x268
 800ac6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac6e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ac72:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800ac76:	ab72      	add	r3, sp, #456	; 0x1c8
 800ac78:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800ac7c:	46c3      	mov	fp, r8
 800ac7e:	46a1      	mov	r9, r4
 800ac80:	f1b9 0f00 	cmp.w	r9, #0
 800ac84:	f1a5 0508 	sub.w	r5, r5, #8
 800ac88:	dc77      	bgt.n	800ad7a <__kernel_rem_pio2+0x202>
 800ac8a:	ec47 6b10 	vmov	d0, r6, r7
 800ac8e:	4650      	mov	r0, sl
 800ac90:	f000 fee2 	bl	800ba58 <scalbn>
 800ac94:	ec57 6b10 	vmov	r6, r7, d0
 800ac98:	2200      	movs	r2, #0
 800ac9a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ac9e:	ee10 0a10 	vmov	r0, s0
 800aca2:	4639      	mov	r1, r7
 800aca4:	f7f5 fc54 	bl	8000550 <__aeabi_dmul>
 800aca8:	ec41 0b10 	vmov	d0, r0, r1
 800acac:	f7fe fb30 	bl	8009310 <floor>
 800acb0:	4b7c      	ldr	r3, [pc, #496]	; (800aea4 <__kernel_rem_pio2+0x32c>)
 800acb2:	ec51 0b10 	vmov	r0, r1, d0
 800acb6:	2200      	movs	r2, #0
 800acb8:	f7f5 fc4a 	bl	8000550 <__aeabi_dmul>
 800acbc:	4602      	mov	r2, r0
 800acbe:	460b      	mov	r3, r1
 800acc0:	4630      	mov	r0, r6
 800acc2:	4639      	mov	r1, r7
 800acc4:	f7f5 fa8c 	bl	80001e0 <__aeabi_dsub>
 800acc8:	460f      	mov	r7, r1
 800acca:	4606      	mov	r6, r0
 800accc:	f7f5 fef0 	bl	8000ab0 <__aeabi_d2iz>
 800acd0:	9004      	str	r0, [sp, #16]
 800acd2:	f7f5 fbd3 	bl	800047c <__aeabi_i2d>
 800acd6:	4602      	mov	r2, r0
 800acd8:	460b      	mov	r3, r1
 800acda:	4630      	mov	r0, r6
 800acdc:	4639      	mov	r1, r7
 800acde:	f7f5 fa7f 	bl	80001e0 <__aeabi_dsub>
 800ace2:	f1ba 0f00 	cmp.w	sl, #0
 800ace6:	4606      	mov	r6, r0
 800ace8:	460f      	mov	r7, r1
 800acea:	dd6d      	ble.n	800adc8 <__kernel_rem_pio2+0x250>
 800acec:	1e62      	subs	r2, r4, #1
 800acee:	ab0e      	add	r3, sp, #56	; 0x38
 800acf0:	9d04      	ldr	r5, [sp, #16]
 800acf2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800acf6:	f1ca 0118 	rsb	r1, sl, #24
 800acfa:	fa40 f301 	asr.w	r3, r0, r1
 800acfe:	441d      	add	r5, r3
 800ad00:	408b      	lsls	r3, r1
 800ad02:	1ac0      	subs	r0, r0, r3
 800ad04:	ab0e      	add	r3, sp, #56	; 0x38
 800ad06:	9504      	str	r5, [sp, #16]
 800ad08:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ad0c:	f1ca 0317 	rsb	r3, sl, #23
 800ad10:	fa40 fb03 	asr.w	fp, r0, r3
 800ad14:	f1bb 0f00 	cmp.w	fp, #0
 800ad18:	dd65      	ble.n	800ade6 <__kernel_rem_pio2+0x26e>
 800ad1a:	9b04      	ldr	r3, [sp, #16]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	3301      	adds	r3, #1
 800ad20:	9304      	str	r3, [sp, #16]
 800ad22:	4615      	mov	r5, r2
 800ad24:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ad28:	4294      	cmp	r4, r2
 800ad2a:	f300 809c 	bgt.w	800ae66 <__kernel_rem_pio2+0x2ee>
 800ad2e:	f1ba 0f00 	cmp.w	sl, #0
 800ad32:	dd07      	ble.n	800ad44 <__kernel_rem_pio2+0x1cc>
 800ad34:	f1ba 0f01 	cmp.w	sl, #1
 800ad38:	f000 80c0 	beq.w	800aebc <__kernel_rem_pio2+0x344>
 800ad3c:	f1ba 0f02 	cmp.w	sl, #2
 800ad40:	f000 80c6 	beq.w	800aed0 <__kernel_rem_pio2+0x358>
 800ad44:	f1bb 0f02 	cmp.w	fp, #2
 800ad48:	d14d      	bne.n	800ade6 <__kernel_rem_pio2+0x26e>
 800ad4a:	4632      	mov	r2, r6
 800ad4c:	463b      	mov	r3, r7
 800ad4e:	4956      	ldr	r1, [pc, #344]	; (800aea8 <__kernel_rem_pio2+0x330>)
 800ad50:	2000      	movs	r0, #0
 800ad52:	f7f5 fa45 	bl	80001e0 <__aeabi_dsub>
 800ad56:	4606      	mov	r6, r0
 800ad58:	460f      	mov	r7, r1
 800ad5a:	2d00      	cmp	r5, #0
 800ad5c:	d043      	beq.n	800ade6 <__kernel_rem_pio2+0x26e>
 800ad5e:	4650      	mov	r0, sl
 800ad60:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800ae98 <__kernel_rem_pio2+0x320>
 800ad64:	f000 fe78 	bl	800ba58 <scalbn>
 800ad68:	4630      	mov	r0, r6
 800ad6a:	4639      	mov	r1, r7
 800ad6c:	ec53 2b10 	vmov	r2, r3, d0
 800ad70:	f7f5 fa36 	bl	80001e0 <__aeabi_dsub>
 800ad74:	4606      	mov	r6, r0
 800ad76:	460f      	mov	r7, r1
 800ad78:	e035      	b.n	800ade6 <__kernel_rem_pio2+0x26e>
 800ad7a:	4b4c      	ldr	r3, [pc, #304]	; (800aeac <__kernel_rem_pio2+0x334>)
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	4630      	mov	r0, r6
 800ad80:	4639      	mov	r1, r7
 800ad82:	f7f5 fbe5 	bl	8000550 <__aeabi_dmul>
 800ad86:	f7f5 fe93 	bl	8000ab0 <__aeabi_d2iz>
 800ad8a:	f7f5 fb77 	bl	800047c <__aeabi_i2d>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	460b      	mov	r3, r1
 800ad92:	ec43 2b18 	vmov	d8, r2, r3
 800ad96:	4b46      	ldr	r3, [pc, #280]	; (800aeb0 <__kernel_rem_pio2+0x338>)
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f7f5 fbd9 	bl	8000550 <__aeabi_dmul>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	460b      	mov	r3, r1
 800ada2:	4630      	mov	r0, r6
 800ada4:	4639      	mov	r1, r7
 800ada6:	f7f5 fa1b 	bl	80001e0 <__aeabi_dsub>
 800adaa:	f7f5 fe81 	bl	8000ab0 <__aeabi_d2iz>
 800adae:	e9d5 2300 	ldrd	r2, r3, [r5]
 800adb2:	f84b 0b04 	str.w	r0, [fp], #4
 800adb6:	ec51 0b18 	vmov	r0, r1, d8
 800adba:	f7f5 fa13 	bl	80001e4 <__adddf3>
 800adbe:	f109 39ff 	add.w	r9, r9, #4294967295
 800adc2:	4606      	mov	r6, r0
 800adc4:	460f      	mov	r7, r1
 800adc6:	e75b      	b.n	800ac80 <__kernel_rem_pio2+0x108>
 800adc8:	d106      	bne.n	800add8 <__kernel_rem_pio2+0x260>
 800adca:	1e63      	subs	r3, r4, #1
 800adcc:	aa0e      	add	r2, sp, #56	; 0x38
 800adce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800add2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800add6:	e79d      	b.n	800ad14 <__kernel_rem_pio2+0x19c>
 800add8:	4b36      	ldr	r3, [pc, #216]	; (800aeb4 <__kernel_rem_pio2+0x33c>)
 800adda:	2200      	movs	r2, #0
 800addc:	f7f5 fe3e 	bl	8000a5c <__aeabi_dcmpge>
 800ade0:	2800      	cmp	r0, #0
 800ade2:	d13d      	bne.n	800ae60 <__kernel_rem_pio2+0x2e8>
 800ade4:	4683      	mov	fp, r0
 800ade6:	2200      	movs	r2, #0
 800ade8:	2300      	movs	r3, #0
 800adea:	4630      	mov	r0, r6
 800adec:	4639      	mov	r1, r7
 800adee:	f7f5 fe17 	bl	8000a20 <__aeabi_dcmpeq>
 800adf2:	2800      	cmp	r0, #0
 800adf4:	f000 80c0 	beq.w	800af78 <__kernel_rem_pio2+0x400>
 800adf8:	1e65      	subs	r5, r4, #1
 800adfa:	462b      	mov	r3, r5
 800adfc:	2200      	movs	r2, #0
 800adfe:	9902      	ldr	r1, [sp, #8]
 800ae00:	428b      	cmp	r3, r1
 800ae02:	da6c      	bge.n	800aede <__kernel_rem_pio2+0x366>
 800ae04:	2a00      	cmp	r2, #0
 800ae06:	f000 8089 	beq.w	800af1c <__kernel_rem_pio2+0x3a4>
 800ae0a:	ab0e      	add	r3, sp, #56	; 0x38
 800ae0c:	f1aa 0a18 	sub.w	sl, sl, #24
 800ae10:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	f000 80ad 	beq.w	800af74 <__kernel_rem_pio2+0x3fc>
 800ae1a:	4650      	mov	r0, sl
 800ae1c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800ae98 <__kernel_rem_pio2+0x320>
 800ae20:	f000 fe1a 	bl	800ba58 <scalbn>
 800ae24:	ab9a      	add	r3, sp, #616	; 0x268
 800ae26:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ae2a:	ec57 6b10 	vmov	r6, r7, d0
 800ae2e:	00ec      	lsls	r4, r5, #3
 800ae30:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800ae34:	46aa      	mov	sl, r5
 800ae36:	f1ba 0f00 	cmp.w	sl, #0
 800ae3a:	f280 80d6 	bge.w	800afea <__kernel_rem_pio2+0x472>
 800ae3e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800ae90 <__kernel_rem_pio2+0x318>
 800ae42:	462e      	mov	r6, r5
 800ae44:	2e00      	cmp	r6, #0
 800ae46:	f2c0 8104 	blt.w	800b052 <__kernel_rem_pio2+0x4da>
 800ae4a:	ab72      	add	r3, sp, #456	; 0x1c8
 800ae4c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800ae50:	f8df a064 	ldr.w	sl, [pc, #100]	; 800aeb8 <__kernel_rem_pio2+0x340>
 800ae54:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800ae58:	f04f 0800 	mov.w	r8, #0
 800ae5c:	1baf      	subs	r7, r5, r6
 800ae5e:	e0ea      	b.n	800b036 <__kernel_rem_pio2+0x4be>
 800ae60:	f04f 0b02 	mov.w	fp, #2
 800ae64:	e759      	b.n	800ad1a <__kernel_rem_pio2+0x1a2>
 800ae66:	f8d8 3000 	ldr.w	r3, [r8]
 800ae6a:	b955      	cbnz	r5, 800ae82 <__kernel_rem_pio2+0x30a>
 800ae6c:	b123      	cbz	r3, 800ae78 <__kernel_rem_pio2+0x300>
 800ae6e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ae72:	f8c8 3000 	str.w	r3, [r8]
 800ae76:	2301      	movs	r3, #1
 800ae78:	3201      	adds	r2, #1
 800ae7a:	f108 0804 	add.w	r8, r8, #4
 800ae7e:	461d      	mov	r5, r3
 800ae80:	e752      	b.n	800ad28 <__kernel_rem_pio2+0x1b0>
 800ae82:	1acb      	subs	r3, r1, r3
 800ae84:	f8c8 3000 	str.w	r3, [r8]
 800ae88:	462b      	mov	r3, r5
 800ae8a:	e7f5      	b.n	800ae78 <__kernel_rem_pio2+0x300>
 800ae8c:	f3af 8000 	nop.w
	...
 800ae9c:	3ff00000 	.word	0x3ff00000
 800aea0:	0800c498 	.word	0x0800c498
 800aea4:	40200000 	.word	0x40200000
 800aea8:	3ff00000 	.word	0x3ff00000
 800aeac:	3e700000 	.word	0x3e700000
 800aeb0:	41700000 	.word	0x41700000
 800aeb4:	3fe00000 	.word	0x3fe00000
 800aeb8:	0800c458 	.word	0x0800c458
 800aebc:	1e62      	subs	r2, r4, #1
 800aebe:	ab0e      	add	r3, sp, #56	; 0x38
 800aec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aec4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800aec8:	a90e      	add	r1, sp, #56	; 0x38
 800aeca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800aece:	e739      	b.n	800ad44 <__kernel_rem_pio2+0x1cc>
 800aed0:	1e62      	subs	r2, r4, #1
 800aed2:	ab0e      	add	r3, sp, #56	; 0x38
 800aed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aed8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800aedc:	e7f4      	b.n	800aec8 <__kernel_rem_pio2+0x350>
 800aede:	a90e      	add	r1, sp, #56	; 0x38
 800aee0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800aee4:	3b01      	subs	r3, #1
 800aee6:	430a      	orrs	r2, r1
 800aee8:	e789      	b.n	800adfe <__kernel_rem_pio2+0x286>
 800aeea:	3301      	adds	r3, #1
 800aeec:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800aef0:	2900      	cmp	r1, #0
 800aef2:	d0fa      	beq.n	800aeea <__kernel_rem_pio2+0x372>
 800aef4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aef6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800aefa:	446a      	add	r2, sp
 800aefc:	3a98      	subs	r2, #152	; 0x98
 800aefe:	920a      	str	r2, [sp, #40]	; 0x28
 800af00:	9a08      	ldr	r2, [sp, #32]
 800af02:	18e3      	adds	r3, r4, r3
 800af04:	18a5      	adds	r5, r4, r2
 800af06:	aa22      	add	r2, sp, #136	; 0x88
 800af08:	f104 0801 	add.w	r8, r4, #1
 800af0c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800af10:	9304      	str	r3, [sp, #16]
 800af12:	9b04      	ldr	r3, [sp, #16]
 800af14:	4543      	cmp	r3, r8
 800af16:	da04      	bge.n	800af22 <__kernel_rem_pio2+0x3aa>
 800af18:	461c      	mov	r4, r3
 800af1a:	e6a3      	b.n	800ac64 <__kernel_rem_pio2+0xec>
 800af1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af1e:	2301      	movs	r3, #1
 800af20:	e7e4      	b.n	800aeec <__kernel_rem_pio2+0x374>
 800af22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af24:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800af28:	f7f5 faa8 	bl	800047c <__aeabi_i2d>
 800af2c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800af30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af32:	46ab      	mov	fp, r5
 800af34:	461c      	mov	r4, r3
 800af36:	f04f 0900 	mov.w	r9, #0
 800af3a:	2600      	movs	r6, #0
 800af3c:	2700      	movs	r7, #0
 800af3e:	9b06      	ldr	r3, [sp, #24]
 800af40:	4599      	cmp	r9, r3
 800af42:	dd06      	ble.n	800af52 <__kernel_rem_pio2+0x3da>
 800af44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af46:	e8e3 6702 	strd	r6, r7, [r3], #8
 800af4a:	f108 0801 	add.w	r8, r8, #1
 800af4e:	930a      	str	r3, [sp, #40]	; 0x28
 800af50:	e7df      	b.n	800af12 <__kernel_rem_pio2+0x39a>
 800af52:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800af56:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800af5a:	f7f5 faf9 	bl	8000550 <__aeabi_dmul>
 800af5e:	4602      	mov	r2, r0
 800af60:	460b      	mov	r3, r1
 800af62:	4630      	mov	r0, r6
 800af64:	4639      	mov	r1, r7
 800af66:	f7f5 f93d 	bl	80001e4 <__adddf3>
 800af6a:	f109 0901 	add.w	r9, r9, #1
 800af6e:	4606      	mov	r6, r0
 800af70:	460f      	mov	r7, r1
 800af72:	e7e4      	b.n	800af3e <__kernel_rem_pio2+0x3c6>
 800af74:	3d01      	subs	r5, #1
 800af76:	e748      	b.n	800ae0a <__kernel_rem_pio2+0x292>
 800af78:	ec47 6b10 	vmov	d0, r6, r7
 800af7c:	f1ca 0000 	rsb	r0, sl, #0
 800af80:	f000 fd6a 	bl	800ba58 <scalbn>
 800af84:	ec57 6b10 	vmov	r6, r7, d0
 800af88:	4ba0      	ldr	r3, [pc, #640]	; (800b20c <__kernel_rem_pio2+0x694>)
 800af8a:	ee10 0a10 	vmov	r0, s0
 800af8e:	2200      	movs	r2, #0
 800af90:	4639      	mov	r1, r7
 800af92:	f7f5 fd63 	bl	8000a5c <__aeabi_dcmpge>
 800af96:	b1f8      	cbz	r0, 800afd8 <__kernel_rem_pio2+0x460>
 800af98:	4b9d      	ldr	r3, [pc, #628]	; (800b210 <__kernel_rem_pio2+0x698>)
 800af9a:	2200      	movs	r2, #0
 800af9c:	4630      	mov	r0, r6
 800af9e:	4639      	mov	r1, r7
 800afa0:	f7f5 fad6 	bl	8000550 <__aeabi_dmul>
 800afa4:	f7f5 fd84 	bl	8000ab0 <__aeabi_d2iz>
 800afa8:	4680      	mov	r8, r0
 800afaa:	f7f5 fa67 	bl	800047c <__aeabi_i2d>
 800afae:	4b97      	ldr	r3, [pc, #604]	; (800b20c <__kernel_rem_pio2+0x694>)
 800afb0:	2200      	movs	r2, #0
 800afb2:	f7f5 facd 	bl	8000550 <__aeabi_dmul>
 800afb6:	460b      	mov	r3, r1
 800afb8:	4602      	mov	r2, r0
 800afba:	4639      	mov	r1, r7
 800afbc:	4630      	mov	r0, r6
 800afbe:	f7f5 f90f 	bl	80001e0 <__aeabi_dsub>
 800afc2:	f7f5 fd75 	bl	8000ab0 <__aeabi_d2iz>
 800afc6:	1c65      	adds	r5, r4, #1
 800afc8:	ab0e      	add	r3, sp, #56	; 0x38
 800afca:	f10a 0a18 	add.w	sl, sl, #24
 800afce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800afd2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800afd6:	e720      	b.n	800ae1a <__kernel_rem_pio2+0x2a2>
 800afd8:	4630      	mov	r0, r6
 800afda:	4639      	mov	r1, r7
 800afdc:	f7f5 fd68 	bl	8000ab0 <__aeabi_d2iz>
 800afe0:	ab0e      	add	r3, sp, #56	; 0x38
 800afe2:	4625      	mov	r5, r4
 800afe4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800afe8:	e717      	b.n	800ae1a <__kernel_rem_pio2+0x2a2>
 800afea:	ab0e      	add	r3, sp, #56	; 0x38
 800afec:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800aff0:	f7f5 fa44 	bl	800047c <__aeabi_i2d>
 800aff4:	4632      	mov	r2, r6
 800aff6:	463b      	mov	r3, r7
 800aff8:	f7f5 faaa 	bl	8000550 <__aeabi_dmul>
 800affc:	4b84      	ldr	r3, [pc, #528]	; (800b210 <__kernel_rem_pio2+0x698>)
 800affe:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800b002:	2200      	movs	r2, #0
 800b004:	4630      	mov	r0, r6
 800b006:	4639      	mov	r1, r7
 800b008:	f7f5 faa2 	bl	8000550 <__aeabi_dmul>
 800b00c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b010:	4606      	mov	r6, r0
 800b012:	460f      	mov	r7, r1
 800b014:	e70f      	b.n	800ae36 <__kernel_rem_pio2+0x2be>
 800b016:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b01a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b01e:	f7f5 fa97 	bl	8000550 <__aeabi_dmul>
 800b022:	4602      	mov	r2, r0
 800b024:	460b      	mov	r3, r1
 800b026:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b02a:	f7f5 f8db 	bl	80001e4 <__adddf3>
 800b02e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b032:	f108 0801 	add.w	r8, r8, #1
 800b036:	9b02      	ldr	r3, [sp, #8]
 800b038:	4598      	cmp	r8, r3
 800b03a:	dc01      	bgt.n	800b040 <__kernel_rem_pio2+0x4c8>
 800b03c:	45b8      	cmp	r8, r7
 800b03e:	ddea      	ble.n	800b016 <__kernel_rem_pio2+0x49e>
 800b040:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b044:	ab4a      	add	r3, sp, #296	; 0x128
 800b046:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b04a:	ed87 7b00 	vstr	d7, [r7]
 800b04e:	3e01      	subs	r6, #1
 800b050:	e6f8      	b.n	800ae44 <__kernel_rem_pio2+0x2cc>
 800b052:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b054:	2b02      	cmp	r3, #2
 800b056:	dc0b      	bgt.n	800b070 <__kernel_rem_pio2+0x4f8>
 800b058:	2b00      	cmp	r3, #0
 800b05a:	dc35      	bgt.n	800b0c8 <__kernel_rem_pio2+0x550>
 800b05c:	d059      	beq.n	800b112 <__kernel_rem_pio2+0x59a>
 800b05e:	9b04      	ldr	r3, [sp, #16]
 800b060:	f003 0007 	and.w	r0, r3, #7
 800b064:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b068:	ecbd 8b02 	vpop	{d8}
 800b06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b070:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b072:	2b03      	cmp	r3, #3
 800b074:	d1f3      	bne.n	800b05e <__kernel_rem_pio2+0x4e6>
 800b076:	ab4a      	add	r3, sp, #296	; 0x128
 800b078:	4423      	add	r3, r4
 800b07a:	9306      	str	r3, [sp, #24]
 800b07c:	461c      	mov	r4, r3
 800b07e:	469a      	mov	sl, r3
 800b080:	9502      	str	r5, [sp, #8]
 800b082:	9b02      	ldr	r3, [sp, #8]
 800b084:	2b00      	cmp	r3, #0
 800b086:	f1aa 0a08 	sub.w	sl, sl, #8
 800b08a:	dc6b      	bgt.n	800b164 <__kernel_rem_pio2+0x5ec>
 800b08c:	46aa      	mov	sl, r5
 800b08e:	f1ba 0f01 	cmp.w	sl, #1
 800b092:	f1a4 0408 	sub.w	r4, r4, #8
 800b096:	f300 8085 	bgt.w	800b1a4 <__kernel_rem_pio2+0x62c>
 800b09a:	9c06      	ldr	r4, [sp, #24]
 800b09c:	2000      	movs	r0, #0
 800b09e:	3408      	adds	r4, #8
 800b0a0:	2100      	movs	r1, #0
 800b0a2:	2d01      	cmp	r5, #1
 800b0a4:	f300 809d 	bgt.w	800b1e2 <__kernel_rem_pio2+0x66a>
 800b0a8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800b0ac:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800b0b0:	f1bb 0f00 	cmp.w	fp, #0
 800b0b4:	f040 809b 	bne.w	800b1ee <__kernel_rem_pio2+0x676>
 800b0b8:	9b01      	ldr	r3, [sp, #4]
 800b0ba:	e9c3 5600 	strd	r5, r6, [r3]
 800b0be:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b0c2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b0c6:	e7ca      	b.n	800b05e <__kernel_rem_pio2+0x4e6>
 800b0c8:	3408      	adds	r4, #8
 800b0ca:	ab4a      	add	r3, sp, #296	; 0x128
 800b0cc:	441c      	add	r4, r3
 800b0ce:	462e      	mov	r6, r5
 800b0d0:	2000      	movs	r0, #0
 800b0d2:	2100      	movs	r1, #0
 800b0d4:	2e00      	cmp	r6, #0
 800b0d6:	da36      	bge.n	800b146 <__kernel_rem_pio2+0x5ce>
 800b0d8:	f1bb 0f00 	cmp.w	fp, #0
 800b0dc:	d039      	beq.n	800b152 <__kernel_rem_pio2+0x5da>
 800b0de:	4602      	mov	r2, r0
 800b0e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0e4:	9c01      	ldr	r4, [sp, #4]
 800b0e6:	e9c4 2300 	strd	r2, r3, [r4]
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b0f2:	f7f5 f875 	bl	80001e0 <__aeabi_dsub>
 800b0f6:	ae4c      	add	r6, sp, #304	; 0x130
 800b0f8:	2401      	movs	r4, #1
 800b0fa:	42a5      	cmp	r5, r4
 800b0fc:	da2c      	bge.n	800b158 <__kernel_rem_pio2+0x5e0>
 800b0fe:	f1bb 0f00 	cmp.w	fp, #0
 800b102:	d002      	beq.n	800b10a <__kernel_rem_pio2+0x592>
 800b104:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b108:	4619      	mov	r1, r3
 800b10a:	9b01      	ldr	r3, [sp, #4]
 800b10c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b110:	e7a5      	b.n	800b05e <__kernel_rem_pio2+0x4e6>
 800b112:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800b116:	eb0d 0403 	add.w	r4, sp, r3
 800b11a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b11e:	2000      	movs	r0, #0
 800b120:	2100      	movs	r1, #0
 800b122:	2d00      	cmp	r5, #0
 800b124:	da09      	bge.n	800b13a <__kernel_rem_pio2+0x5c2>
 800b126:	f1bb 0f00 	cmp.w	fp, #0
 800b12a:	d002      	beq.n	800b132 <__kernel_rem_pio2+0x5ba>
 800b12c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b130:	4619      	mov	r1, r3
 800b132:	9b01      	ldr	r3, [sp, #4]
 800b134:	e9c3 0100 	strd	r0, r1, [r3]
 800b138:	e791      	b.n	800b05e <__kernel_rem_pio2+0x4e6>
 800b13a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b13e:	f7f5 f851 	bl	80001e4 <__adddf3>
 800b142:	3d01      	subs	r5, #1
 800b144:	e7ed      	b.n	800b122 <__kernel_rem_pio2+0x5aa>
 800b146:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b14a:	f7f5 f84b 	bl	80001e4 <__adddf3>
 800b14e:	3e01      	subs	r6, #1
 800b150:	e7c0      	b.n	800b0d4 <__kernel_rem_pio2+0x55c>
 800b152:	4602      	mov	r2, r0
 800b154:	460b      	mov	r3, r1
 800b156:	e7c5      	b.n	800b0e4 <__kernel_rem_pio2+0x56c>
 800b158:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b15c:	f7f5 f842 	bl	80001e4 <__adddf3>
 800b160:	3401      	adds	r4, #1
 800b162:	e7ca      	b.n	800b0fa <__kernel_rem_pio2+0x582>
 800b164:	e9da 8900 	ldrd	r8, r9, [sl]
 800b168:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b16c:	9b02      	ldr	r3, [sp, #8]
 800b16e:	3b01      	subs	r3, #1
 800b170:	9302      	str	r3, [sp, #8]
 800b172:	4632      	mov	r2, r6
 800b174:	463b      	mov	r3, r7
 800b176:	4640      	mov	r0, r8
 800b178:	4649      	mov	r1, r9
 800b17a:	f7f5 f833 	bl	80001e4 <__adddf3>
 800b17e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b182:	4602      	mov	r2, r0
 800b184:	460b      	mov	r3, r1
 800b186:	4640      	mov	r0, r8
 800b188:	4649      	mov	r1, r9
 800b18a:	f7f5 f829 	bl	80001e0 <__aeabi_dsub>
 800b18e:	4632      	mov	r2, r6
 800b190:	463b      	mov	r3, r7
 800b192:	f7f5 f827 	bl	80001e4 <__adddf3>
 800b196:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b19a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b19e:	ed8a 7b00 	vstr	d7, [sl]
 800b1a2:	e76e      	b.n	800b082 <__kernel_rem_pio2+0x50a>
 800b1a4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b1a8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800b1ac:	4640      	mov	r0, r8
 800b1ae:	4632      	mov	r2, r6
 800b1b0:	463b      	mov	r3, r7
 800b1b2:	4649      	mov	r1, r9
 800b1b4:	f7f5 f816 	bl	80001e4 <__adddf3>
 800b1b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1bc:	4602      	mov	r2, r0
 800b1be:	460b      	mov	r3, r1
 800b1c0:	4640      	mov	r0, r8
 800b1c2:	4649      	mov	r1, r9
 800b1c4:	f7f5 f80c 	bl	80001e0 <__aeabi_dsub>
 800b1c8:	4632      	mov	r2, r6
 800b1ca:	463b      	mov	r3, r7
 800b1cc:	f7f5 f80a 	bl	80001e4 <__adddf3>
 800b1d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b1d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b1d8:	ed84 7b00 	vstr	d7, [r4]
 800b1dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b1e0:	e755      	b.n	800b08e <__kernel_rem_pio2+0x516>
 800b1e2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b1e6:	f7f4 fffd 	bl	80001e4 <__adddf3>
 800b1ea:	3d01      	subs	r5, #1
 800b1ec:	e759      	b.n	800b0a2 <__kernel_rem_pio2+0x52a>
 800b1ee:	9b01      	ldr	r3, [sp, #4]
 800b1f0:	9a01      	ldr	r2, [sp, #4]
 800b1f2:	601d      	str	r5, [r3, #0]
 800b1f4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b1f8:	605c      	str	r4, [r3, #4]
 800b1fa:	609f      	str	r7, [r3, #8]
 800b1fc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b200:	60d3      	str	r3, [r2, #12]
 800b202:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b206:	6110      	str	r0, [r2, #16]
 800b208:	6153      	str	r3, [r2, #20]
 800b20a:	e728      	b.n	800b05e <__kernel_rem_pio2+0x4e6>
 800b20c:	41700000 	.word	0x41700000
 800b210:	3e700000 	.word	0x3e700000
 800b214:	00000000 	.word	0x00000000

0800b218 <__kernel_sin>:
 800b218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b21c:	ed2d 8b04 	vpush	{d8-d9}
 800b220:	eeb0 8a41 	vmov.f32	s16, s2
 800b224:	eef0 8a61 	vmov.f32	s17, s3
 800b228:	ec55 4b10 	vmov	r4, r5, d0
 800b22c:	b083      	sub	sp, #12
 800b22e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b232:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b236:	9001      	str	r0, [sp, #4]
 800b238:	da06      	bge.n	800b248 <__kernel_sin+0x30>
 800b23a:	ee10 0a10 	vmov	r0, s0
 800b23e:	4629      	mov	r1, r5
 800b240:	f7f5 fc36 	bl	8000ab0 <__aeabi_d2iz>
 800b244:	2800      	cmp	r0, #0
 800b246:	d051      	beq.n	800b2ec <__kernel_sin+0xd4>
 800b248:	4622      	mov	r2, r4
 800b24a:	462b      	mov	r3, r5
 800b24c:	4620      	mov	r0, r4
 800b24e:	4629      	mov	r1, r5
 800b250:	f7f5 f97e 	bl	8000550 <__aeabi_dmul>
 800b254:	4682      	mov	sl, r0
 800b256:	468b      	mov	fp, r1
 800b258:	4602      	mov	r2, r0
 800b25a:	460b      	mov	r3, r1
 800b25c:	4620      	mov	r0, r4
 800b25e:	4629      	mov	r1, r5
 800b260:	f7f5 f976 	bl	8000550 <__aeabi_dmul>
 800b264:	a341      	add	r3, pc, #260	; (adr r3, 800b36c <__kernel_sin+0x154>)
 800b266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26a:	4680      	mov	r8, r0
 800b26c:	4689      	mov	r9, r1
 800b26e:	4650      	mov	r0, sl
 800b270:	4659      	mov	r1, fp
 800b272:	f7f5 f96d 	bl	8000550 <__aeabi_dmul>
 800b276:	a33f      	add	r3, pc, #252	; (adr r3, 800b374 <__kernel_sin+0x15c>)
 800b278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27c:	f7f4 ffb0 	bl	80001e0 <__aeabi_dsub>
 800b280:	4652      	mov	r2, sl
 800b282:	465b      	mov	r3, fp
 800b284:	f7f5 f964 	bl	8000550 <__aeabi_dmul>
 800b288:	a33c      	add	r3, pc, #240	; (adr r3, 800b37c <__kernel_sin+0x164>)
 800b28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28e:	f7f4 ffa9 	bl	80001e4 <__adddf3>
 800b292:	4652      	mov	r2, sl
 800b294:	465b      	mov	r3, fp
 800b296:	f7f5 f95b 	bl	8000550 <__aeabi_dmul>
 800b29a:	a33a      	add	r3, pc, #232	; (adr r3, 800b384 <__kernel_sin+0x16c>)
 800b29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a0:	f7f4 ff9e 	bl	80001e0 <__aeabi_dsub>
 800b2a4:	4652      	mov	r2, sl
 800b2a6:	465b      	mov	r3, fp
 800b2a8:	f7f5 f952 	bl	8000550 <__aeabi_dmul>
 800b2ac:	a337      	add	r3, pc, #220	; (adr r3, 800b38c <__kernel_sin+0x174>)
 800b2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b2:	f7f4 ff97 	bl	80001e4 <__adddf3>
 800b2b6:	9b01      	ldr	r3, [sp, #4]
 800b2b8:	4606      	mov	r6, r0
 800b2ba:	460f      	mov	r7, r1
 800b2bc:	b9eb      	cbnz	r3, 800b2fa <__kernel_sin+0xe2>
 800b2be:	4602      	mov	r2, r0
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	4650      	mov	r0, sl
 800b2c4:	4659      	mov	r1, fp
 800b2c6:	f7f5 f943 	bl	8000550 <__aeabi_dmul>
 800b2ca:	a325      	add	r3, pc, #148	; (adr r3, 800b360 <__kernel_sin+0x148>)
 800b2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d0:	f7f4 ff86 	bl	80001e0 <__aeabi_dsub>
 800b2d4:	4642      	mov	r2, r8
 800b2d6:	464b      	mov	r3, r9
 800b2d8:	f7f5 f93a 	bl	8000550 <__aeabi_dmul>
 800b2dc:	4602      	mov	r2, r0
 800b2de:	460b      	mov	r3, r1
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	4629      	mov	r1, r5
 800b2e4:	f7f4 ff7e 	bl	80001e4 <__adddf3>
 800b2e8:	4604      	mov	r4, r0
 800b2ea:	460d      	mov	r5, r1
 800b2ec:	ec45 4b10 	vmov	d0, r4, r5
 800b2f0:	b003      	add	sp, #12
 800b2f2:	ecbd 8b04 	vpop	{d8-d9}
 800b2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2fa:	4b1b      	ldr	r3, [pc, #108]	; (800b368 <__kernel_sin+0x150>)
 800b2fc:	ec51 0b18 	vmov	r0, r1, d8
 800b300:	2200      	movs	r2, #0
 800b302:	f7f5 f925 	bl	8000550 <__aeabi_dmul>
 800b306:	4632      	mov	r2, r6
 800b308:	ec41 0b19 	vmov	d9, r0, r1
 800b30c:	463b      	mov	r3, r7
 800b30e:	4640      	mov	r0, r8
 800b310:	4649      	mov	r1, r9
 800b312:	f7f5 f91d 	bl	8000550 <__aeabi_dmul>
 800b316:	4602      	mov	r2, r0
 800b318:	460b      	mov	r3, r1
 800b31a:	ec51 0b19 	vmov	r0, r1, d9
 800b31e:	f7f4 ff5f 	bl	80001e0 <__aeabi_dsub>
 800b322:	4652      	mov	r2, sl
 800b324:	465b      	mov	r3, fp
 800b326:	f7f5 f913 	bl	8000550 <__aeabi_dmul>
 800b32a:	ec53 2b18 	vmov	r2, r3, d8
 800b32e:	f7f4 ff57 	bl	80001e0 <__aeabi_dsub>
 800b332:	a30b      	add	r3, pc, #44	; (adr r3, 800b360 <__kernel_sin+0x148>)
 800b334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b338:	4606      	mov	r6, r0
 800b33a:	460f      	mov	r7, r1
 800b33c:	4640      	mov	r0, r8
 800b33e:	4649      	mov	r1, r9
 800b340:	f7f5 f906 	bl	8000550 <__aeabi_dmul>
 800b344:	4602      	mov	r2, r0
 800b346:	460b      	mov	r3, r1
 800b348:	4630      	mov	r0, r6
 800b34a:	4639      	mov	r1, r7
 800b34c:	f7f4 ff4a 	bl	80001e4 <__adddf3>
 800b350:	4602      	mov	r2, r0
 800b352:	460b      	mov	r3, r1
 800b354:	4620      	mov	r0, r4
 800b356:	4629      	mov	r1, r5
 800b358:	f7f4 ff42 	bl	80001e0 <__aeabi_dsub>
 800b35c:	e7c4      	b.n	800b2e8 <__kernel_sin+0xd0>
 800b35e:	bf00      	nop
 800b360:	55555549 	.word	0x55555549
 800b364:	3fc55555 	.word	0x3fc55555
 800b368:	3fe00000 	.word	0x3fe00000
 800b36c:	5acfd57c 	.word	0x5acfd57c
 800b370:	3de5d93a 	.word	0x3de5d93a
 800b374:	8a2b9ceb 	.word	0x8a2b9ceb
 800b378:	3e5ae5e6 	.word	0x3e5ae5e6
 800b37c:	57b1fe7d 	.word	0x57b1fe7d
 800b380:	3ec71de3 	.word	0x3ec71de3
 800b384:	19c161d5 	.word	0x19c161d5
 800b388:	3f2a01a0 	.word	0x3f2a01a0
 800b38c:	1110f8a6 	.word	0x1110f8a6
 800b390:	3f811111 	.word	0x3f811111

0800b394 <__kernel_cosf>:
 800b394:	ee10 3a10 	vmov	r3, s0
 800b398:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b39c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b3a0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b3a4:	da05      	bge.n	800b3b2 <__kernel_cosf+0x1e>
 800b3a6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b3aa:	ee17 2a90 	vmov	r2, s15
 800b3ae:	2a00      	cmp	r2, #0
 800b3b0:	d03d      	beq.n	800b42e <__kernel_cosf+0x9a>
 800b3b2:	ee60 5a00 	vmul.f32	s11, s0, s0
 800b3b6:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b434 <__kernel_cosf+0xa0>
 800b3ba:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800b438 <__kernel_cosf+0xa4>
 800b3be:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800b43c <__kernel_cosf+0xa8>
 800b3c2:	4a1f      	ldr	r2, [pc, #124]	; (800b440 <__kernel_cosf+0xac>)
 800b3c4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800b444 <__kernel_cosf+0xb0>
 800b3ce:	eee7 7a25 	vfma.f32	s15, s14, s11
 800b3d2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800b448 <__kernel_cosf+0xb4>
 800b3d6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800b3da:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800b44c <__kernel_cosf+0xb8>
 800b3de:	eee7 7a25 	vfma.f32	s15, s14, s11
 800b3e2:	eeb0 7a66 	vmov.f32	s14, s13
 800b3e6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800b3ea:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b3ee:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800b3f2:	ee67 6a25 	vmul.f32	s13, s14, s11
 800b3f6:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800b3fa:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b3fe:	dc04      	bgt.n	800b40a <__kernel_cosf+0x76>
 800b400:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800b404:	ee36 0a47 	vsub.f32	s0, s12, s14
 800b408:	4770      	bx	lr
 800b40a:	4a11      	ldr	r2, [pc, #68]	; (800b450 <__kernel_cosf+0xbc>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	bfda      	itte	le
 800b410:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800b414:	ee06 3a90 	vmovle	s13, r3
 800b418:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800b41c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b420:	ee36 0a66 	vsub.f32	s0, s12, s13
 800b424:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b428:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b42c:	4770      	bx	lr
 800b42e:	eeb0 0a46 	vmov.f32	s0, s12
 800b432:	4770      	bx	lr
 800b434:	ad47d74e 	.word	0xad47d74e
 800b438:	310f74f6 	.word	0x310f74f6
 800b43c:	3d2aaaab 	.word	0x3d2aaaab
 800b440:	3e999999 	.word	0x3e999999
 800b444:	b493f27c 	.word	0xb493f27c
 800b448:	37d00d01 	.word	0x37d00d01
 800b44c:	bab60b61 	.word	0xbab60b61
 800b450:	3f480000 	.word	0x3f480000

0800b454 <__kernel_rem_pio2f>:
 800b454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b458:	ed2d 8b04 	vpush	{d8-d9}
 800b45c:	b0d9      	sub	sp, #356	; 0x164
 800b45e:	4688      	mov	r8, r1
 800b460:	9002      	str	r0, [sp, #8]
 800b462:	49bb      	ldr	r1, [pc, #748]	; (800b750 <__kernel_rem_pio2f+0x2fc>)
 800b464:	9866      	ldr	r0, [sp, #408]	; 0x198
 800b466:	9301      	str	r3, [sp, #4]
 800b468:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800b46c:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800b470:	1e59      	subs	r1, r3, #1
 800b472:	1d13      	adds	r3, r2, #4
 800b474:	db27      	blt.n	800b4c6 <__kernel_rem_pio2f+0x72>
 800b476:	f1b2 0b03 	subs.w	fp, r2, #3
 800b47a:	bf48      	it	mi
 800b47c:	f102 0b04 	addmi.w	fp, r2, #4
 800b480:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800b484:	1c45      	adds	r5, r0, #1
 800b486:	00ec      	lsls	r4, r5, #3
 800b488:	1a47      	subs	r7, r0, r1
 800b48a:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800b760 <__kernel_rem_pio2f+0x30c>
 800b48e:	9403      	str	r4, [sp, #12]
 800b490:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800b494:	eb0a 0c01 	add.w	ip, sl, r1
 800b498:	ae1c      	add	r6, sp, #112	; 0x70
 800b49a:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800b49e:	2400      	movs	r4, #0
 800b4a0:	4564      	cmp	r4, ip
 800b4a2:	dd12      	ble.n	800b4ca <__kernel_rem_pio2f+0x76>
 800b4a4:	9b01      	ldr	r3, [sp, #4]
 800b4a6:	ac1c      	add	r4, sp, #112	; 0x70
 800b4a8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800b4ac:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800b4b0:	f04f 0c00 	mov.w	ip, #0
 800b4b4:	45d4      	cmp	ip, sl
 800b4b6:	dc27      	bgt.n	800b508 <__kernel_rem_pio2f+0xb4>
 800b4b8:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800b4bc:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800b760 <__kernel_rem_pio2f+0x30c>
 800b4c0:	4627      	mov	r7, r4
 800b4c2:	2600      	movs	r6, #0
 800b4c4:	e016      	b.n	800b4f4 <__kernel_rem_pio2f+0xa0>
 800b4c6:	2000      	movs	r0, #0
 800b4c8:	e7dc      	b.n	800b484 <__kernel_rem_pio2f+0x30>
 800b4ca:	42e7      	cmn	r7, r4
 800b4cc:	bf5d      	ittte	pl
 800b4ce:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800b4d2:	ee07 3a90 	vmovpl	s15, r3
 800b4d6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800b4da:	eef0 7a47 	vmovmi.f32	s15, s14
 800b4de:	ece6 7a01 	vstmia	r6!, {s15}
 800b4e2:	3401      	adds	r4, #1
 800b4e4:	e7dc      	b.n	800b4a0 <__kernel_rem_pio2f+0x4c>
 800b4e6:	ecf9 6a01 	vldmia	r9!, {s13}
 800b4ea:	ed97 7a00 	vldr	s14, [r7]
 800b4ee:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b4f2:	3601      	adds	r6, #1
 800b4f4:	428e      	cmp	r6, r1
 800b4f6:	f1a7 0704 	sub.w	r7, r7, #4
 800b4fa:	ddf4      	ble.n	800b4e6 <__kernel_rem_pio2f+0x92>
 800b4fc:	eceb 7a01 	vstmia	fp!, {s15}
 800b500:	f10c 0c01 	add.w	ip, ip, #1
 800b504:	3404      	adds	r4, #4
 800b506:	e7d5      	b.n	800b4b4 <__kernel_rem_pio2f+0x60>
 800b508:	ab08      	add	r3, sp, #32
 800b50a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800b50e:	eddf 8a93 	vldr	s17, [pc, #588]	; 800b75c <__kernel_rem_pio2f+0x308>
 800b512:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800b758 <__kernel_rem_pio2f+0x304>
 800b516:	9304      	str	r3, [sp, #16]
 800b518:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800b51c:	4656      	mov	r6, sl
 800b51e:	00b3      	lsls	r3, r6, #2
 800b520:	9305      	str	r3, [sp, #20]
 800b522:	ab58      	add	r3, sp, #352	; 0x160
 800b524:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800b528:	ac08      	add	r4, sp, #32
 800b52a:	ab44      	add	r3, sp, #272	; 0x110
 800b52c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800b530:	46a4      	mov	ip, r4
 800b532:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800b536:	4637      	mov	r7, r6
 800b538:	2f00      	cmp	r7, #0
 800b53a:	f1a0 0004 	sub.w	r0, r0, #4
 800b53e:	dc4f      	bgt.n	800b5e0 <__kernel_rem_pio2f+0x18c>
 800b540:	4628      	mov	r0, r5
 800b542:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800b546:	f000 fb5d 	bl	800bc04 <scalbnf>
 800b54a:	eeb0 8a40 	vmov.f32	s16, s0
 800b54e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800b552:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b556:	f000 fb0d 	bl	800bb74 <floorf>
 800b55a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800b55e:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b562:	2d00      	cmp	r5, #0
 800b564:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800b568:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b56c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800b570:	ee17 9a90 	vmov	r9, s15
 800b574:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b578:	dd44      	ble.n	800b604 <__kernel_rem_pio2f+0x1b0>
 800b57a:	f106 3cff 	add.w	ip, r6, #4294967295
 800b57e:	ab08      	add	r3, sp, #32
 800b580:	f1c5 0e08 	rsb	lr, r5, #8
 800b584:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800b588:	fa47 f00e 	asr.w	r0, r7, lr
 800b58c:	4481      	add	r9, r0
 800b58e:	fa00 f00e 	lsl.w	r0, r0, lr
 800b592:	1a3f      	subs	r7, r7, r0
 800b594:	f1c5 0007 	rsb	r0, r5, #7
 800b598:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800b59c:	4107      	asrs	r7, r0
 800b59e:	2f00      	cmp	r7, #0
 800b5a0:	dd3f      	ble.n	800b622 <__kernel_rem_pio2f+0x1ce>
 800b5a2:	f04f 0e00 	mov.w	lr, #0
 800b5a6:	f109 0901 	add.w	r9, r9, #1
 800b5aa:	4673      	mov	r3, lr
 800b5ac:	4576      	cmp	r6, lr
 800b5ae:	dc6b      	bgt.n	800b688 <__kernel_rem_pio2f+0x234>
 800b5b0:	2d00      	cmp	r5, #0
 800b5b2:	dd04      	ble.n	800b5be <__kernel_rem_pio2f+0x16a>
 800b5b4:	2d01      	cmp	r5, #1
 800b5b6:	d078      	beq.n	800b6aa <__kernel_rem_pio2f+0x256>
 800b5b8:	2d02      	cmp	r5, #2
 800b5ba:	f000 8081 	beq.w	800b6c0 <__kernel_rem_pio2f+0x26c>
 800b5be:	2f02      	cmp	r7, #2
 800b5c0:	d12f      	bne.n	800b622 <__kernel_rem_pio2f+0x1ce>
 800b5c2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b5c6:	ee30 8a48 	vsub.f32	s16, s0, s16
 800b5ca:	b353      	cbz	r3, 800b622 <__kernel_rem_pio2f+0x1ce>
 800b5cc:	4628      	mov	r0, r5
 800b5ce:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800b5d2:	f000 fb17 	bl	800bc04 <scalbnf>
 800b5d6:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800b5da:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b5de:	e020      	b.n	800b622 <__kernel_rem_pio2f+0x1ce>
 800b5e0:	ee60 7a28 	vmul.f32	s15, s0, s17
 800b5e4:	3f01      	subs	r7, #1
 800b5e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b5ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b5ee:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800b5f2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b5f6:	ecac 0a01 	vstmia	ip!, {s0}
 800b5fa:	ed90 0a00 	vldr	s0, [r0]
 800b5fe:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b602:	e799      	b.n	800b538 <__kernel_rem_pio2f+0xe4>
 800b604:	d105      	bne.n	800b612 <__kernel_rem_pio2f+0x1be>
 800b606:	1e70      	subs	r0, r6, #1
 800b608:	ab08      	add	r3, sp, #32
 800b60a:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800b60e:	11ff      	asrs	r7, r7, #7
 800b610:	e7c5      	b.n	800b59e <__kernel_rem_pio2f+0x14a>
 800b612:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b616:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b61a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b61e:	da31      	bge.n	800b684 <__kernel_rem_pio2f+0x230>
 800b620:	2700      	movs	r7, #0
 800b622:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b62a:	f040 809b 	bne.w	800b764 <__kernel_rem_pio2f+0x310>
 800b62e:	1e74      	subs	r4, r6, #1
 800b630:	46a4      	mov	ip, r4
 800b632:	2000      	movs	r0, #0
 800b634:	45d4      	cmp	ip, sl
 800b636:	da4a      	bge.n	800b6ce <__kernel_rem_pio2f+0x27a>
 800b638:	2800      	cmp	r0, #0
 800b63a:	d07a      	beq.n	800b732 <__kernel_rem_pio2f+0x2de>
 800b63c:	ab08      	add	r3, sp, #32
 800b63e:	3d08      	subs	r5, #8
 800b640:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b644:	2b00      	cmp	r3, #0
 800b646:	f000 8081 	beq.w	800b74c <__kernel_rem_pio2f+0x2f8>
 800b64a:	4628      	mov	r0, r5
 800b64c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b650:	00a5      	lsls	r5, r4, #2
 800b652:	f000 fad7 	bl	800bc04 <scalbnf>
 800b656:	aa44      	add	r2, sp, #272	; 0x110
 800b658:	1d2b      	adds	r3, r5, #4
 800b65a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800b75c <__kernel_rem_pio2f+0x308>
 800b65e:	18d1      	adds	r1, r2, r3
 800b660:	4622      	mov	r2, r4
 800b662:	2a00      	cmp	r2, #0
 800b664:	f280 80ae 	bge.w	800b7c4 <__kernel_rem_pio2f+0x370>
 800b668:	4622      	mov	r2, r4
 800b66a:	2a00      	cmp	r2, #0
 800b66c:	f2c0 80cc 	blt.w	800b808 <__kernel_rem_pio2f+0x3b4>
 800b670:	a944      	add	r1, sp, #272	; 0x110
 800b672:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800b676:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800b754 <__kernel_rem_pio2f+0x300>
 800b67a:	eddf 7a39 	vldr	s15, [pc, #228]	; 800b760 <__kernel_rem_pio2f+0x30c>
 800b67e:	2000      	movs	r0, #0
 800b680:	1aa1      	subs	r1, r4, r2
 800b682:	e0b6      	b.n	800b7f2 <__kernel_rem_pio2f+0x39e>
 800b684:	2702      	movs	r7, #2
 800b686:	e78c      	b.n	800b5a2 <__kernel_rem_pio2f+0x14e>
 800b688:	6820      	ldr	r0, [r4, #0]
 800b68a:	b94b      	cbnz	r3, 800b6a0 <__kernel_rem_pio2f+0x24c>
 800b68c:	b118      	cbz	r0, 800b696 <__kernel_rem_pio2f+0x242>
 800b68e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800b692:	6020      	str	r0, [r4, #0]
 800b694:	2001      	movs	r0, #1
 800b696:	f10e 0e01 	add.w	lr, lr, #1
 800b69a:	3404      	adds	r4, #4
 800b69c:	4603      	mov	r3, r0
 800b69e:	e785      	b.n	800b5ac <__kernel_rem_pio2f+0x158>
 800b6a0:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800b6a4:	6020      	str	r0, [r4, #0]
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	e7f5      	b.n	800b696 <__kernel_rem_pio2f+0x242>
 800b6aa:	1e74      	subs	r4, r6, #1
 800b6ac:	a808      	add	r0, sp, #32
 800b6ae:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800b6b2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800b6b6:	f10d 0c20 	add.w	ip, sp, #32
 800b6ba:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800b6be:	e77e      	b.n	800b5be <__kernel_rem_pio2f+0x16a>
 800b6c0:	1e74      	subs	r4, r6, #1
 800b6c2:	a808      	add	r0, sp, #32
 800b6c4:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800b6c8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800b6cc:	e7f3      	b.n	800b6b6 <__kernel_rem_pio2f+0x262>
 800b6ce:	ab08      	add	r3, sp, #32
 800b6d0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800b6d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b6d8:	4318      	orrs	r0, r3
 800b6da:	e7ab      	b.n	800b634 <__kernel_rem_pio2f+0x1e0>
 800b6dc:	f10c 0c01 	add.w	ip, ip, #1
 800b6e0:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800b6e4:	2c00      	cmp	r4, #0
 800b6e6:	d0f9      	beq.n	800b6dc <__kernel_rem_pio2f+0x288>
 800b6e8:	9b05      	ldr	r3, [sp, #20]
 800b6ea:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800b6ee:	eb0d 0003 	add.w	r0, sp, r3
 800b6f2:	9b01      	ldr	r3, [sp, #4]
 800b6f4:	18f4      	adds	r4, r6, r3
 800b6f6:	ab1c      	add	r3, sp, #112	; 0x70
 800b6f8:	1c77      	adds	r7, r6, #1
 800b6fa:	384c      	subs	r0, #76	; 0x4c
 800b6fc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b700:	4466      	add	r6, ip
 800b702:	42be      	cmp	r6, r7
 800b704:	f6ff af0b 	blt.w	800b51e <__kernel_rem_pio2f+0xca>
 800b708:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800b70c:	f8dd e008 	ldr.w	lr, [sp, #8]
 800b710:	ee07 3a90 	vmov	s15, r3
 800b714:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b718:	f04f 0c00 	mov.w	ip, #0
 800b71c:	ece4 7a01 	vstmia	r4!, {s15}
 800b720:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800b760 <__kernel_rem_pio2f+0x30c>
 800b724:	46a1      	mov	r9, r4
 800b726:	458c      	cmp	ip, r1
 800b728:	dd07      	ble.n	800b73a <__kernel_rem_pio2f+0x2e6>
 800b72a:	ece0 7a01 	vstmia	r0!, {s15}
 800b72e:	3701      	adds	r7, #1
 800b730:	e7e7      	b.n	800b702 <__kernel_rem_pio2f+0x2ae>
 800b732:	9804      	ldr	r0, [sp, #16]
 800b734:	f04f 0c01 	mov.w	ip, #1
 800b738:	e7d2      	b.n	800b6e0 <__kernel_rem_pio2f+0x28c>
 800b73a:	ecfe 6a01 	vldmia	lr!, {s13}
 800b73e:	ed39 7a01 	vldmdb	r9!, {s14}
 800b742:	f10c 0c01 	add.w	ip, ip, #1
 800b746:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b74a:	e7ec      	b.n	800b726 <__kernel_rem_pio2f+0x2d2>
 800b74c:	3c01      	subs	r4, #1
 800b74e:	e775      	b.n	800b63c <__kernel_rem_pio2f+0x1e8>
 800b750:	0800c4d4 	.word	0x0800c4d4
 800b754:	0800c4a8 	.word	0x0800c4a8
 800b758:	43800000 	.word	0x43800000
 800b75c:	3b800000 	.word	0x3b800000
 800b760:	00000000 	.word	0x00000000
 800b764:	9b03      	ldr	r3, [sp, #12]
 800b766:	eeb0 0a48 	vmov.f32	s0, s16
 800b76a:	1a98      	subs	r0, r3, r2
 800b76c:	f000 fa4a 	bl	800bc04 <scalbnf>
 800b770:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800b758 <__kernel_rem_pio2f+0x304>
 800b774:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800b778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b77c:	db19      	blt.n	800b7b2 <__kernel_rem_pio2f+0x35e>
 800b77e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800b75c <__kernel_rem_pio2f+0x308>
 800b782:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b786:	aa08      	add	r2, sp, #32
 800b788:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b78c:	1c74      	adds	r4, r6, #1
 800b78e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b792:	3508      	adds	r5, #8
 800b794:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800b798:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b79c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b7a0:	ee10 3a10 	vmov	r3, s0
 800b7a4:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800b7a8:	ee17 3a90 	vmov	r3, s15
 800b7ac:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800b7b0:	e74b      	b.n	800b64a <__kernel_rem_pio2f+0x1f6>
 800b7b2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b7b6:	aa08      	add	r2, sp, #32
 800b7b8:	ee10 3a10 	vmov	r3, s0
 800b7bc:	4634      	mov	r4, r6
 800b7be:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800b7c2:	e742      	b.n	800b64a <__kernel_rem_pio2f+0x1f6>
 800b7c4:	a808      	add	r0, sp, #32
 800b7c6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800b7ca:	9001      	str	r0, [sp, #4]
 800b7cc:	ee07 0a90 	vmov	s15, r0
 800b7d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7d4:	3a01      	subs	r2, #1
 800b7d6:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b7da:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b7de:	ed61 7a01 	vstmdb	r1!, {s15}
 800b7e2:	e73e      	b.n	800b662 <__kernel_rem_pio2f+0x20e>
 800b7e4:	ecfc 6a01 	vldmia	ip!, {s13}
 800b7e8:	ecb6 7a01 	vldmia	r6!, {s14}
 800b7ec:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b7f0:	3001      	adds	r0, #1
 800b7f2:	4550      	cmp	r0, sl
 800b7f4:	dc01      	bgt.n	800b7fa <__kernel_rem_pio2f+0x3a6>
 800b7f6:	4288      	cmp	r0, r1
 800b7f8:	ddf4      	ble.n	800b7e4 <__kernel_rem_pio2f+0x390>
 800b7fa:	a858      	add	r0, sp, #352	; 0x160
 800b7fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b800:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800b804:	3a01      	subs	r2, #1
 800b806:	e730      	b.n	800b66a <__kernel_rem_pio2f+0x216>
 800b808:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800b80a:	2a02      	cmp	r2, #2
 800b80c:	dc09      	bgt.n	800b822 <__kernel_rem_pio2f+0x3ce>
 800b80e:	2a00      	cmp	r2, #0
 800b810:	dc2a      	bgt.n	800b868 <__kernel_rem_pio2f+0x414>
 800b812:	d043      	beq.n	800b89c <__kernel_rem_pio2f+0x448>
 800b814:	f009 0007 	and.w	r0, r9, #7
 800b818:	b059      	add	sp, #356	; 0x164
 800b81a:	ecbd 8b04 	vpop	{d8-d9}
 800b81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b822:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800b824:	2b03      	cmp	r3, #3
 800b826:	d1f5      	bne.n	800b814 <__kernel_rem_pio2f+0x3c0>
 800b828:	ab30      	add	r3, sp, #192	; 0xc0
 800b82a:	442b      	add	r3, r5
 800b82c:	461a      	mov	r2, r3
 800b82e:	4619      	mov	r1, r3
 800b830:	4620      	mov	r0, r4
 800b832:	2800      	cmp	r0, #0
 800b834:	f1a1 0104 	sub.w	r1, r1, #4
 800b838:	dc51      	bgt.n	800b8de <__kernel_rem_pio2f+0x48a>
 800b83a:	4621      	mov	r1, r4
 800b83c:	2901      	cmp	r1, #1
 800b83e:	f1a2 0204 	sub.w	r2, r2, #4
 800b842:	dc5c      	bgt.n	800b8fe <__kernel_rem_pio2f+0x4aa>
 800b844:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800b760 <__kernel_rem_pio2f+0x30c>
 800b848:	3304      	adds	r3, #4
 800b84a:	2c01      	cmp	r4, #1
 800b84c:	dc67      	bgt.n	800b91e <__kernel_rem_pio2f+0x4ca>
 800b84e:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800b852:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800b856:	2f00      	cmp	r7, #0
 800b858:	d167      	bne.n	800b92a <__kernel_rem_pio2f+0x4d6>
 800b85a:	edc8 6a00 	vstr	s13, [r8]
 800b85e:	ed88 7a01 	vstr	s14, [r8, #4]
 800b862:	edc8 7a02 	vstr	s15, [r8, #8]
 800b866:	e7d5      	b.n	800b814 <__kernel_rem_pio2f+0x3c0>
 800b868:	aa30      	add	r2, sp, #192	; 0xc0
 800b86a:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800b760 <__kernel_rem_pio2f+0x30c>
 800b86e:	4413      	add	r3, r2
 800b870:	4622      	mov	r2, r4
 800b872:	2a00      	cmp	r2, #0
 800b874:	da24      	bge.n	800b8c0 <__kernel_rem_pio2f+0x46c>
 800b876:	b34f      	cbz	r7, 800b8cc <__kernel_rem_pio2f+0x478>
 800b878:	eef1 7a47 	vneg.f32	s15, s14
 800b87c:	edc8 7a00 	vstr	s15, [r8]
 800b880:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800b884:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b888:	aa31      	add	r2, sp, #196	; 0xc4
 800b88a:	2301      	movs	r3, #1
 800b88c:	429c      	cmp	r4, r3
 800b88e:	da20      	bge.n	800b8d2 <__kernel_rem_pio2f+0x47e>
 800b890:	b10f      	cbz	r7, 800b896 <__kernel_rem_pio2f+0x442>
 800b892:	eef1 7a67 	vneg.f32	s15, s15
 800b896:	edc8 7a01 	vstr	s15, [r8, #4]
 800b89a:	e7bb      	b.n	800b814 <__kernel_rem_pio2f+0x3c0>
 800b89c:	aa30      	add	r2, sp, #192	; 0xc0
 800b89e:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800b760 <__kernel_rem_pio2f+0x30c>
 800b8a2:	4413      	add	r3, r2
 800b8a4:	2c00      	cmp	r4, #0
 800b8a6:	da05      	bge.n	800b8b4 <__kernel_rem_pio2f+0x460>
 800b8a8:	b10f      	cbz	r7, 800b8ae <__kernel_rem_pio2f+0x45a>
 800b8aa:	eef1 7a67 	vneg.f32	s15, s15
 800b8ae:	edc8 7a00 	vstr	s15, [r8]
 800b8b2:	e7af      	b.n	800b814 <__kernel_rem_pio2f+0x3c0>
 800b8b4:	ed33 7a01 	vldmdb	r3!, {s14}
 800b8b8:	3c01      	subs	r4, #1
 800b8ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b8be:	e7f1      	b.n	800b8a4 <__kernel_rem_pio2f+0x450>
 800b8c0:	ed73 7a01 	vldmdb	r3!, {s15}
 800b8c4:	3a01      	subs	r2, #1
 800b8c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b8ca:	e7d2      	b.n	800b872 <__kernel_rem_pio2f+0x41e>
 800b8cc:	eef0 7a47 	vmov.f32	s15, s14
 800b8d0:	e7d4      	b.n	800b87c <__kernel_rem_pio2f+0x428>
 800b8d2:	ecb2 7a01 	vldmia	r2!, {s14}
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b8dc:	e7d6      	b.n	800b88c <__kernel_rem_pio2f+0x438>
 800b8de:	edd1 7a00 	vldr	s15, [r1]
 800b8e2:	edd1 6a01 	vldr	s13, [r1, #4]
 800b8e6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b8ea:	3801      	subs	r0, #1
 800b8ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b8f0:	ed81 7a00 	vstr	s14, [r1]
 800b8f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8f8:	edc1 7a01 	vstr	s15, [r1, #4]
 800b8fc:	e799      	b.n	800b832 <__kernel_rem_pio2f+0x3de>
 800b8fe:	edd2 7a00 	vldr	s15, [r2]
 800b902:	edd2 6a01 	vldr	s13, [r2, #4]
 800b906:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b90a:	3901      	subs	r1, #1
 800b90c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b910:	ed82 7a00 	vstr	s14, [r2]
 800b914:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b918:	edc2 7a01 	vstr	s15, [r2, #4]
 800b91c:	e78e      	b.n	800b83c <__kernel_rem_pio2f+0x3e8>
 800b91e:	ed33 7a01 	vldmdb	r3!, {s14}
 800b922:	3c01      	subs	r4, #1
 800b924:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b928:	e78f      	b.n	800b84a <__kernel_rem_pio2f+0x3f6>
 800b92a:	eef1 6a66 	vneg.f32	s13, s13
 800b92e:	eeb1 7a47 	vneg.f32	s14, s14
 800b932:	edc8 6a00 	vstr	s13, [r8]
 800b936:	ed88 7a01 	vstr	s14, [r8, #4]
 800b93a:	eef1 7a67 	vneg.f32	s15, s15
 800b93e:	e790      	b.n	800b862 <__kernel_rem_pio2f+0x40e>

0800b940 <__kernel_sinf>:
 800b940:	ee10 3a10 	vmov	r3, s0
 800b944:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b948:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b94c:	da04      	bge.n	800b958 <__kernel_sinf+0x18>
 800b94e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b952:	ee17 3a90 	vmov	r3, s15
 800b956:	b35b      	cbz	r3, 800b9b0 <__kernel_sinf+0x70>
 800b958:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b95c:	eddf 7a15 	vldr	s15, [pc, #84]	; 800b9b4 <__kernel_sinf+0x74>
 800b960:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800b9b8 <__kernel_sinf+0x78>
 800b964:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b968:	eddf 7a14 	vldr	s15, [pc, #80]	; 800b9bc <__kernel_sinf+0x7c>
 800b96c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b970:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800b9c0 <__kernel_sinf+0x80>
 800b974:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b978:	eddf 7a12 	vldr	s15, [pc, #72]	; 800b9c4 <__kernel_sinf+0x84>
 800b97c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b980:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b984:	b930      	cbnz	r0, 800b994 <__kernel_sinf+0x54>
 800b986:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800b9c8 <__kernel_sinf+0x88>
 800b98a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b98e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b992:	4770      	bx	lr
 800b994:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b998:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800b99c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b9a0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b9a4:	eddf 7a09 	vldr	s15, [pc, #36]	; 800b9cc <__kernel_sinf+0x8c>
 800b9a8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b9ac:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b9b0:	4770      	bx	lr
 800b9b2:	bf00      	nop
 800b9b4:	2f2ec9d3 	.word	0x2f2ec9d3
 800b9b8:	b2d72f34 	.word	0xb2d72f34
 800b9bc:	3638ef1b 	.word	0x3638ef1b
 800b9c0:	b9500d01 	.word	0xb9500d01
 800b9c4:	3c088889 	.word	0x3c088889
 800b9c8:	be2aaaab 	.word	0xbe2aaaab
 800b9cc:	3e2aaaab 	.word	0x3e2aaaab

0800b9d0 <with_errno>:
 800b9d0:	b570      	push	{r4, r5, r6, lr}
 800b9d2:	4604      	mov	r4, r0
 800b9d4:	460d      	mov	r5, r1
 800b9d6:	4616      	mov	r6, r2
 800b9d8:	f7fd fc14 	bl	8009204 <__errno>
 800b9dc:	4629      	mov	r1, r5
 800b9de:	6006      	str	r6, [r0, #0]
 800b9e0:	4620      	mov	r0, r4
 800b9e2:	bd70      	pop	{r4, r5, r6, pc}

0800b9e4 <xflow>:
 800b9e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9e6:	4614      	mov	r4, r2
 800b9e8:	461d      	mov	r5, r3
 800b9ea:	b108      	cbz	r0, 800b9f0 <xflow+0xc>
 800b9ec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b9f0:	e9cd 2300 	strd	r2, r3, [sp]
 800b9f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	4629      	mov	r1, r5
 800b9fc:	f7f4 fda8 	bl	8000550 <__aeabi_dmul>
 800ba00:	2222      	movs	r2, #34	; 0x22
 800ba02:	b003      	add	sp, #12
 800ba04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba08:	f7ff bfe2 	b.w	800b9d0 <with_errno>

0800ba0c <__math_uflow>:
 800ba0c:	b508      	push	{r3, lr}
 800ba0e:	2200      	movs	r2, #0
 800ba10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ba14:	f7ff ffe6 	bl	800b9e4 <xflow>
 800ba18:	ec41 0b10 	vmov	d0, r0, r1
 800ba1c:	bd08      	pop	{r3, pc}

0800ba1e <__math_oflow>:
 800ba1e:	b508      	push	{r3, lr}
 800ba20:	2200      	movs	r2, #0
 800ba22:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ba26:	f7ff ffdd 	bl	800b9e4 <xflow>
 800ba2a:	ec41 0b10 	vmov	d0, r0, r1
 800ba2e:	bd08      	pop	{r3, pc}

0800ba30 <fabs>:
 800ba30:	ec51 0b10 	vmov	r0, r1, d0
 800ba34:	ee10 2a10 	vmov	r2, s0
 800ba38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ba3c:	ec43 2b10 	vmov	d0, r2, r3
 800ba40:	4770      	bx	lr

0800ba42 <finite>:
 800ba42:	b082      	sub	sp, #8
 800ba44:	ed8d 0b00 	vstr	d0, [sp]
 800ba48:	9801      	ldr	r0, [sp, #4]
 800ba4a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ba4e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ba52:	0fc0      	lsrs	r0, r0, #31
 800ba54:	b002      	add	sp, #8
 800ba56:	4770      	bx	lr

0800ba58 <scalbn>:
 800ba58:	b570      	push	{r4, r5, r6, lr}
 800ba5a:	ec55 4b10 	vmov	r4, r5, d0
 800ba5e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ba62:	4606      	mov	r6, r0
 800ba64:	462b      	mov	r3, r5
 800ba66:	b99a      	cbnz	r2, 800ba90 <scalbn+0x38>
 800ba68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ba6c:	4323      	orrs	r3, r4
 800ba6e:	d036      	beq.n	800bade <scalbn+0x86>
 800ba70:	4b39      	ldr	r3, [pc, #228]	; (800bb58 <scalbn+0x100>)
 800ba72:	4629      	mov	r1, r5
 800ba74:	ee10 0a10 	vmov	r0, s0
 800ba78:	2200      	movs	r2, #0
 800ba7a:	f7f4 fd69 	bl	8000550 <__aeabi_dmul>
 800ba7e:	4b37      	ldr	r3, [pc, #220]	; (800bb5c <scalbn+0x104>)
 800ba80:	429e      	cmp	r6, r3
 800ba82:	4604      	mov	r4, r0
 800ba84:	460d      	mov	r5, r1
 800ba86:	da10      	bge.n	800baaa <scalbn+0x52>
 800ba88:	a32b      	add	r3, pc, #172	; (adr r3, 800bb38 <scalbn+0xe0>)
 800ba8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8e:	e03a      	b.n	800bb06 <scalbn+0xae>
 800ba90:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ba94:	428a      	cmp	r2, r1
 800ba96:	d10c      	bne.n	800bab2 <scalbn+0x5a>
 800ba98:	ee10 2a10 	vmov	r2, s0
 800ba9c:	4620      	mov	r0, r4
 800ba9e:	4629      	mov	r1, r5
 800baa0:	f7f4 fba0 	bl	80001e4 <__adddf3>
 800baa4:	4604      	mov	r4, r0
 800baa6:	460d      	mov	r5, r1
 800baa8:	e019      	b.n	800bade <scalbn+0x86>
 800baaa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800baae:	460b      	mov	r3, r1
 800bab0:	3a36      	subs	r2, #54	; 0x36
 800bab2:	4432      	add	r2, r6
 800bab4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bab8:	428a      	cmp	r2, r1
 800baba:	dd08      	ble.n	800bace <scalbn+0x76>
 800babc:	2d00      	cmp	r5, #0
 800babe:	a120      	add	r1, pc, #128	; (adr r1, 800bb40 <scalbn+0xe8>)
 800bac0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bac4:	da1c      	bge.n	800bb00 <scalbn+0xa8>
 800bac6:	a120      	add	r1, pc, #128	; (adr r1, 800bb48 <scalbn+0xf0>)
 800bac8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bacc:	e018      	b.n	800bb00 <scalbn+0xa8>
 800bace:	2a00      	cmp	r2, #0
 800bad0:	dd08      	ble.n	800bae4 <scalbn+0x8c>
 800bad2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bad6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bada:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bade:	ec45 4b10 	vmov	d0, r4, r5
 800bae2:	bd70      	pop	{r4, r5, r6, pc}
 800bae4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bae8:	da19      	bge.n	800bb1e <scalbn+0xc6>
 800baea:	f24c 3350 	movw	r3, #50000	; 0xc350
 800baee:	429e      	cmp	r6, r3
 800baf0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800baf4:	dd0a      	ble.n	800bb0c <scalbn+0xb4>
 800baf6:	a112      	add	r1, pc, #72	; (adr r1, 800bb40 <scalbn+0xe8>)
 800baf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d1e2      	bne.n	800bac6 <scalbn+0x6e>
 800bb00:	a30f      	add	r3, pc, #60	; (adr r3, 800bb40 <scalbn+0xe8>)
 800bb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb06:	f7f4 fd23 	bl	8000550 <__aeabi_dmul>
 800bb0a:	e7cb      	b.n	800baa4 <scalbn+0x4c>
 800bb0c:	a10a      	add	r1, pc, #40	; (adr r1, 800bb38 <scalbn+0xe0>)
 800bb0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d0b8      	beq.n	800ba88 <scalbn+0x30>
 800bb16:	a10e      	add	r1, pc, #56	; (adr r1, 800bb50 <scalbn+0xf8>)
 800bb18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb1c:	e7b4      	b.n	800ba88 <scalbn+0x30>
 800bb1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bb22:	3236      	adds	r2, #54	; 0x36
 800bb24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bb28:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bb2c:	4620      	mov	r0, r4
 800bb2e:	4b0c      	ldr	r3, [pc, #48]	; (800bb60 <scalbn+0x108>)
 800bb30:	2200      	movs	r2, #0
 800bb32:	e7e8      	b.n	800bb06 <scalbn+0xae>
 800bb34:	f3af 8000 	nop.w
 800bb38:	c2f8f359 	.word	0xc2f8f359
 800bb3c:	01a56e1f 	.word	0x01a56e1f
 800bb40:	8800759c 	.word	0x8800759c
 800bb44:	7e37e43c 	.word	0x7e37e43c
 800bb48:	8800759c 	.word	0x8800759c
 800bb4c:	fe37e43c 	.word	0xfe37e43c
 800bb50:	c2f8f359 	.word	0xc2f8f359
 800bb54:	81a56e1f 	.word	0x81a56e1f
 800bb58:	43500000 	.word	0x43500000
 800bb5c:	ffff3cb0 	.word	0xffff3cb0
 800bb60:	3c900000 	.word	0x3c900000

0800bb64 <fabsf>:
 800bb64:	ee10 3a10 	vmov	r3, s0
 800bb68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb6c:	ee00 3a10 	vmov	s0, r3
 800bb70:	4770      	bx	lr
	...

0800bb74 <floorf>:
 800bb74:	ee10 3a10 	vmov	r3, s0
 800bb78:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bb7c:	3a7f      	subs	r2, #127	; 0x7f
 800bb7e:	2a16      	cmp	r2, #22
 800bb80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bb84:	dc2a      	bgt.n	800bbdc <floorf+0x68>
 800bb86:	2a00      	cmp	r2, #0
 800bb88:	da11      	bge.n	800bbae <floorf+0x3a>
 800bb8a:	eddf 7a18 	vldr	s15, [pc, #96]	; 800bbec <floorf+0x78>
 800bb8e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bb92:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bb96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb9a:	dd05      	ble.n	800bba8 <floorf+0x34>
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	da23      	bge.n	800bbe8 <floorf+0x74>
 800bba0:	4a13      	ldr	r2, [pc, #76]	; (800bbf0 <floorf+0x7c>)
 800bba2:	2900      	cmp	r1, #0
 800bba4:	bf18      	it	ne
 800bba6:	4613      	movne	r3, r2
 800bba8:	ee00 3a10 	vmov	s0, r3
 800bbac:	4770      	bx	lr
 800bbae:	4911      	ldr	r1, [pc, #68]	; (800bbf4 <floorf+0x80>)
 800bbb0:	4111      	asrs	r1, r2
 800bbb2:	420b      	tst	r3, r1
 800bbb4:	d0fa      	beq.n	800bbac <floorf+0x38>
 800bbb6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800bbec <floorf+0x78>
 800bbba:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bbbe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bbc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbc6:	ddef      	ble.n	800bba8 <floorf+0x34>
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	bfbe      	ittt	lt
 800bbcc:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800bbd0:	fa40 f202 	asrlt.w	r2, r0, r2
 800bbd4:	189b      	addlt	r3, r3, r2
 800bbd6:	ea23 0301 	bic.w	r3, r3, r1
 800bbda:	e7e5      	b.n	800bba8 <floorf+0x34>
 800bbdc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800bbe0:	d3e4      	bcc.n	800bbac <floorf+0x38>
 800bbe2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bbe6:	4770      	bx	lr
 800bbe8:	2300      	movs	r3, #0
 800bbea:	e7dd      	b.n	800bba8 <floorf+0x34>
 800bbec:	7149f2ca 	.word	0x7149f2ca
 800bbf0:	bf800000 	.word	0xbf800000
 800bbf4:	007fffff 	.word	0x007fffff

0800bbf8 <nanf>:
 800bbf8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bc00 <nanf+0x8>
 800bbfc:	4770      	bx	lr
 800bbfe:	bf00      	nop
 800bc00:	7fc00000 	.word	0x7fc00000

0800bc04 <scalbnf>:
 800bc04:	ee10 3a10 	vmov	r3, s0
 800bc08:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800bc0c:	d025      	beq.n	800bc5a <scalbnf+0x56>
 800bc0e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800bc12:	d302      	bcc.n	800bc1a <scalbnf+0x16>
 800bc14:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bc18:	4770      	bx	lr
 800bc1a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800bc1e:	d122      	bne.n	800bc66 <scalbnf+0x62>
 800bc20:	4b2a      	ldr	r3, [pc, #168]	; (800bccc <scalbnf+0xc8>)
 800bc22:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800bcd0 <scalbnf+0xcc>
 800bc26:	4298      	cmp	r0, r3
 800bc28:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bc2c:	db16      	blt.n	800bc5c <scalbnf+0x58>
 800bc2e:	ee10 3a10 	vmov	r3, s0
 800bc32:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bc36:	3a19      	subs	r2, #25
 800bc38:	4402      	add	r2, r0
 800bc3a:	2afe      	cmp	r2, #254	; 0xfe
 800bc3c:	dd15      	ble.n	800bc6a <scalbnf+0x66>
 800bc3e:	ee10 3a10 	vmov	r3, s0
 800bc42:	eddf 7a24 	vldr	s15, [pc, #144]	; 800bcd4 <scalbnf+0xd0>
 800bc46:	eddf 6a24 	vldr	s13, [pc, #144]	; 800bcd8 <scalbnf+0xd4>
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	eeb0 7a67 	vmov.f32	s14, s15
 800bc50:	bfb8      	it	lt
 800bc52:	eef0 7a66 	vmovlt.f32	s15, s13
 800bc56:	ee27 0a27 	vmul.f32	s0, s14, s15
 800bc5a:	4770      	bx	lr
 800bc5c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800bcdc <scalbnf+0xd8>
 800bc60:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bc64:	4770      	bx	lr
 800bc66:	0dd2      	lsrs	r2, r2, #23
 800bc68:	e7e6      	b.n	800bc38 <scalbnf+0x34>
 800bc6a:	2a00      	cmp	r2, #0
 800bc6c:	dd06      	ble.n	800bc7c <scalbnf+0x78>
 800bc6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bc72:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800bc76:	ee00 3a10 	vmov	s0, r3
 800bc7a:	4770      	bx	lr
 800bc7c:	f112 0f16 	cmn.w	r2, #22
 800bc80:	da1a      	bge.n	800bcb8 <scalbnf+0xb4>
 800bc82:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bc86:	4298      	cmp	r0, r3
 800bc88:	ee10 3a10 	vmov	r3, s0
 800bc8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc90:	dd0a      	ble.n	800bca8 <scalbnf+0xa4>
 800bc92:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800bcd4 <scalbnf+0xd0>
 800bc96:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800bcd8 <scalbnf+0xd4>
 800bc9a:	eef0 7a40 	vmov.f32	s15, s0
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	bf18      	it	ne
 800bca2:	eeb0 0a47 	vmovne.f32	s0, s14
 800bca6:	e7db      	b.n	800bc60 <scalbnf+0x5c>
 800bca8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800bcdc <scalbnf+0xd8>
 800bcac:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800bce0 <scalbnf+0xdc>
 800bcb0:	eef0 7a40 	vmov.f32	s15, s0
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	e7f3      	b.n	800bca0 <scalbnf+0x9c>
 800bcb8:	3219      	adds	r2, #25
 800bcba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bcbe:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800bcc2:	eddf 7a08 	vldr	s15, [pc, #32]	; 800bce4 <scalbnf+0xe0>
 800bcc6:	ee07 3a10 	vmov	s14, r3
 800bcca:	e7c4      	b.n	800bc56 <scalbnf+0x52>
 800bccc:	ffff3cb0 	.word	0xffff3cb0
 800bcd0:	4c000000 	.word	0x4c000000
 800bcd4:	7149f2ca 	.word	0x7149f2ca
 800bcd8:	f149f2ca 	.word	0xf149f2ca
 800bcdc:	0da24260 	.word	0x0da24260
 800bce0:	8da24260 	.word	0x8da24260
 800bce4:	33000000 	.word	0x33000000

0800bce8 <__ieee754_logf>:
 800bce8:	ee10 3a10 	vmov	r3, s0
 800bcec:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800bcf0:	d106      	bne.n	800bd00 <__ieee754_logf+0x18>
 800bcf2:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800be88 <__ieee754_logf+0x1a0>
 800bcf6:	eddf 7a65 	vldr	s15, [pc, #404]	; 800be8c <__ieee754_logf+0x1a4>
 800bcfa:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800bcfe:	4770      	bx	lr
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	da02      	bge.n	800bd0a <__ieee754_logf+0x22>
 800bd04:	ee30 7a40 	vsub.f32	s14, s0, s0
 800bd08:	e7f5      	b.n	800bcf6 <__ieee754_logf+0xe>
 800bd0a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bd0e:	db02      	blt.n	800bd16 <__ieee754_logf+0x2e>
 800bd10:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bd14:	4770      	bx	lr
 800bd16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bd1a:	bfb8      	it	lt
 800bd1c:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800be90 <__ieee754_logf+0x1a8>
 800bd20:	485c      	ldr	r0, [pc, #368]	; (800be94 <__ieee754_logf+0x1ac>)
 800bd22:	bfbe      	ittt	lt
 800bd24:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800bd28:	f06f 0118 	mvnlt.w	r1, #24
 800bd2c:	ee17 3a90 	vmovlt	r3, s15
 800bd30:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800bd34:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bd38:	4418      	add	r0, r3
 800bd3a:	bfa8      	it	ge
 800bd3c:	2100      	movge	r1, #0
 800bd3e:	3a7f      	subs	r2, #127	; 0x7f
 800bd40:	440a      	add	r2, r1
 800bd42:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800bd46:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800bd4a:	4319      	orrs	r1, r3
 800bd4c:	ee00 1a10 	vmov	s0, r1
 800bd50:	4951      	ldr	r1, [pc, #324]	; (800be98 <__ieee754_logf+0x1b0>)
 800bd52:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800bd56:	f103 000f 	add.w	r0, r3, #15
 800bd5a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bd5e:	4001      	ands	r1, r0
 800bd60:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bd64:	bb89      	cbnz	r1, 800bdca <__ieee754_logf+0xe2>
 800bd66:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800bd6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd6e:	d10f      	bne.n	800bd90 <__ieee754_logf+0xa8>
 800bd70:	2a00      	cmp	r2, #0
 800bd72:	f000 8085 	beq.w	800be80 <__ieee754_logf+0x198>
 800bd76:	ee07 2a90 	vmov	s15, r2
 800bd7a:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800be9c <__ieee754_logf+0x1b4>
 800bd7e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800bea0 <__ieee754_logf+0x1b8>
 800bd82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd86:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bd8a:	eea7 0a87 	vfma.f32	s0, s15, s14
 800bd8e:	4770      	bx	lr
 800bd90:	eddf 6a44 	vldr	s13, [pc, #272]	; 800bea4 <__ieee754_logf+0x1bc>
 800bd94:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bd98:	eee0 7a66 	vfms.f32	s15, s0, s13
 800bd9c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800bda0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bda4:	b912      	cbnz	r2, 800bdac <__ieee754_logf+0xc4>
 800bda6:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bdaa:	4770      	bx	lr
 800bdac:	ee07 2a90 	vmov	s15, r2
 800bdb0:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800be9c <__ieee754_logf+0x1b4>
 800bdb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bdb8:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800bdbc:	ee37 0a40 	vsub.f32	s0, s14, s0
 800bdc0:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800bea0 <__ieee754_logf+0x1b8>
 800bdc4:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800bdc8:	4770      	bx	lr
 800bdca:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800bdce:	ee70 7a27 	vadd.f32	s15, s0, s15
 800bdd2:	eddf 5a35 	vldr	s11, [pc, #212]	; 800bea8 <__ieee754_logf+0x1c0>
 800bdd6:	eddf 4a35 	vldr	s9, [pc, #212]	; 800beac <__ieee754_logf+0x1c4>
 800bdda:	4935      	ldr	r1, [pc, #212]	; (800beb0 <__ieee754_logf+0x1c8>)
 800bddc:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800bde0:	4419      	add	r1, r3
 800bde2:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800bde6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800bdea:	430b      	orrs	r3, r1
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	ee07 2a90 	vmov	s15, r2
 800bdf2:	ee26 5a06 	vmul.f32	s10, s12, s12
 800bdf6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800bdfa:	ee25 7a05 	vmul.f32	s14, s10, s10
 800bdfe:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800beb4 <__ieee754_logf+0x1cc>
 800be02:	eee7 7a25 	vfma.f32	s15, s14, s11
 800be06:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800beb8 <__ieee754_logf+0x1d0>
 800be0a:	eee7 5a87 	vfma.f32	s11, s15, s14
 800be0e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800bebc <__ieee754_logf+0x1d4>
 800be12:	eee7 7a24 	vfma.f32	s15, s14, s9
 800be16:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800bec0 <__ieee754_logf+0x1d8>
 800be1a:	eee7 4a87 	vfma.f32	s9, s15, s14
 800be1e:	eddf 7a29 	vldr	s15, [pc, #164]	; 800bec4 <__ieee754_logf+0x1dc>
 800be22:	eee4 7a87 	vfma.f32	s15, s9, s14
 800be26:	ee67 7a85 	vmul.f32	s15, s15, s10
 800be2a:	eee5 7a87 	vfma.f32	s15, s11, s14
 800be2e:	dd1c      	ble.n	800be6a <__ieee754_logf+0x182>
 800be30:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800be34:	ee20 7a07 	vmul.f32	s14, s0, s14
 800be38:	ee27 7a00 	vmul.f32	s14, s14, s0
 800be3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800be40:	ee67 7a86 	vmul.f32	s15, s15, s12
 800be44:	b922      	cbnz	r2, 800be50 <__ieee754_logf+0x168>
 800be46:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be4a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800be4e:	4770      	bx	lr
 800be50:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800be9c <__ieee754_logf+0x1b4>
 800be54:	eee6 7a86 	vfma.f32	s15, s13, s12
 800be58:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be5c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800be60:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800bea0 <__ieee754_logf+0x1b8>
 800be64:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800be68:	4770      	bx	lr
 800be6a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800be6e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800be72:	2a00      	cmp	r2, #0
 800be74:	d0e9      	beq.n	800be4a <__ieee754_logf+0x162>
 800be76:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800be9c <__ieee754_logf+0x1b4>
 800be7a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800be7e:	e7ed      	b.n	800be5c <__ieee754_logf+0x174>
 800be80:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800be8c <__ieee754_logf+0x1a4>
 800be84:	4770      	bx	lr
 800be86:	bf00      	nop
 800be88:	cc000000 	.word	0xcc000000
 800be8c:	00000000 	.word	0x00000000
 800be90:	4c000000 	.word	0x4c000000
 800be94:	004afb20 	.word	0x004afb20
 800be98:	007ffff0 	.word	0x007ffff0
 800be9c:	3717f7d1 	.word	0x3717f7d1
 800bea0:	3f317180 	.word	0x3f317180
 800bea4:	3eaaaaab 	.word	0x3eaaaaab
 800bea8:	3e1cd04f 	.word	0x3e1cd04f
 800beac:	3e178897 	.word	0x3e178897
 800beb0:	ffcf5c30 	.word	0xffcf5c30
 800beb4:	3e638e29 	.word	0x3e638e29
 800beb8:	3ecccccd 	.word	0x3ecccccd
 800bebc:	3e3a3325 	.word	0x3e3a3325
 800bec0:	3e924925 	.word	0x3e924925
 800bec4:	3f2aaaab 	.word	0x3f2aaaab

0800bec8 <_init>:
 800bec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beca:	bf00      	nop
 800becc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bece:	bc08      	pop	{r3}
 800bed0:	469e      	mov	lr, r3
 800bed2:	4770      	bx	lr

0800bed4 <_fini>:
 800bed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bed6:	bf00      	nop
 800bed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800beda:	bc08      	pop	{r3}
 800bedc:	469e      	mov	lr, r3
 800bede:	4770      	bx	lr
